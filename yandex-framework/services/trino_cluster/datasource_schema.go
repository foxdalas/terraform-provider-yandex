package trino_cluster

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func ClusterDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"coordinator": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"resource_preset_id": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
					},
				},
				CustomType: CoordinatorType{
					ObjectType: types.ObjectType{
						AttrTypes: CoordinatorValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				MarkdownDescription: "Configuration of `coordinator` instances.",
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The creation timestamp of the resource.",
			},
			"deletion_protection": schema.BoolAttribute{
				Computed:            true,
				MarkdownDescription: "The `true` value means that resource is protected from accidental deletion.",
			},
			"description": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "The resource description.",
			},
			"folder_id": schema.StringAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "The resource identifier.",
			},
			"labels": schema.MapAttribute{
				Computed:            true,
				ElementType:         types.StringType,
				MarkdownDescription: "A set of key/value label pairs which assigned to resource.",
			},
			"logging": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Computed:            true,
						MarkdownDescription: "Enables delivery of logs generated by the Trino components to [Cloud Logging](https://yandex.cloud/docs/logging/).",
					},
					"folder_id": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "Logs will be written to **default log group** of specified folder. Exactly one of the attributes `folder_id` or `log_group_id` should be specified.",
					},
					"log_group_id": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "Logs will be written to the **specified log group**. Exactly one of the attributes `folder_id` or `log_group_id` should be specified.",
					},
					"min_level": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "Minimum level of messages that will be sent to Cloud Logging. Can be either `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR` or `FATAL`. If not set then server default is applied (currently `INFO`).",
						Validators: []validator.String{
							logLevelValidator(),
						},
					},
				},
				CustomType: LoggingType{
					ObjectType: types.ObjectType{
						AttrTypes: LoggingValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				MarkdownDescription: "Cloud Logging configuration.",
			},
			"maintenance_window": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"day": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "Day of week for maintenance window. One of `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.",
						Validators: []validator.String{
							mwDayValidator(),
						},
					},
					"hour": schema.Int64Attribute{
						Computed:            true,
						MarkdownDescription: "Hour of day in UTC time zone (1-24) for maintenance window.",
						Validators: []validator.Int64{
							mwHourValidator(),
						},
					},
					"type": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. If `WEEKLY`, day and hour must be specified.",
						Validators: []validator.String{
							mwTypeValidator(),
						},
					},
				},
				CustomType: MaintenanceWindowType{
					ObjectType: types.ObjectType{
						AttrTypes: MaintenanceWindowValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				MarkdownDescription: "Configuration of window for maintenance operations.",
				Validators: []validator.Object{
					mwValidator(),
				},
			},
			"name": schema.StringAttribute{
				Computed:            true,
				Optional:            true,
				MarkdownDescription: "The resource name.",
			},
			"retry_policy": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"additional_properties": schema.MapAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "Additional properties.",
						MarkdownDescription: "Additional properties.",
					},
					"exchange_manager": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"additional_properties": schema.MapAttribute{
								ElementType:         types.StringType,
								Computed:            true,
								Description:         "Additional properties.",
								MarkdownDescription: "Additional properties.",
							},
							"service_s3": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{},
								CustomType: ServiceS3Type{
									ObjectType: types.ObjectType{
										AttrTypes: ServiceS3Value{}.AttributeTypes(ctx),
									},
								},
								Computed:            true,
								Description:         "Use S3 created on service side as exchange manager.",
								MarkdownDescription: "Use S3 created on service side as exchange manager.",
							},
						},
						CustomType: ExchangeManagerType{
							ObjectType: types.ObjectType{
								AttrTypes: ExchangeManagerValue{}.AttributeTypes(ctx),
							},
						},
						Computed:            true,
						Description:         "Configuration for exchange manager.",
						MarkdownDescription: "Configuration for exchange manager.",
					},
					"policy": schema.StringAttribute{
						Computed:            true,
						Description:         "Retry policy level",
						MarkdownDescription: "Retry policy level",
					},
				},
				CustomType: RetryPolicyType{
					ObjectType: types.ObjectType{
						AttrTypes: RetryPolicyValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Configuration for retry policy, specifying the spooling storage destination and other settings.",
				MarkdownDescription: "Configuration for retry policy, specifying the spooling storage destination and other settings.",
			},
			"security_group_ids": schema.SetAttribute{
				Computed:            true,
				ElementType:         types.StringType,
				MarkdownDescription: "The list of security groups applied to resource or their components.",
			},
			"service_account_id": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "[Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource. For more information, see [documentation](https://yandex.cloud/docs/managed-trino/concepts/impersonation).",
			},
			"subnet_ids": schema.SetAttribute{
				ElementType:         types.StringType,
				Computed:            true,
				MarkdownDescription: "The list of VPC subnets identifiers which resource is attached.",
			},
			"tls": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"trusted_certificates": schema.ListAttribute{
						ElementType:         types.StringType,
						Computed:            true,
						Description:         "Trusted CA-certificates. Each element should contain single self-signed CA-certificate or chain of CA-certificates where first certificate if leaf and last certificate is self-signed root.",
						MarkdownDescription: "Trusted CA-certificates. Each element should contain single self-signed CA-certificate or chain of CA-certificates where first certificate if leaf and last certificate is self-signed root.",
					},
				},
				CustomType: TlsType{
					ObjectType: types.ObjectType{
						AttrTypes: TlsValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "Configuration for TLS.",
				MarkdownDescription: "Configuration for TLS.",
			},
			"version": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "Trino version. Format: \"Number\".",
			},
			"worker": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"auto_scale": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"max_count": schema.Int64Attribute{
								Computed:            true,
								MarkdownDescription: "The maximum number of worker instances.",
							},
							"min_count": schema.Int64Attribute{
								Computed:            true,
								MarkdownDescription: "The minimum number of worker instances.",
							},
						},
						CustomType: AutoScaleType{
							ObjectType: types.ObjectType{
								AttrTypes: AutoScaleValue{}.AttributeTypes(ctx),
							},
						},
						Computed:            true,
						MarkdownDescription: "A scaling policy that dynamically adjusts the number of worker instances based on the cluster's workload.",
					},
					"fixed_scale": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"count": schema.Int64Attribute{
								Computed:            true,
								MarkdownDescription: "Specifies the number of worker instances.",
							},
						},
						CustomType: FixedScaleType{
							ObjectType: types.ObjectType{
								AttrTypes: FixedScaleValue{}.AttributeTypes(ctx),
							},
						},
						Computed:            true,
						MarkdownDescription: "A fixed scaling policy that specifies a fixed number of worker instances.",
					},
					"resource_preset_id": schema.StringAttribute{
						Computed:            true,
						MarkdownDescription: "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
					},
				},
				CustomType: WorkerType{
					ObjectType: types.ObjectType{
						AttrTypes: WorkerValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				MarkdownDescription: "Configuration of worker instances.",
				Validators: []validator.Object{
					workerValidator(),
				},
			},
		},
		Blocks: map[string]schema.Block{
			"timeouts": timeouts.Block(ctx, timeouts.Opts{
				Read: true,
			}),
		},
		Description: "Managed Trino cluster.",
	}
}
