// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package trino_cluster

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ClusterResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"coordinator": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"resource_preset_id": schema.StringAttribute{
						Required:            true,
						Description:         "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
						MarkdownDescription: "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
					},
				},
				CustomType: CoordinatorType{
					ObjectType: types.ObjectType{
						AttrTypes: CoordinatorValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Configuration of `coordinator` instances.",
				MarkdownDescription: "Configuration of `coordinator` instances.",
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The creation timestamp of the resource.",
				MarkdownDescription: "The creation timestamp of the resource.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"deletion_protection": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The `true` value means that resource is protected from accidental deletion.",
				MarkdownDescription: "The `true` value means that resource is protected from accidental deletion.",
				Default:             booldefault.StaticBool(false),
			},
			"description": schema.StringAttribute{
				Optional:            true,
				Description:         "The resource description.",
				MarkdownDescription: "The resource description.",
			},
			"folder_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.",
				MarkdownDescription: "The folder identifier that resource belongs to. If it is not provided, the default provider `folder-id` is used.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					stringplanmodifier.RequiresReplace(),
				},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The resource identifier.",
				MarkdownDescription: "The resource identifier.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "A set of key/value label pairs which assigned to resource.",
				MarkdownDescription: "A set of key/value label pairs which assigned to resource.",
			},
			"logging": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"enabled": schema.BoolAttribute{
						Required:            true,
						Description:         "Enables delivery of logs generated by the Trino components to [Cloud Logging](https://yandex.cloud/docs/logging/).",
						MarkdownDescription: "Enables delivery of logs generated by the Trino components to [Cloud Logging](https://yandex.cloud/docs/logging/).",
					},
					"folder_id": schema.StringAttribute{
						Optional:            true,
						Description:         "Logs will be written to **default log group** of specified folder. Exactly one of the attributes `folder_id` or `log_group_id` should be specified.",
						MarkdownDescription: "Logs will be written to **default log group** of specified folder. Exactly one of the attributes `folder_id` or `log_group_id` should be specified.",
					},
					"log_group_id": schema.StringAttribute{
						Optional:            true,
						Description:         "Logs will be written to the **specified log group**. Exactly one of the attributes `folder_id` or `log_group_id` should be specified.",
						MarkdownDescription: "Logs will be written to the **specified log group**. Exactly one of the attributes `folder_id` or `log_group_id` should be specified.",
					},
					"min_level": schema.StringAttribute{
						Optional:            true,
						Description:         "Minimum level of messages that will be sent to Cloud Logging. Can be either `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR` or `FATAL`. If not set then server default is applied (currently `INFO`).",
						MarkdownDescription: "Minimum level of messages that will be sent to Cloud Logging. Can be either `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR` or `FATAL`. If not set then server default is applied (currently `INFO`).",
						Validators: []validator.String{
							logLevelValidator(),
						},
					},
				},
				CustomType: LoggingType{
					ObjectType: types.ObjectType{
						AttrTypes: LoggingValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "Cloud Logging configuration.",
				MarkdownDescription: "Cloud Logging configuration.",
			},
			"maintenance_window": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"day": schema.StringAttribute{
						Optional:            true,
						Description:         "Day of week for maintenance window. One of `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.",
						MarkdownDescription: "Day of week for maintenance window. One of `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.",
						Validators: []validator.String{
							mwDayValidator(),
						},
					},
					"hour": schema.Int64Attribute{
						Optional:            true,
						Description:         "Hour of day in UTC time zone (1-24) for maintenance window.",
						MarkdownDescription: "Hour of day in UTC time zone (1-24) for maintenance window.",
						Validators: []validator.Int64{
							mwHourValidator(),
						},
					},
					"type": schema.StringAttribute{
						Optional:            true,
						Description:         "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. If `WEEKLY`, day and hour must be specified.",
						MarkdownDescription: "Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. If `WEEKLY`, day and hour must be specified.",
						Validators: []validator.String{
							mwTypeValidator(),
						},
					},
				},
				CustomType: MaintenanceWindowType{
					ObjectType: types.ObjectType{
						AttrTypes: MaintenanceWindowValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "Configuration of window for maintenance operations.",
				MarkdownDescription: "Configuration of window for maintenance operations.",
				PlanModifiers: []planmodifier.Object{
					mwPlanModifier(),
				},
				Validators: []validator.Object{
					mwValidator(),
				},
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The resource name.",
				MarkdownDescription: "The resource name.",
			},
			"retry_policy": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"additional_properties": schema.MapAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Description:         "Additional properties.",
						MarkdownDescription: "Additional properties.",
					},
					"exchange_manager": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"additional_properties": schema.MapAttribute{
								ElementType:         types.StringType,
								Optional:            true,
								Description:         "Additional properties.",
								MarkdownDescription: "Additional properties.",
							},
							"service_s3": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{},
								CustomType: ServiceS3Type{
									ObjectType: types.ObjectType{
										AttrTypes: ServiceS3Value{}.AttributeTypes(ctx),
									},
								},
								Required:            true,
								Description:         "Use S3 created on service side as exchange manager.",
								MarkdownDescription: "Use S3 created on service side as exchange manager.",
							},
						},
						CustomType: ExchangeManagerType{
							ObjectType: types.ObjectType{
								AttrTypes: ExchangeManagerValue{}.AttributeTypes(ctx),
							},
						},
						Required:            true,
						Description:         "Configuration for exchange manager.",
						MarkdownDescription: "Configuration for exchange manager.",
					},
					"policy": schema.StringAttribute{
						Required:            true,
						Description:         "Retry policy level",
						MarkdownDescription: "Retry policy level",
					},
				},
				CustomType: RetryPolicyType{
					ObjectType: types.ObjectType{
						AttrTypes: RetryPolicyValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "Configuration for retry policy, specifying the spooling storage destination and other settings.",
				MarkdownDescription: "Configuration for retry policy, specifying the spooling storage destination and other settings.",
			},
			"security_group_ids": schema.SetAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "The list of security groups applied to resource or their components.",
				MarkdownDescription: "The list of security groups applied to resource or their components.",
			},
			"service_account_id": schema.StringAttribute{
				Required:            true,
				Description:         "[Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource. For more information, see [documentation](https://yandex.cloud/docs/managed-trino/concepts/impersonation).",
				MarkdownDescription: "[Service account](https://yandex.cloud/docs/iam/concepts/users/service-accounts) which linked to the resource. For more information, see [documentation](https://yandex.cloud/docs/managed-trino/concepts/impersonation).",
			},
			"subnet_ids": schema.SetAttribute{
				ElementType:         types.StringType,
				Required:            true,
				Description:         "The list of VPC subnets identifiers which resource is attached.",
				MarkdownDescription: "The list of VPC subnets identifiers which resource is attached.",
				PlanModifiers: []planmodifier.Set{
					setplanmodifier.RequiresReplace(),
				},
			},
			"tls": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"trusted_certificates": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Description:         "Trusted CA-certificates. Each element should contain single self-signed CA-certificate or chain of CA-certificates where first certificate if leaf and last certificate is self-signed root.",
						MarkdownDescription: "Trusted CA-certificates. Each element should contain single self-signed CA-certificate or chain of CA-certificates where first certificate if leaf and last certificate is self-signed root.",
					},
				},
				CustomType: TlsType{
					ObjectType: types.ObjectType{
						AttrTypes: TlsValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "Configuration for TLS.",
				MarkdownDescription: "Configuration for TLS.",
			},
			"version": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Trino version. Format: \"Number\".",
				MarkdownDescription: "Trino version. Format: \"Number\".",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"worker": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"auto_scale": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"max_count": schema.Int64Attribute{
								Required:            true,
								Description:         "The maximum number of worker instances.",
								MarkdownDescription: "The maximum number of worker instances.",
							},
							"min_count": schema.Int64Attribute{
								Required:            true,
								Description:         "The minimum number of worker instances.",
								MarkdownDescription: "The minimum number of worker instances.",
							},
						},
						CustomType: AutoScaleType{
							ObjectType: types.ObjectType{
								AttrTypes: AutoScaleValue{}.AttributeTypes(ctx),
							},
						},
						Optional:            true,
						Description:         "A scaling policy that dynamically adjusts the number of worker instances based on the cluster's workload.",
						MarkdownDescription: "A scaling policy that dynamically adjusts the number of worker instances based on the cluster's workload.",
					},
					"fixed_scale": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"count": schema.Int64Attribute{
								Required:            true,
								Description:         "Specifies the number of worker instances.",
								MarkdownDescription: "Specifies the number of worker instances.",
							},
						},
						CustomType: FixedScaleType{
							ObjectType: types.ObjectType{
								AttrTypes: FixedScaleValue{}.AttributeTypes(ctx),
							},
						},
						Optional:            true,
						Description:         "A fixed scaling policy that specifies a fixed number of worker instances.",
						MarkdownDescription: "A fixed scaling policy that specifies a fixed number of worker instances.",
					},
					"resource_preset_id": schema.StringAttribute{
						Required:            true,
						Description:         "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
						MarkdownDescription: "The identifier of the preset for computational resources available to an instance (CPU, memory etc.).",
					},
				},
				CustomType: WorkerType{
					ObjectType: types.ObjectType{
						AttrTypes: WorkerValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Configuration of worker instances.",
				MarkdownDescription: "Configuration of worker instances.",
				Validators: []validator.Object{
					workerValidator(),
				},
			},
		},
		Blocks: map[string]schema.Block{
			"timeouts": schema.SingleNestedBlock{
				CustomType: timeouts.Type{},
			},
		},
		Description: "Managed Trino cluster.",
	}
}

type ClusterModel struct {
	Coordinator        CoordinatorValue       `tfsdk:"coordinator"`
	CreatedAt          types.String           `tfsdk:"created_at"`
	DeletionProtection types.Bool             `tfsdk:"deletion_protection"`
	Description        types.String           `tfsdk:"description"`
	FolderId           types.String           `tfsdk:"folder_id"`
	Id                 types.String           `tfsdk:"id"`
	Labels             types.Map              `tfsdk:"labels"`
	Logging            LoggingValue           `tfsdk:"logging"`
	MaintenanceWindow  MaintenanceWindowValue `tfsdk:"maintenance_window"`
	Name               types.String           `tfsdk:"name"`
	RetryPolicy        RetryPolicyValue       `tfsdk:"retry_policy"`
	SecurityGroupIds   types.Set              `tfsdk:"security_group_ids"`
	ServiceAccountId   types.String           `tfsdk:"service_account_id"`
	SubnetIds          types.Set              `tfsdk:"subnet_ids"`
	Tls                TlsValue               `tfsdk:"tls"`
	Version            types.String           `tfsdk:"version"`
	Worker             WorkerValue            `tfsdk:"worker"`
	Timeouts           timeouts.Value         `tfsdk:"timeouts"`
}

var _ basetypes.ObjectTypable = CoordinatorType{}

type CoordinatorType struct {
	basetypes.ObjectType
}

func (t CoordinatorType) Equal(o attr.Type) bool {
	other, ok := o.(CoordinatorType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CoordinatorType) String() string {
	return "CoordinatorType"
}

func (t CoordinatorType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return nil, diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CoordinatorValue{
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewCoordinatorValueNull() CoordinatorValue {
	return CoordinatorValue{
		state: attr.ValueStateNull,
	}
}

func NewCoordinatorValueUnknown() CoordinatorValue {
	return CoordinatorValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCoordinatorValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CoordinatorValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CoordinatorValue Attribute Value",
				"While creating a CoordinatorValue value, a missing attribute value was detected. "+
					"A CoordinatorValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CoordinatorValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CoordinatorValue Attribute Type",
				"While creating a CoordinatorValue value, an invalid attribute value was detected. "+
					"A CoordinatorValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CoordinatorValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CoordinatorValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CoordinatorValue Attribute Value",
				"While creating a CoordinatorValue value, an extra attribute value was detected. "+
					"A CoordinatorValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CoordinatorValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCoordinatorValueUnknown(), diags
	}

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return NewCoordinatorValueUnknown(), diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return NewCoordinatorValueUnknown(), diags
	}

	return CoordinatorValue{
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewCoordinatorValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CoordinatorValue {
	object, diags := NewCoordinatorValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCoordinatorValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CoordinatorType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCoordinatorValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCoordinatorValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCoordinatorValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCoordinatorValueMust(CoordinatorValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CoordinatorType) ValueType(ctx context.Context) attr.Value {
	return CoordinatorValue{}
}

var _ basetypes.ObjectValuable = CoordinatorValue{}

type CoordinatorValue struct {
	ResourcePresetId basetypes.StringValue `tfsdk:"resource_preset_id"`
	state            attr.ValueState
}

func (v CoordinatorValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["resource_preset_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.ResourcePresetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_preset_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CoordinatorValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CoordinatorValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CoordinatorValue) String() string {
	return "CoordinatorValue"
}

func (v CoordinatorValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"resource_preset_id": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"resource_preset_id": v.ResourcePresetId,
		})

	return objVal, diags
}

func (v CoordinatorValue) Equal(o attr.Value) bool {
	other, ok := o.(CoordinatorValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ResourcePresetId.Equal(other.ResourcePresetId) {
		return false
	}

	return true
}

func (v CoordinatorValue) Type(ctx context.Context) attr.Type {
	return CoordinatorType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CoordinatorValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"resource_preset_id": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LoggingType{}

type LoggingType struct {
	basetypes.ObjectType
}

func (t LoggingType) Equal(o attr.Type) bool {
	other, ok := o.(LoggingType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LoggingType) String() string {
	return "LoggingType"
}

func (t LoggingType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	folderIdAttribute, ok := attributes["folder_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`folder_id is missing from object`)

		return nil, diags
	}

	folderIdVal, ok := folderIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`folder_id expected to be basetypes.StringValue, was: %T`, folderIdAttribute))
	}

	logGroupIdAttribute, ok := attributes["log_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`log_group_id is missing from object`)

		return nil, diags
	}

	logGroupIdVal, ok := logGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`log_group_id expected to be basetypes.StringValue, was: %T`, logGroupIdAttribute))
	}

	minLevelAttribute, ok := attributes["min_level"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_level is missing from object`)

		return nil, diags
	}

	minLevelVal, ok := minLevelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_level expected to be basetypes.StringValue, was: %T`, minLevelAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LoggingValue{
		Enabled:    enabledVal,
		FolderId:   folderIdVal,
		LogGroupId: logGroupIdVal,
		MinLevel:   minLevelVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewLoggingValueNull() LoggingValue {
	return LoggingValue{
		state: attr.ValueStateNull,
	}
}

func NewLoggingValueUnknown() LoggingValue {
	return LoggingValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLoggingValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LoggingValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LoggingValue Attribute Value",
				"While creating a LoggingValue value, a missing attribute value was detected. "+
					"A LoggingValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LoggingValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LoggingValue Attribute Type",
				"While creating a LoggingValue value, an invalid attribute value was detected. "+
					"A LoggingValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LoggingValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LoggingValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LoggingValue Attribute Value",
				"While creating a LoggingValue value, an extra attribute value was detected. "+
					"A LoggingValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LoggingValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLoggingValueUnknown(), diags
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewLoggingValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	folderIdAttribute, ok := attributes["folder_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`folder_id is missing from object`)

		return NewLoggingValueUnknown(), diags
	}

	folderIdVal, ok := folderIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`folder_id expected to be basetypes.StringValue, was: %T`, folderIdAttribute))
	}

	logGroupIdAttribute, ok := attributes["log_group_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`log_group_id is missing from object`)

		return NewLoggingValueUnknown(), diags
	}

	logGroupIdVal, ok := logGroupIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`log_group_id expected to be basetypes.StringValue, was: %T`, logGroupIdAttribute))
	}

	minLevelAttribute, ok := attributes["min_level"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_level is missing from object`)

		return NewLoggingValueUnknown(), diags
	}

	minLevelVal, ok := minLevelAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_level expected to be basetypes.StringValue, was: %T`, minLevelAttribute))
	}

	if diags.HasError() {
		return NewLoggingValueUnknown(), diags
	}

	return LoggingValue{
		Enabled:    enabledVal,
		FolderId:   folderIdVal,
		LogGroupId: logGroupIdVal,
		MinLevel:   minLevelVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewLoggingValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LoggingValue {
	object, diags := NewLoggingValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLoggingValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LoggingType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLoggingValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLoggingValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLoggingValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLoggingValueMust(LoggingValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LoggingType) ValueType(ctx context.Context) attr.Value {
	return LoggingValue{}
}

var _ basetypes.ObjectValuable = LoggingValue{}

type LoggingValue struct {
	Enabled    basetypes.BoolValue   `tfsdk:"enabled"`
	FolderId   basetypes.StringValue `tfsdk:"folder_id"`
	LogGroupId basetypes.StringValue `tfsdk:"log_group_id"`
	MinLevel   basetypes.StringValue `tfsdk:"min_level"`
	state      attr.ValueState
}

func (v LoggingValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["folder_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["log_group_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["min_level"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.FolderId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["folder_id"] = val

		val, err = v.LogGroupId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["log_group_id"] = val

		val, err = v.MinLevel.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["min_level"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LoggingValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LoggingValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LoggingValue) String() string {
	return "LoggingValue"
}

func (v LoggingValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"enabled":      basetypes.BoolType{},
		"folder_id":    basetypes.StringType{},
		"log_group_id": basetypes.StringType{},
		"min_level":    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"enabled":      v.Enabled,
			"folder_id":    v.FolderId,
			"log_group_id": v.LogGroupId,
			"min_level":    v.MinLevel,
		})

	return objVal, diags
}

func (v LoggingValue) Equal(o attr.Value) bool {
	other, ok := o.(LoggingValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.FolderId.Equal(other.FolderId) {
		return false
	}

	if !v.LogGroupId.Equal(other.LogGroupId) {
		return false
	}

	if !v.MinLevel.Equal(other.MinLevel) {
		return false
	}

	return true
}

func (v LoggingValue) Type(ctx context.Context) attr.Type {
	return LoggingType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LoggingValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"enabled":      basetypes.BoolType{},
		"folder_id":    basetypes.StringType{},
		"log_group_id": basetypes.StringType{},
		"min_level":    basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = MaintenanceWindowType{}

type MaintenanceWindowType struct {
	basetypes.ObjectType
}

func (t MaintenanceWindowType) Equal(o attr.Type) bool {
	other, ok := o.(MaintenanceWindowType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MaintenanceWindowType) String() string {
	return "MaintenanceWindowType"
}

func (t MaintenanceWindowType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dayAttribute, ok := attributes["day"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`day is missing from object`)

		return nil, diags
	}

	dayVal, ok := dayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`day expected to be basetypes.StringValue, was: %T`, dayAttribute))
	}

	hourAttribute, ok := attributes["hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hour is missing from object`)

		return nil, diags
	}

	hourVal, ok := hourAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hour expected to be basetypes.Int64Value, was: %T`, hourAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return nil, diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MaintenanceWindowValue{
		Day:                   dayVal,
		Hour:                  hourVal,
		MaintenanceWindowType: typeVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewMaintenanceWindowValueNull() MaintenanceWindowValue {
	return MaintenanceWindowValue{
		state: attr.ValueStateNull,
	}
}

func NewMaintenanceWindowValueUnknown() MaintenanceWindowValue {
	return MaintenanceWindowValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMaintenanceWindowValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MaintenanceWindowValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MaintenanceWindowValue Attribute Value",
				"While creating a MaintenanceWindowValue value, a missing attribute value was detected. "+
					"A MaintenanceWindowValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MaintenanceWindowValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MaintenanceWindowValue Attribute Type",
				"While creating a MaintenanceWindowValue value, an invalid attribute value was detected. "+
					"A MaintenanceWindowValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MaintenanceWindowValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MaintenanceWindowValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MaintenanceWindowValue Attribute Value",
				"While creating a MaintenanceWindowValue value, an extra attribute value was detected. "+
					"A MaintenanceWindowValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MaintenanceWindowValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMaintenanceWindowValueUnknown(), diags
	}

	dayAttribute, ok := attributes["day"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`day is missing from object`)

		return NewMaintenanceWindowValueUnknown(), diags
	}

	dayVal, ok := dayAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`day expected to be basetypes.StringValue, was: %T`, dayAttribute))
	}

	hourAttribute, ok := attributes["hour"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`hour is missing from object`)

		return NewMaintenanceWindowValueUnknown(), diags
	}

	hourVal, ok := hourAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`hour expected to be basetypes.Int64Value, was: %T`, hourAttribute))
	}

	typeAttribute, ok := attributes["type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`type is missing from object`)

		return NewMaintenanceWindowValueUnknown(), diags
	}

	typeVal, ok := typeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`type expected to be basetypes.StringValue, was: %T`, typeAttribute))
	}

	if diags.HasError() {
		return NewMaintenanceWindowValueUnknown(), diags
	}

	return MaintenanceWindowValue{
		Day:                   dayVal,
		Hour:                  hourVal,
		MaintenanceWindowType: typeVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewMaintenanceWindowValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MaintenanceWindowValue {
	object, diags := NewMaintenanceWindowValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMaintenanceWindowValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MaintenanceWindowType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMaintenanceWindowValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMaintenanceWindowValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMaintenanceWindowValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMaintenanceWindowValueMust(MaintenanceWindowValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MaintenanceWindowType) ValueType(ctx context.Context) attr.Value {
	return MaintenanceWindowValue{}
}

var _ basetypes.ObjectValuable = MaintenanceWindowValue{}

type MaintenanceWindowValue struct {
	Day                   basetypes.StringValue `tfsdk:"day"`
	Hour                  basetypes.Int64Value  `tfsdk:"hour"`
	MaintenanceWindowType basetypes.StringValue `tfsdk:"type"`
	state                 attr.ValueState
}

func (v MaintenanceWindowValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["day"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["hour"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Day.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["day"] = val

		val, err = v.Hour.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["hour"] = val

		val, err = v.MaintenanceWindowType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MaintenanceWindowValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MaintenanceWindowValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MaintenanceWindowValue) String() string {
	return "MaintenanceWindowValue"
}

func (v MaintenanceWindowValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"day":  basetypes.StringType{},
		"hour": basetypes.Int64Type{},
		"type": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"day":  v.Day,
			"hour": v.Hour,
			"type": v.MaintenanceWindowType,
		})

	return objVal, diags
}

func (v MaintenanceWindowValue) Equal(o attr.Value) bool {
	other, ok := o.(MaintenanceWindowValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Day.Equal(other.Day) {
		return false
	}

	if !v.Hour.Equal(other.Hour) {
		return false
	}

	if !v.MaintenanceWindowType.Equal(other.MaintenanceWindowType) {
		return false
	}

	return true
}

func (v MaintenanceWindowValue) Type(ctx context.Context) attr.Type {
	return MaintenanceWindowType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MaintenanceWindowValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"day":  basetypes.StringType{},
		"hour": basetypes.Int64Type{},
		"type": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = RetryPolicyType{}

type RetryPolicyType struct {
	basetypes.ObjectType
}

func (t RetryPolicyType) Equal(o attr.Type) bool {
	other, ok := o.(RetryPolicyType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t RetryPolicyType) String() string {
	return "RetryPolicyType"
}

func (t RetryPolicyType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	additionalPropertiesAttribute, ok := attributes["additional_properties"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`additional_properties is missing from object`)

		return nil, diags
	}

	additionalPropertiesVal, ok := additionalPropertiesAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`additional_properties expected to be basetypes.MapValue, was: %T`, additionalPropertiesAttribute))
	}

	exchangeManagerAttribute, ok := attributes["exchange_manager"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`exchange_manager is missing from object`)

		return nil, diags
	}

	exchangeManagerVal, ok := exchangeManagerAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`exchange_manager expected to be basetypes.ObjectValue, was: %T`, exchangeManagerAttribute))
	}

	policyAttribute, ok := attributes["policy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`policy is missing from object`)

		return nil, diags
	}

	policyVal, ok := policyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`policy expected to be basetypes.StringValue, was: %T`, policyAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return RetryPolicyValue{
		AdditionalProperties: additionalPropertiesVal,
		ExchangeManager:      exchangeManagerVal,
		Policy:               policyVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewRetryPolicyValueNull() RetryPolicyValue {
	return RetryPolicyValue{
		state: attr.ValueStateNull,
	}
}

func NewRetryPolicyValueUnknown() RetryPolicyValue {
	return RetryPolicyValue{
		state: attr.ValueStateUnknown,
	}
}

func NewRetryPolicyValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (RetryPolicyValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing RetryPolicyValue Attribute Value",
				"While creating a RetryPolicyValue value, a missing attribute value was detected. "+
					"A RetryPolicyValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RetryPolicyValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid RetryPolicyValue Attribute Type",
				"While creating a RetryPolicyValue value, an invalid attribute value was detected. "+
					"A RetryPolicyValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("RetryPolicyValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("RetryPolicyValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra RetryPolicyValue Attribute Value",
				"While creating a RetryPolicyValue value, an extra attribute value was detected. "+
					"A RetryPolicyValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra RetryPolicyValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewRetryPolicyValueUnknown(), diags
	}

	additionalPropertiesAttribute, ok := attributes["additional_properties"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`additional_properties is missing from object`)

		return NewRetryPolicyValueUnknown(), diags
	}

	additionalPropertiesVal, ok := additionalPropertiesAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`additional_properties expected to be basetypes.MapValue, was: %T`, additionalPropertiesAttribute))
	}

	exchangeManagerAttribute, ok := attributes["exchange_manager"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`exchange_manager is missing from object`)

		return NewRetryPolicyValueUnknown(), diags
	}

	exchangeManagerVal, ok := exchangeManagerAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`exchange_manager expected to be basetypes.ObjectValue, was: %T`, exchangeManagerAttribute))
	}

	policyAttribute, ok := attributes["policy"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`policy is missing from object`)

		return NewRetryPolicyValueUnknown(), diags
	}

	policyVal, ok := policyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`policy expected to be basetypes.StringValue, was: %T`, policyAttribute))
	}

	if diags.HasError() {
		return NewRetryPolicyValueUnknown(), diags
	}

	return RetryPolicyValue{
		AdditionalProperties: additionalPropertiesVal,
		ExchangeManager:      exchangeManagerVal,
		Policy:               policyVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewRetryPolicyValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) RetryPolicyValue {
	object, diags := NewRetryPolicyValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewRetryPolicyValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t RetryPolicyType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewRetryPolicyValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewRetryPolicyValueUnknown(), nil
	}

	if in.IsNull() {
		return NewRetryPolicyValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewRetryPolicyValueMust(RetryPolicyValue{}.AttributeTypes(ctx), attributes), nil
}

func (t RetryPolicyType) ValueType(ctx context.Context) attr.Value {
	return RetryPolicyValue{}
}

var _ basetypes.ObjectValuable = RetryPolicyValue{}

type RetryPolicyValue struct {
	AdditionalProperties basetypes.MapValue    `tfsdk:"additional_properties"`
	ExchangeManager      basetypes.ObjectValue `tfsdk:"exchange_manager"`
	Policy               basetypes.StringValue `tfsdk:"policy"`
	state                attr.ValueState
}

func (v RetryPolicyValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["additional_properties"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["exchange_manager"] = basetypes.ObjectType{
		AttrTypes: ExchangeManagerValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["policy"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.AdditionalProperties.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["additional_properties"] = val

		val, err = v.ExchangeManager.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["exchange_manager"] = val

		val, err = v.Policy.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["policy"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v RetryPolicyValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v RetryPolicyValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v RetryPolicyValue) String() string {
	return "RetryPolicyValue"
}

func (v RetryPolicyValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var exchangeManager basetypes.ObjectValue

	if v.ExchangeManager.IsNull() {
		exchangeManager = types.ObjectNull(
			ExchangeManagerValue{}.AttributeTypes(ctx),
		)
	}

	if v.ExchangeManager.IsUnknown() {
		exchangeManager = types.ObjectUnknown(
			ExchangeManagerValue{}.AttributeTypes(ctx),
		)
	}

	if !v.ExchangeManager.IsNull() && !v.ExchangeManager.IsUnknown() {
		exchangeManager = types.ObjectValueMust(
			ExchangeManagerValue{}.AttributeTypes(ctx),
			v.ExchangeManager.Attributes(),
		)
	}

	var additionalPropertiesVal basetypes.MapValue
	switch {
	case v.AdditionalProperties.IsUnknown():
		additionalPropertiesVal = types.MapUnknown(types.StringType)
	case v.AdditionalProperties.IsNull():
		additionalPropertiesVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		additionalPropertiesVal, d = types.MapValue(types.StringType, v.AdditionalProperties.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"additional_properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"exchange_manager": basetypes.ObjectType{
				AttrTypes: ExchangeManagerValue{}.AttributeTypes(ctx),
			},
			"policy": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"additional_properties": basetypes.MapType{
			ElemType: types.StringType,
		},
		"exchange_manager": basetypes.ObjectType{
			AttrTypes: ExchangeManagerValue{}.AttributeTypes(ctx),
		},
		"policy": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"additional_properties": additionalPropertiesVal,
			"exchange_manager":      exchangeManager,
			"policy":                v.Policy,
		})

	return objVal, diags
}

func (v RetryPolicyValue) Equal(o attr.Value) bool {
	other, ok := o.(RetryPolicyValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdditionalProperties.Equal(other.AdditionalProperties) {
		return false
	}

	if !v.ExchangeManager.Equal(other.ExchangeManager) {
		return false
	}

	if !v.Policy.Equal(other.Policy) {
		return false
	}

	return true
}

func (v RetryPolicyValue) Type(ctx context.Context) attr.Type {
	return RetryPolicyType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v RetryPolicyValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"additional_properties": basetypes.MapType{
			ElemType: types.StringType,
		},
		"exchange_manager": basetypes.ObjectType{
			AttrTypes: ExchangeManagerValue{}.AttributeTypes(ctx),
		},
		"policy": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = ExchangeManagerType{}

type ExchangeManagerType struct {
	basetypes.ObjectType
}

func (t ExchangeManagerType) Equal(o attr.Type) bool {
	other, ok := o.(ExchangeManagerType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ExchangeManagerType) String() string {
	return "ExchangeManagerType"
}

func (t ExchangeManagerType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	additionalPropertiesAttribute, ok := attributes["additional_properties"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`additional_properties is missing from object`)

		return nil, diags
	}

	additionalPropertiesVal, ok := additionalPropertiesAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`additional_properties expected to be basetypes.MapValue, was: %T`, additionalPropertiesAttribute))
	}

	serviceS3Attribute, ok := attributes["service_s3"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_s3 is missing from object`)

		return nil, diags
	}

	serviceS3Val, ok := serviceS3Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_s3 expected to be basetypes.ObjectValue, was: %T`, serviceS3Attribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ExchangeManagerValue{
		AdditionalProperties: additionalPropertiesVal,
		ServiceS3:            serviceS3Val,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewExchangeManagerValueNull() ExchangeManagerValue {
	return ExchangeManagerValue{
		state: attr.ValueStateNull,
	}
}

func NewExchangeManagerValueUnknown() ExchangeManagerValue {
	return ExchangeManagerValue{
		state: attr.ValueStateUnknown,
	}
}

func NewExchangeManagerValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ExchangeManagerValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ExchangeManagerValue Attribute Value",
				"While creating a ExchangeManagerValue value, a missing attribute value was detected. "+
					"A ExchangeManagerValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ExchangeManagerValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ExchangeManagerValue Attribute Type",
				"While creating a ExchangeManagerValue value, an invalid attribute value was detected. "+
					"A ExchangeManagerValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ExchangeManagerValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ExchangeManagerValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ExchangeManagerValue Attribute Value",
				"While creating a ExchangeManagerValue value, an extra attribute value was detected. "+
					"A ExchangeManagerValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ExchangeManagerValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewExchangeManagerValueUnknown(), diags
	}

	additionalPropertiesAttribute, ok := attributes["additional_properties"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`additional_properties is missing from object`)

		return NewExchangeManagerValueUnknown(), diags
	}

	additionalPropertiesVal, ok := additionalPropertiesAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`additional_properties expected to be basetypes.MapValue, was: %T`, additionalPropertiesAttribute))
	}

	serviceS3Attribute, ok := attributes["service_s3"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`service_s3 is missing from object`)

		return NewExchangeManagerValueUnknown(), diags
	}

	serviceS3Val, ok := serviceS3Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`service_s3 expected to be basetypes.ObjectValue, was: %T`, serviceS3Attribute))
	}

	if diags.HasError() {
		return NewExchangeManagerValueUnknown(), diags
	}

	return ExchangeManagerValue{
		AdditionalProperties: additionalPropertiesVal,
		ServiceS3:            serviceS3Val,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewExchangeManagerValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ExchangeManagerValue {
	object, diags := NewExchangeManagerValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewExchangeManagerValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ExchangeManagerType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewExchangeManagerValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewExchangeManagerValueUnknown(), nil
	}

	if in.IsNull() {
		return NewExchangeManagerValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewExchangeManagerValueMust(ExchangeManagerValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ExchangeManagerType) ValueType(ctx context.Context) attr.Value {
	return ExchangeManagerValue{}
}

var _ basetypes.ObjectValuable = ExchangeManagerValue{}

type ExchangeManagerValue struct {
	AdditionalProperties basetypes.MapValue    `tfsdk:"additional_properties"`
	ServiceS3            basetypes.ObjectValue `tfsdk:"service_s3"`
	state                attr.ValueState
}

func (v ExchangeManagerValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["additional_properties"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["service_s3"] = basetypes.ObjectType{
		AttrTypes: ServiceS3Value{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.AdditionalProperties.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["additional_properties"] = val

		val, err = v.ServiceS3.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["service_s3"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ExchangeManagerValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ExchangeManagerValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ExchangeManagerValue) String() string {
	return "ExchangeManagerValue"
}

func (v ExchangeManagerValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var serviceS3 basetypes.ObjectValue

	if v.ServiceS3.IsNull() {
		serviceS3 = types.ObjectNull(
			ServiceS3Value{}.AttributeTypes(ctx),
		)
	}

	if v.ServiceS3.IsUnknown() {
		serviceS3 = types.ObjectUnknown(
			ServiceS3Value{}.AttributeTypes(ctx),
		)
	}

	if !v.ServiceS3.IsNull() && !v.ServiceS3.IsUnknown() {
		serviceS3 = types.ObjectValueMust(
			ServiceS3Value{}.AttributeTypes(ctx),
			v.ServiceS3.Attributes(),
		)
	}

	var additionalPropertiesVal basetypes.MapValue
	switch {
	case v.AdditionalProperties.IsUnknown():
		additionalPropertiesVal = types.MapUnknown(types.StringType)
	case v.AdditionalProperties.IsNull():
		additionalPropertiesVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		additionalPropertiesVal, d = types.MapValue(types.StringType, v.AdditionalProperties.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"additional_properties": basetypes.MapType{
				ElemType: types.StringType,
			},
			"service_s3": basetypes.ObjectType{
				AttrTypes: ServiceS3Value{}.AttributeTypes(ctx),
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"additional_properties": basetypes.MapType{
			ElemType: types.StringType,
		},
		"service_s3": basetypes.ObjectType{
			AttrTypes: ServiceS3Value{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"additional_properties": additionalPropertiesVal,
			"service_s3":            serviceS3,
		})

	return objVal, diags
}

func (v ExchangeManagerValue) Equal(o attr.Value) bool {
	other, ok := o.(ExchangeManagerValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdditionalProperties.Equal(other.AdditionalProperties) {
		return false
	}

	if !v.ServiceS3.Equal(other.ServiceS3) {
		return false
	}

	return true
}

func (v ExchangeManagerValue) Type(ctx context.Context) attr.Type {
	return ExchangeManagerType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ExchangeManagerValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"additional_properties": basetypes.MapType{
			ElemType: types.StringType,
		},
		"service_s3": basetypes.ObjectType{
			AttrTypes: ServiceS3Value{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = ServiceS3Type{}

type ServiceS3Type struct {
	basetypes.ObjectType
}

func (t ServiceS3Type) Equal(o attr.Type) bool {
	other, ok := o.(ServiceS3Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ServiceS3Type) String() string {
	return "ServiceS3Type"
}

func (t ServiceS3Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return ServiceS3Value{
		state: attr.ValueStateKnown,
	}, diags
}

func NewServiceS3ValueNull() ServiceS3Value {
	return ServiceS3Value{
		state: attr.ValueStateNull,
	}
}

func NewServiceS3ValueUnknown() ServiceS3Value {
	return ServiceS3Value{
		state: attr.ValueStateUnknown,
	}
}

func NewServiceS3Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ServiceS3Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ServiceS3Value Attribute Value",
				"While creating a ServiceS3Value value, a missing attribute value was detected. "+
					"A ServiceS3Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ServiceS3Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ServiceS3Value Attribute Type",
				"While creating a ServiceS3Value value, an invalid attribute value was detected. "+
					"A ServiceS3Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ServiceS3Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ServiceS3Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ServiceS3Value Attribute Value",
				"While creating a ServiceS3Value value, an extra attribute value was detected. "+
					"A ServiceS3Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ServiceS3Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewServiceS3ValueUnknown(), diags
	}

	if diags.HasError() {
		return NewServiceS3ValueUnknown(), diags
	}

	return ServiceS3Value{
		state: attr.ValueStateKnown,
	}, diags
}

func NewServiceS3ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ServiceS3Value {
	object, diags := NewServiceS3Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewServiceS3ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ServiceS3Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewServiceS3ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewServiceS3ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewServiceS3ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewServiceS3ValueMust(ServiceS3Value{}.AttributeTypes(ctx), attributes), nil
}

func (t ServiceS3Type) ValueType(ctx context.Context) attr.Value {
	return ServiceS3Value{}
}

var _ basetypes.ObjectValuable = ServiceS3Value{}

type ServiceS3Value struct {
	state attr.ValueState
}

func (v ServiceS3Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ServiceS3Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ServiceS3Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ServiceS3Value) String() string {
	return "ServiceS3Value"
}

func (v ServiceS3Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v ServiceS3Value) Equal(o attr.Value) bool {
	other, ok := o.(ServiceS3Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v ServiceS3Value) Type(ctx context.Context) attr.Type {
	return ServiceS3Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ServiceS3Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}

var _ basetypes.ObjectTypable = TlsType{}

type TlsType struct {
	basetypes.ObjectType
}

func (t TlsType) Equal(o attr.Type) bool {
	other, ok := o.(TlsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TlsType) String() string {
	return "TlsType"
}

func (t TlsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	trustedCertificatesAttribute, ok := attributes["trusted_certificates"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`trusted_certificates is missing from object`)

		return nil, diags
	}

	trustedCertificatesVal, ok := trustedCertificatesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`trusted_certificates expected to be basetypes.ListValue, was: %T`, trustedCertificatesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TlsValue{
		TrustedCertificates: trustedCertificatesVal,
		state:               attr.ValueStateKnown,
	}, diags
}

func NewTlsValueNull() TlsValue {
	return TlsValue{
		state: attr.ValueStateNull,
	}
}

func NewTlsValueUnknown() TlsValue {
	return TlsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTlsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TlsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TlsValue Attribute Value",
				"While creating a TlsValue value, a missing attribute value was detected. "+
					"A TlsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TlsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TlsValue Attribute Type",
				"While creating a TlsValue value, an invalid attribute value was detected. "+
					"A TlsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TlsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TlsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TlsValue Attribute Value",
				"While creating a TlsValue value, an extra attribute value was detected. "+
					"A TlsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TlsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTlsValueUnknown(), diags
	}

	trustedCertificatesAttribute, ok := attributes["trusted_certificates"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`trusted_certificates is missing from object`)

		return NewTlsValueUnknown(), diags
	}

	trustedCertificatesVal, ok := trustedCertificatesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`trusted_certificates expected to be basetypes.ListValue, was: %T`, trustedCertificatesAttribute))
	}

	if diags.HasError() {
		return NewTlsValueUnknown(), diags
	}

	return TlsValue{
		TrustedCertificates: trustedCertificatesVal,
		state:               attr.ValueStateKnown,
	}, diags
}

func NewTlsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TlsValue {
	object, diags := NewTlsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTlsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TlsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTlsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTlsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTlsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTlsValueMust(TlsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TlsType) ValueType(ctx context.Context) attr.Value {
	return TlsValue{}
}

var _ basetypes.ObjectValuable = TlsValue{}

type TlsValue struct {
	TrustedCertificates basetypes.ListValue `tfsdk:"trusted_certificates"`
	state               attr.ValueState
}

func (v TlsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["trusted_certificates"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.TrustedCertificates.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["trusted_certificates"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TlsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TlsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TlsValue) String() string {
	return "TlsValue"
}

func (v TlsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var trustedCertificatesVal basetypes.ListValue
	switch {
	case v.TrustedCertificates.IsUnknown():
		trustedCertificatesVal = types.ListUnknown(types.StringType)
	case v.TrustedCertificates.IsNull():
		trustedCertificatesVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		trustedCertificatesVal, d = types.ListValue(types.StringType, v.TrustedCertificates.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"trusted_certificates": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"trusted_certificates": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"trusted_certificates": trustedCertificatesVal,
		})

	return objVal, diags
}

func (v TlsValue) Equal(o attr.Value) bool {
	other, ok := o.(TlsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.TrustedCertificates.Equal(other.TrustedCertificates) {
		return false
	}

	return true
}

func (v TlsValue) Type(ctx context.Context) attr.Type {
	return TlsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TlsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"trusted_certificates": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = WorkerType{}

type WorkerType struct {
	basetypes.ObjectType
}

func (t WorkerType) Equal(o attr.Type) bool {
	other, ok := o.(WorkerType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t WorkerType) String() string {
	return "WorkerType"
}

func (t WorkerType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	autoScaleAttribute, ok := attributes["auto_scale"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auto_scale is missing from object`)

		return nil, diags
	}

	autoScaleVal, ok := autoScaleAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auto_scale expected to be basetypes.ObjectValue, was: %T`, autoScaleAttribute))
	}

	fixedScaleAttribute, ok := attributes["fixed_scale"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fixed_scale is missing from object`)

		return nil, diags
	}

	fixedScaleVal, ok := fixedScaleAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fixed_scale expected to be basetypes.ObjectValue, was: %T`, fixedScaleAttribute))
	}

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return nil, diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return WorkerValue{
		AutoScale:        autoScaleVal,
		FixedScale:       fixedScaleVal,
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewWorkerValueNull() WorkerValue {
	return WorkerValue{
		state: attr.ValueStateNull,
	}
}

func NewWorkerValueUnknown() WorkerValue {
	return WorkerValue{
		state: attr.ValueStateUnknown,
	}
}

func NewWorkerValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (WorkerValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing WorkerValue Attribute Value",
				"While creating a WorkerValue value, a missing attribute value was detected. "+
					"A WorkerValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WorkerValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid WorkerValue Attribute Type",
				"While creating a WorkerValue value, an invalid attribute value was detected. "+
					"A WorkerValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WorkerValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("WorkerValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra WorkerValue Attribute Value",
				"While creating a WorkerValue value, an extra attribute value was detected. "+
					"A WorkerValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra WorkerValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewWorkerValueUnknown(), diags
	}

	autoScaleAttribute, ok := attributes["auto_scale"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auto_scale is missing from object`)

		return NewWorkerValueUnknown(), diags
	}

	autoScaleVal, ok := autoScaleAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auto_scale expected to be basetypes.ObjectValue, was: %T`, autoScaleAttribute))
	}

	fixedScaleAttribute, ok := attributes["fixed_scale"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fixed_scale is missing from object`)

		return NewWorkerValueUnknown(), diags
	}

	fixedScaleVal, ok := fixedScaleAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fixed_scale expected to be basetypes.ObjectValue, was: %T`, fixedScaleAttribute))
	}

	resourcePresetIdAttribute, ok := attributes["resource_preset_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resource_preset_id is missing from object`)

		return NewWorkerValueUnknown(), diags
	}

	resourcePresetIdVal, ok := resourcePresetIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resource_preset_id expected to be basetypes.StringValue, was: %T`, resourcePresetIdAttribute))
	}

	if diags.HasError() {
		return NewWorkerValueUnknown(), diags
	}

	return WorkerValue{
		AutoScale:        autoScaleVal,
		FixedScale:       fixedScaleVal,
		ResourcePresetId: resourcePresetIdVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewWorkerValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) WorkerValue {
	object, diags := NewWorkerValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewWorkerValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t WorkerType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewWorkerValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewWorkerValueUnknown(), nil
	}

	if in.IsNull() {
		return NewWorkerValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewWorkerValueMust(WorkerValue{}.AttributeTypes(ctx), attributes), nil
}

func (t WorkerType) ValueType(ctx context.Context) attr.Value {
	return WorkerValue{}
}

var _ basetypes.ObjectValuable = WorkerValue{}

type WorkerValue struct {
	AutoScale        basetypes.ObjectValue `tfsdk:"auto_scale"`
	FixedScale       basetypes.ObjectValue `tfsdk:"fixed_scale"`
	ResourcePresetId basetypes.StringValue `tfsdk:"resource_preset_id"`
	state            attr.ValueState
}

func (v WorkerValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["auto_scale"] = basetypes.ObjectType{
		AttrTypes: AutoScaleValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["fixed_scale"] = basetypes.ObjectType{
		AttrTypes: FixedScaleValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["resource_preset_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.AutoScale.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auto_scale"] = val

		val, err = v.FixedScale.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fixed_scale"] = val

		val, err = v.ResourcePresetId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resource_preset_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v WorkerValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v WorkerValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v WorkerValue) String() string {
	return "WorkerValue"
}

func (v WorkerValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var autoScale basetypes.ObjectValue

	if v.AutoScale.IsNull() {
		autoScale = types.ObjectNull(
			AutoScaleValue{}.AttributeTypes(ctx),
		)
	}

	if v.AutoScale.IsUnknown() {
		autoScale = types.ObjectUnknown(
			AutoScaleValue{}.AttributeTypes(ctx),
		)
	}

	if !v.AutoScale.IsNull() && !v.AutoScale.IsUnknown() {
		autoScale = types.ObjectValueMust(
			AutoScaleValue{}.AttributeTypes(ctx),
			v.AutoScale.Attributes(),
		)
	}

	var fixedScale basetypes.ObjectValue

	if v.FixedScale.IsNull() {
		fixedScale = types.ObjectNull(
			FixedScaleValue{}.AttributeTypes(ctx),
		)
	}

	if v.FixedScale.IsUnknown() {
		fixedScale = types.ObjectUnknown(
			FixedScaleValue{}.AttributeTypes(ctx),
		)
	}

	if !v.FixedScale.IsNull() && !v.FixedScale.IsUnknown() {
		fixedScale = types.ObjectValueMust(
			FixedScaleValue{}.AttributeTypes(ctx),
			v.FixedScale.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"auto_scale": basetypes.ObjectType{
			AttrTypes: AutoScaleValue{}.AttributeTypes(ctx),
		},
		"fixed_scale": basetypes.ObjectType{
			AttrTypes: FixedScaleValue{}.AttributeTypes(ctx),
		},
		"resource_preset_id": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"auto_scale":         autoScale,
			"fixed_scale":        fixedScale,
			"resource_preset_id": v.ResourcePresetId,
		})

	return objVal, diags
}

func (v WorkerValue) Equal(o attr.Value) bool {
	other, ok := o.(WorkerValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AutoScale.Equal(other.AutoScale) {
		return false
	}

	if !v.FixedScale.Equal(other.FixedScale) {
		return false
	}

	if !v.ResourcePresetId.Equal(other.ResourcePresetId) {
		return false
	}

	return true
}

func (v WorkerValue) Type(ctx context.Context) attr.Type {
	return WorkerType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v WorkerValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"auto_scale": basetypes.ObjectType{
			AttrTypes: AutoScaleValue{}.AttributeTypes(ctx),
		},
		"fixed_scale": basetypes.ObjectType{
			AttrTypes: FixedScaleValue{}.AttributeTypes(ctx),
		},
		"resource_preset_id": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AutoScaleType{}

type AutoScaleType struct {
	basetypes.ObjectType
}

func (t AutoScaleType) Equal(o attr.Type) bool {
	other, ok := o.(AutoScaleType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AutoScaleType) String() string {
	return "AutoScaleType"
}

func (t AutoScaleType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	maxCountAttribute, ok := attributes["max_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_count is missing from object`)

		return nil, diags
	}

	maxCountVal, ok := maxCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_count expected to be basetypes.Int64Value, was: %T`, maxCountAttribute))
	}

	minCountAttribute, ok := attributes["min_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_count is missing from object`)

		return nil, diags
	}

	minCountVal, ok := minCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_count expected to be basetypes.Int64Value, was: %T`, minCountAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AutoScaleValue{
		MaxCount: maxCountVal,
		MinCount: minCountVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewAutoScaleValueNull() AutoScaleValue {
	return AutoScaleValue{
		state: attr.ValueStateNull,
	}
}

func NewAutoScaleValueUnknown() AutoScaleValue {
	return AutoScaleValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAutoScaleValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AutoScaleValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AutoScaleValue Attribute Value",
				"While creating a AutoScaleValue value, a missing attribute value was detected. "+
					"A AutoScaleValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AutoScaleValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AutoScaleValue Attribute Type",
				"While creating a AutoScaleValue value, an invalid attribute value was detected. "+
					"A AutoScaleValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AutoScaleValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AutoScaleValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AutoScaleValue Attribute Value",
				"While creating a AutoScaleValue value, an extra attribute value was detected. "+
					"A AutoScaleValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AutoScaleValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAutoScaleValueUnknown(), diags
	}

	maxCountAttribute, ok := attributes["max_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_count is missing from object`)

		return NewAutoScaleValueUnknown(), diags
	}

	maxCountVal, ok := maxCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_count expected to be basetypes.Int64Value, was: %T`, maxCountAttribute))
	}

	minCountAttribute, ok := attributes["min_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`min_count is missing from object`)

		return NewAutoScaleValueUnknown(), diags
	}

	minCountVal, ok := minCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`min_count expected to be basetypes.Int64Value, was: %T`, minCountAttribute))
	}

	if diags.HasError() {
		return NewAutoScaleValueUnknown(), diags
	}

	return AutoScaleValue{
		MaxCount: maxCountVal,
		MinCount: minCountVal,
		state:    attr.ValueStateKnown,
	}, diags
}

func NewAutoScaleValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AutoScaleValue {
	object, diags := NewAutoScaleValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAutoScaleValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AutoScaleType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAutoScaleValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAutoScaleValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAutoScaleValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAutoScaleValueMust(AutoScaleValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AutoScaleType) ValueType(ctx context.Context) attr.Value {
	return AutoScaleValue{}
}

var _ basetypes.ObjectValuable = AutoScaleValue{}

type AutoScaleValue struct {
	MaxCount basetypes.Int64Value `tfsdk:"max_count"`
	MinCount basetypes.Int64Value `tfsdk:"min_count"`
	state    attr.ValueState
}

func (v AutoScaleValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["max_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["min_count"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.MaxCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_count"] = val

		val, err = v.MinCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["min_count"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AutoScaleValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AutoScaleValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AutoScaleValue) String() string {
	return "AutoScaleValue"
}

func (v AutoScaleValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"max_count": basetypes.Int64Type{},
		"min_count": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"max_count": v.MaxCount,
			"min_count": v.MinCount,
		})

	return objVal, diags
}

func (v AutoScaleValue) Equal(o attr.Value) bool {
	other, ok := o.(AutoScaleValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.MaxCount.Equal(other.MaxCount) {
		return false
	}

	if !v.MinCount.Equal(other.MinCount) {
		return false
	}

	return true
}

func (v AutoScaleValue) Type(ctx context.Context) attr.Type {
	return AutoScaleType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AutoScaleValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"max_count": basetypes.Int64Type{},
		"min_count": basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = FixedScaleType{}

type FixedScaleType struct {
	basetypes.ObjectType
}

func (t FixedScaleType) Equal(o attr.Type) bool {
	other, ok := o.(FixedScaleType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t FixedScaleType) String() string {
	return "FixedScaleType"
}

func (t FixedScaleType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return nil, diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return FixedScaleValue{
		Count: countVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewFixedScaleValueNull() FixedScaleValue {
	return FixedScaleValue{
		state: attr.ValueStateNull,
	}
}

func NewFixedScaleValueUnknown() FixedScaleValue {
	return FixedScaleValue{
		state: attr.ValueStateUnknown,
	}
}

func NewFixedScaleValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (FixedScaleValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing FixedScaleValue Attribute Value",
				"While creating a FixedScaleValue value, a missing attribute value was detected. "+
					"A FixedScaleValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FixedScaleValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid FixedScaleValue Attribute Type",
				"While creating a FixedScaleValue value, an invalid attribute value was detected. "+
					"A FixedScaleValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FixedScaleValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("FixedScaleValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra FixedScaleValue Attribute Value",
				"While creating a FixedScaleValue value, an extra attribute value was detected. "+
					"A FixedScaleValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra FixedScaleValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewFixedScaleValueUnknown(), diags
	}

	countAttribute, ok := attributes["count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`count is missing from object`)

		return NewFixedScaleValueUnknown(), diags
	}

	countVal, ok := countAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`count expected to be basetypes.Int64Value, was: %T`, countAttribute))
	}

	if diags.HasError() {
		return NewFixedScaleValueUnknown(), diags
	}

	return FixedScaleValue{
		Count: countVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewFixedScaleValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) FixedScaleValue {
	object, diags := NewFixedScaleValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewFixedScaleValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t FixedScaleType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewFixedScaleValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewFixedScaleValueUnknown(), nil
	}

	if in.IsNull() {
		return NewFixedScaleValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewFixedScaleValueMust(FixedScaleValue{}.AttributeTypes(ctx), attributes), nil
}

func (t FixedScaleType) ValueType(ctx context.Context) attr.Value {
	return FixedScaleValue{}
}

var _ basetypes.ObjectValuable = FixedScaleValue{}

type FixedScaleValue struct {
	Count basetypes.Int64Value `tfsdk:"count"`
	state attr.ValueState
}

func (v FixedScaleValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["count"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Count.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["count"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v FixedScaleValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v FixedScaleValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v FixedScaleValue) String() string {
	return "FixedScaleValue"
}

func (v FixedScaleValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"count": basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"count": v.Count,
		})

	return objVal, diags
}

func (v FixedScaleValue) Equal(o attr.Value) bool {
	other, ok := o.(FixedScaleValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Count.Equal(other.Count) {
		return false
	}

	return true
}

func (v FixedScaleValue) Type(ctx context.Context) attr.Type {
	return FixedScaleType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v FixedScaleValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"count": basetypes.Int64Type{},
	}
}

var _ basetypes.ObjectTypable = TimeoutsType{}

type TimeoutsType struct {
	basetypes.ObjectType
}

func (t TimeoutsType) Equal(o attr.Type) bool {
	other, ok := o.(TimeoutsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TimeoutsType) String() string {
	return "TimeoutsType"
}

func (t TimeoutsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return TimeoutsValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewTimeoutsValueNull() TimeoutsValue {
	return TimeoutsValue{
		state: attr.ValueStateNull,
	}
}

func NewTimeoutsValueUnknown() TimeoutsValue {
	return TimeoutsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTimeoutsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TimeoutsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TimeoutsValue Attribute Value",
				"While creating a TimeoutsValue value, a missing attribute value was detected. "+
					"A TimeoutsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TimeoutsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TimeoutsValue Attribute Type",
				"While creating a TimeoutsValue value, an invalid attribute value was detected. "+
					"A TimeoutsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TimeoutsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TimeoutsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TimeoutsValue Attribute Value",
				"While creating a TimeoutsValue value, an extra attribute value was detected. "+
					"A TimeoutsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TimeoutsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTimeoutsValueUnknown(), diags
	}

	if diags.HasError() {
		return NewTimeoutsValueUnknown(), diags
	}

	return TimeoutsValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewTimeoutsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TimeoutsValue {
	object, diags := NewTimeoutsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTimeoutsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TimeoutsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTimeoutsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTimeoutsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTimeoutsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTimeoutsValueMust(TimeoutsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TimeoutsType) ValueType(ctx context.Context) attr.Value {
	return TimeoutsValue{}
}

var _ basetypes.ObjectValuable = TimeoutsValue{}

type TimeoutsValue struct {
	state attr.ValueState
}

func (v TimeoutsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TimeoutsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TimeoutsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TimeoutsValue) String() string {
	return "TimeoutsValue"
}

func (v TimeoutsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v TimeoutsValue) Equal(o attr.Value) bool {
	other, ok := o.(TimeoutsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v TimeoutsValue) Type(ctx context.Context) attr.Type {
	return TimeoutsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TimeoutsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}
