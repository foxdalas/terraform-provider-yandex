// Code generated by tfgen. DO NOT EDIT.

package yandex_organizationmanager_group

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
)

func YandexOrganizationmanagerGroupResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "A Group resource.\n For more information, see [Groups](/docs/organization/operations/manage-groups).",
		MarkdownDescription: "A Group resource.\n For more information, see [Groups](/docs/organization/operations/manage-groups).",
		Version:             1,
		Attributes: map[string]schema.Attribute{

			"created_at": schema.StringAttribute{
				MarkdownDescription: "Creation timestamp.",
				Description: "Creation timestamp." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.Group.created_at
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/group.proto\n",
				Computed: true,
			},

			"description": schema.StringAttribute{
				MarkdownDescription: "Description of the group.",
				Description: "Description of the group." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.CreateGroupRequest.description
					// -> yandex.cloud.organizationmanager.v1.Group.description
					// -> yandex.cloud.organizationmanager.v1.UpdateGroupRequest.description
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 256),
				},
			},

			"group_id": schema.StringAttribute{
				MarkdownDescription: "ID of the Group resource to return.\n To get the group ID, use a [GroupService.List] request.",
				Description: "ID of the Group resource to return.\n To get the group ID, use a [GroupService.List] request." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.DeleteGroupRequest.group_id
					// -> yandex.cloud.organizationmanager.v1.GetGroupRequest.group_id
					// -> yandex.cloud.organizationmanager.v1.Group.id
					// -> yandex.cloud.organizationmanager.v1.UpdateGroupRequest.group_id
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/group_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the Group resource to return.\n To get the group ID, use a [GroupService.List] request.",
				Description: "ID of the Group resource to return.\n To get the group ID, use a [GroupService.List] request." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.DeleteGroupRequest.group_id
					// -> yandex.cloud.organizationmanager.v1.GetGroupRequest.group_id
					// -> yandex.cloud.organizationmanager.v1.Group.id
					// -> yandex.cloud.organizationmanager.v1.UpdateGroupRequest.group_id
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/group_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the group.",
				Description: "Name of the group." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.CreateGroupRequest.name
					// -> yandex.cloud.organizationmanager.v1.Group.name
					// -> yandex.cloud.organizationmanager.v1.UpdateGroupRequest.name
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/group.proto\n",
				Required: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^(|[a-zA-Z]([-a-zA-Z0-9._-]{0,61}[a-zA-Z0-9])?)$"), "error validating regexp"),
				},
			},

			"organization_id": schema.StringAttribute{
				MarkdownDescription: "ID of the organization that the group belongs to.",
				Description: "ID of the organization that the group belongs to." +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.CreateGroupRequest.organization_id
					// -> yandex.cloud.organizationmanager.v1.Group.organization_id
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/group.proto\n",
				Required: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},
		},

		Blocks: map[string]schema.Block{
			"timeouts": timeouts.BlockAll(ctx),
		},
	}
}

func (r *yandexOrganizationmanagerGroupResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
	schema0 := YandexOrganizationmanagerGroupResourceSchema(ctx)
	return map[int64]resource.StateUpgrader{
		0: resource.StateUpgrader{
			PriorSchema:   &schema0,
			StateUpgrader: moveStateFromV0,
		},
	}
}
