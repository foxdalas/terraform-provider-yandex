// Code generated by tfgen. DO NOT EDIT.

package yandex_connectionmanager_connection

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	connectionmanager "github.com/yandex-cloud/go-genproto/yandex/cloud/connectionmanager/v1"
	connectionmanagerv1sdk "github.com/yandex-cloud/go-sdk/services/connectionmanager/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/validate"
	provider_config "github.com/yandex-cloud/terraform-provider-yandex/yandex-framework/provider/config"
	"google.golang.org/genproto/protobuf/field_mask"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
)

var _ resource.ResourceWithConfigure = (*yandexConnectionmanagerConnectionResource)(nil)
var _ resource.ResourceWithImportState = (*yandexConnectionmanagerConnectionResource)(nil)

type yandexConnectionmanagerConnectionResource struct {
	providerConfig *provider_config.Config
}

func NewResource() resource.Resource {
	return &yandexConnectionmanagerConnectionResource{}
}

func (r *yandexConnectionmanagerConnectionResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "yandex_connectionmanager_connection"
}

func (r *yandexConnectionmanagerConnectionResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerConfig, ok := req.ProviderData.(*provider_config.Config)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *provider_config.Config, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}

	r.providerConfig = providerConfig
}

func (r *yandexConnectionmanagerConnectionResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = YandexConnectionmanagerConnectionResourceSchema(ctx)
}

func (r *yandexConnectionmanagerConnectionResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("connection_id"), req, resp)
}

func (r *yandexConnectionmanagerConnectionResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state yandexConnectionmanagerConnectionModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	readTimeout, timeoutInitError := state.Timeouts.Read(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, readTimeout)
	defer cancel()

	reqApi := &connectionmanager.GetConnectionRequest{}
	id := state.ID.ValueString()
	if !state.ConnectionId.IsUnknown() && !state.ConnectionId.IsNull() {
		id = state.ConnectionId.ValueString()
	}
	reqApi.SetConnectionId(id)
	tflog.Debug(ctx, fmt.Sprintf("Read connection request: %s", validate.ProtoDump(reqApi)))

	md := new(metadata.MD)
	res, err := connectionmanagerv1sdk.NewConnectionClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read connection x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read connection x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"connection not found",
			)
			resp.State.RemoveResource(ctx)
			return
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get connection:"+err.Error(),
			)
		}
	}
	tflog.Debug(ctx, fmt.Sprintf("Read connection response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	newState := flattenYandexConnectionmanagerConnection(ctx, res, state, state.Timeouts, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *yandexConnectionmanagerConnectionResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan yandexConnectionmanagerConnectionModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	createTimeout, timeoutInitError := plan.Timeouts.Create(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, createTimeout)
	defer cancel()

	createReq := &connectionmanager.CreateConnectionRequest{}
	createReq.SetFolderId(converter.GetFolderID(plan.FolderId.ValueString(), r.providerConfig, &diags))
	createReq.SetName(plan.Name.ValueString())
	createReq.SetDescription(plan.Description.ValueString())
	createReq.SetLabels(expandYandexConnectionmanagerConnectionLabels(ctx, plan.Labels, &diags))
	createReq.SetParams(expandYandexConnectionmanagerConnectionParams(ctx, plan.Params, &diags))
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("Create connection request: %s", validate.ProtoDump(createReq)))

	md := new(metadata.MD)
	op, err := connectionmanagerv1sdk.NewConnectionClient(r.providerConfig.SDKv2).Create(ctx, createReq, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("[DEBUG] Create connection x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Create connection x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		resp.Diagnostics.AddError(
			"Failed to Create resource",
			"Error while requesting API to create connection:"+err.Error(),
		)
		return
	}
	createRes, err := op.Wait(ctx)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Create Resource",
			fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
				"Please retry the operation or report this issue to the provider developers.\n\n"+
				"Error: %s", err),
		)
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("Create connection response: %s", validate.ProtoDump(createRes)))

	plan.ConnectionId = types.StringValue(createRes.Id)

	reqApi := &connectionmanager.GetConnectionRequest{}
	reqApi.SetConnectionId(plan.ConnectionId.ValueString())
	tflog.Debug(ctx, fmt.Sprintf("Read connection request: %s", validate.ProtoDump(reqApi)))

	md = new(metadata.MD)
	res, err := connectionmanagerv1sdk.NewConnectionClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read connection x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read connection x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"connection not found",
			)
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get connection:"+err.Error(),
			)
		}
	}
	tflog.Debug(ctx, fmt.Sprintf("Read connection response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	newState := flattenYandexConnectionmanagerConnection(ctx, res, plan, plan.Timeouts, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *yandexConnectionmanagerConnectionResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state yandexConnectionmanagerConnectionModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	deleteTimeout, timeoutInitError := state.Timeouts.Delete(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, deleteTimeout)
	defer cancel()

	reqApi := &connectionmanager.DeleteConnectionRequest{}
	id := state.ID.ValueString()
	if !state.ConnectionId.IsUnknown() && !state.ConnectionId.IsNull() {
		id = state.ConnectionId.ValueString()
	}
	reqApi.SetConnectionId(id)
	tflog.Debug(ctx, fmt.Sprintf("Delete connection request: %s", validate.ProtoDump(reqApi)))

	md := new(metadata.MD)

	op, err := connectionmanagerv1sdk.NewConnectionClient(r.providerConfig.SDKv2).Delete(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Delete connection x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Delete connection x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		resp.Diagnostics.AddError(
			"Failed to Delete resource",
			"Error while requesting API to delete connection:"+err.Error(),
		)
		return
	}
	deleteRes, err := op.Wait(ctx)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Delete Resource",
			fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
				"Please retry the operation or report this issue to the provider developers.\n\n"+
				"Error: %s", err),
		)
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("[DEBUG] Delete connection response: %s", validate.ProtoDump(deleteRes)))
}

func (r *yandexConnectionmanagerConnectionResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state yandexConnectionmanagerConnectionModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	updateTimeout, timeoutInitError := plan.Timeouts.Update(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, updateTimeout)
	defer cancel()
	var updatePaths []string

	if !plan.ConnectionId.Equal(state.ConnectionId) {
		updatePaths = append(updatePaths, "connection_id")
	}
	if !plan.Description.Equal(state.Description) {
		updatePaths = append(updatePaths, "description")
	}
	if plan.Labels.IsNull() {
		plan.Labels = types.MapNull(types.StringType)
	}
	if state.Labels.IsNull() {
		state.Labels = types.MapNull(types.StringType)
	}
	if !plan.Labels.Equal(state.Labels) {
		updatePaths = append(updatePaths, "labels")
	}
	if !plan.Name.Equal(state.Name) {
		updatePaths = append(updatePaths, "name")
	}

	var yandexConnectionmanagerConnectionParamsState, yandexConnectionmanagerConnectionParamsPlan yandexConnectionmanagerConnectionParamsModel
	resp.Diagnostics.Append(plan.Params.As(ctx, &yandexConnectionmanagerConnectionParamsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(state.Params.As(ctx, &yandexConnectionmanagerConnectionParamsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsClickhouseState, yandexConnectionmanagerConnectionParamsClickhousePlan yandexConnectionmanagerConnectionParamsClickhouseModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPlan.Clickhouse.As(ctx, &yandexConnectionmanagerConnectionParamsClickhousePlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsState.Clickhouse.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsClickhouseAuthState, yandexConnectionmanagerConnectionParamsClickhouseAuthPlan yandexConnectionmanagerConnectionParamsClickhouseAuthModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhousePlan.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuthPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhouseState.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuthState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordState, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPlan yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhouseAuthPlan.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhouseAuthState.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPlan yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPlan.Password.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordState.Password.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPlan.LockboxSecretKey.Equal(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState.LockboxSecretKey) {
		updatePaths = append(updatePaths, "params.clickhouse.auth.user_password.password.lockbox_secret_key")
	}

	var yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPlan.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsPlan.Cookie.Equal(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie) {
		updatePaths = append(updatePaths, "params.clickhouse.auth.user_password.password.password_generation_options.cookie")
	}

	var yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsPlan.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.ExcludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation) {
		updatePaths = append(updatePaths, "params.clickhouse.auth.user_password.password.password_generation_options.lockbox_password_generation_options.excluded_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeDigits.Equal(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits) {
		updatePaths = append(updatePaths, "params.clickhouse.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_digits")
	}
	if !yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeLowercase.Equal(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase) {
		updatePaths = append(updatePaths, "params.clickhouse.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_lowercase")
	}
	if !yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludePunctuation.Equal(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation) {
		updatePaths = append(updatePaths, "params.clickhouse.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeUppercase.Equal(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase) {
		updatePaths = append(updatePaths, "params.clickhouse.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_uppercase")
	}
	if !yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation) {
		updatePaths = append(updatePaths, "params.clickhouse.auth.user_password.password.password_generation_options.lockbox_password_generation_options.included_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.Length.Equal(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length) {
		updatePaths = append(updatePaths, "params.clickhouse.auth.user_password.password.password_generation_options.lockbox_password_generation_options.length")
	}
	if !yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPlan.Raw.Equal(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState.Raw) {
		updatePaths = append(updatePaths, "params.clickhouse.auth.user_password.password.raw")
	}
	if !yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPlan.User.Equal(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordState.User) {
		updatePaths = append(updatePaths, "params.clickhouse.auth.user_password.user")
	}

	var yandexConnectionmanagerConnectionParamsClickhouseClusterState, yandexConnectionmanagerConnectionParamsClickhouseClusterPlan yandexConnectionmanagerConnectionParamsClickhouseClusterModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhousePlan.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseClusterPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhouseState.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseClusterState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if yandexConnectionmanagerConnectionParamsClickhouseClusterPlan.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsClickhouseClusterPlan.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModelType)
	}
	if yandexConnectionmanagerConnectionParamsClickhouseClusterState.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsClickhouseClusterState.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModelType)
	}
	if !yandexConnectionmanagerConnectionParamsClickhouseClusterPlan.Hosts.Equal(yandexConnectionmanagerConnectionParamsClickhouseClusterState.Hosts) {
		updatePaths = append(updatePaths, "params.clickhouse.cluster.hosts")
	}
	if yandexConnectionmanagerConnectionParamsClickhouseClusterPlan.ShardGroups.IsNull() {
		yandexConnectionmanagerConnectionParamsClickhouseClusterPlan.ShardGroups = types.ListNull(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModelType)
	}
	if yandexConnectionmanagerConnectionParamsClickhouseClusterState.ShardGroups.IsNull() {
		yandexConnectionmanagerConnectionParamsClickhouseClusterState.ShardGroups = types.ListNull(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModelType)
	}
	if !yandexConnectionmanagerConnectionParamsClickhouseClusterPlan.ShardGroups.Equal(yandexConnectionmanagerConnectionParamsClickhouseClusterState.ShardGroups) {
		updatePaths = append(updatePaths, "params.clickhouse.cluster.shard_groups")
	}

	var yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsPlan yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhouseClusterPlan.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhouseClusterState.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsState, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsPlan yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsPlan.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsPlan.CaCertificate.Equal(yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsState.CaCertificate) {
		updatePaths = append(updatePaths, "params.clickhouse.cluster.tls_params.tls.ca_certificate")
	}
	if yandexConnectionmanagerConnectionParamsClickhousePlan.Databases.IsNull() {
		yandexConnectionmanagerConnectionParamsClickhousePlan.Databases = types.ListNull(types.StringType)
	}
	if yandexConnectionmanagerConnectionParamsClickhouseState.Databases.IsNull() {
		yandexConnectionmanagerConnectionParamsClickhouseState.Databases = types.ListNull(types.StringType)
	}
	if !yandexConnectionmanagerConnectionParamsClickhousePlan.Databases.Equal(yandexConnectionmanagerConnectionParamsClickhouseState.Databases) {
		updatePaths = append(updatePaths, "params.clickhouse.databases")
	}
	if !yandexConnectionmanagerConnectionParamsClickhousePlan.ManagedClusterId.Equal(yandexConnectionmanagerConnectionParamsClickhouseState.ManagedClusterId) {
		updatePaths = append(updatePaths, "params.clickhouse.managed_cluster_id")
	}

	var yandexConnectionmanagerConnectionParamsGreenplumState, yandexConnectionmanagerConnectionParamsGreenplumPlan yandexConnectionmanagerConnectionParamsGreenplumModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPlan.Greenplum.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsState.Greenplum.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsGreenplumAuthState, yandexConnectionmanagerConnectionParamsGreenplumAuthPlan yandexConnectionmanagerConnectionParamsGreenplumAuthModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumPlan.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuthPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumState.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuthState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordState, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPlan yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumAuthPlan.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumAuthState.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPlan yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPlan.Password.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordState.Password.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPlan.LockboxSecretKey.Equal(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState.LockboxSecretKey) {
		updatePaths = append(updatePaths, "params.greenplum.auth.user_password.password.lockbox_secret_key")
	}

	var yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPlan.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsPlan.Cookie.Equal(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie) {
		updatePaths = append(updatePaths, "params.greenplum.auth.user_password.password.password_generation_options.cookie")
	}

	var yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsPlan.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.ExcludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation) {
		updatePaths = append(updatePaths, "params.greenplum.auth.user_password.password.password_generation_options.lockbox_password_generation_options.excluded_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeDigits.Equal(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits) {
		updatePaths = append(updatePaths, "params.greenplum.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_digits")
	}
	if !yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeLowercase.Equal(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase) {
		updatePaths = append(updatePaths, "params.greenplum.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_lowercase")
	}
	if !yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludePunctuation.Equal(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation) {
		updatePaths = append(updatePaths, "params.greenplum.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeUppercase.Equal(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase) {
		updatePaths = append(updatePaths, "params.greenplum.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_uppercase")
	}
	if !yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation) {
		updatePaths = append(updatePaths, "params.greenplum.auth.user_password.password.password_generation_options.lockbox_password_generation_options.included_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.Length.Equal(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length) {
		updatePaths = append(updatePaths, "params.greenplum.auth.user_password.password.password_generation_options.lockbox_password_generation_options.length")
	}
	if !yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPlan.Raw.Equal(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState.Raw) {
		updatePaths = append(updatePaths, "params.greenplum.auth.user_password.password.raw")
	}
	if !yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPlan.User.Equal(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordState.User) {
		updatePaths = append(updatePaths, "params.greenplum.auth.user_password.user")
	}

	var yandexConnectionmanagerConnectionParamsGreenplumClusterState, yandexConnectionmanagerConnectionParamsGreenplumClusterPlan yandexConnectionmanagerConnectionParamsGreenplumClusterModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumPlan.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumClusterPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumState.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumClusterState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if yandexConnectionmanagerConnectionParamsGreenplumClusterPlan.CoordinatorHosts.IsNull() {
		yandexConnectionmanagerConnectionParamsGreenplumClusterPlan.CoordinatorHosts = types.ListNull(yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModelType)
	}
	if yandexConnectionmanagerConnectionParamsGreenplumClusterState.CoordinatorHosts.IsNull() {
		yandexConnectionmanagerConnectionParamsGreenplumClusterState.CoordinatorHosts = types.ListNull(yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModelType)
	}
	if !yandexConnectionmanagerConnectionParamsGreenplumClusterPlan.CoordinatorHosts.Equal(yandexConnectionmanagerConnectionParamsGreenplumClusterState.CoordinatorHosts) {
		updatePaths = append(updatePaths, "params.greenplum.cluster.coordinator_hosts")
	}

	var yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsPlan yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumClusterPlan.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumClusterState.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsState, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsPlan yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsPlan.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsPlan.CaCertificate.Equal(yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsState.CaCertificate) {
		updatePaths = append(updatePaths, "params.greenplum.cluster.tls_params.tls.ca_certificate")
	}
	if yandexConnectionmanagerConnectionParamsGreenplumPlan.Databases.IsNull() {
		yandexConnectionmanagerConnectionParamsGreenplumPlan.Databases = types.ListNull(types.StringType)
	}
	if yandexConnectionmanagerConnectionParamsGreenplumState.Databases.IsNull() {
		yandexConnectionmanagerConnectionParamsGreenplumState.Databases = types.ListNull(types.StringType)
	}
	if !yandexConnectionmanagerConnectionParamsGreenplumPlan.Databases.Equal(yandexConnectionmanagerConnectionParamsGreenplumState.Databases) {
		updatePaths = append(updatePaths, "params.greenplum.databases")
	}
	if !yandexConnectionmanagerConnectionParamsGreenplumPlan.ManagedClusterId.Equal(yandexConnectionmanagerConnectionParamsGreenplumState.ManagedClusterId) {
		updatePaths = append(updatePaths, "params.greenplum.managed_cluster_id")
	}

	var yandexConnectionmanagerConnectionParamsKafkaState, yandexConnectionmanagerConnectionParamsKafkaPlan yandexConnectionmanagerConnectionParamsKafkaModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPlan.Kafka.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsState.Kafka.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsKafkaAuthState, yandexConnectionmanagerConnectionParamsKafkaAuthPlan yandexConnectionmanagerConnectionParamsKafkaAuthModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaPlan.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaState.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsKafkaAuthSaslState, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPlan yandexConnectionmanagerConnectionParamsKafkaAuthSaslModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaAuthPlan.Sasl.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthSaslPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaAuthState.Sasl.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthSaslState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPlan yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPlan.Password.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaAuthSaslState.Password.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPlan.LockboxSecretKey.Equal(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState.LockboxSecretKey) {
		updatePaths = append(updatePaths, "params.kafka.auth.sasl.password.lockbox_secret_key")
	}

	var yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPlan.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsPlan.Cookie.Equal(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsState.Cookie) {
		updatePaths = append(updatePaths, "params.kafka.auth.sasl.password.password_generation_options.cookie")
	}

	var yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsPlan.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.ExcludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation) {
		updatePaths = append(updatePaths, "params.kafka.auth.sasl.password.password_generation_options.lockbox_password_generation_options.excluded_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeDigits.Equal(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits) {
		updatePaths = append(updatePaths, "params.kafka.auth.sasl.password.password_generation_options.lockbox_password_generation_options.include_digits")
	}
	if !yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeLowercase.Equal(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase) {
		updatePaths = append(updatePaths, "params.kafka.auth.sasl.password.password_generation_options.lockbox_password_generation_options.include_lowercase")
	}
	if !yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludePunctuation.Equal(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation) {
		updatePaths = append(updatePaths, "params.kafka.auth.sasl.password.password_generation_options.lockbox_password_generation_options.include_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeUppercase.Equal(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase) {
		updatePaths = append(updatePaths, "params.kafka.auth.sasl.password.password_generation_options.lockbox_password_generation_options.include_uppercase")
	}
	if !yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation) {
		updatePaths = append(updatePaths, "params.kafka.auth.sasl.password.password_generation_options.lockbox_password_generation_options.included_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.Length.Equal(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length) {
		updatePaths = append(updatePaths, "params.kafka.auth.sasl.password.password_generation_options.lockbox_password_generation_options.length")
	}
	if !yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPlan.Raw.Equal(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState.Raw) {
		updatePaths = append(updatePaths, "params.kafka.auth.sasl.password.raw")
	}
	if yandexConnectionmanagerConnectionParamsKafkaAuthSaslPlan.SupportedMechanisms.IsNull() {
		yandexConnectionmanagerConnectionParamsKafkaAuthSaslPlan.SupportedMechanisms = types.ListNull(types.StringType)
	}
	if yandexConnectionmanagerConnectionParamsKafkaAuthSaslState.SupportedMechanisms.IsNull() {
		yandexConnectionmanagerConnectionParamsKafkaAuthSaslState.SupportedMechanisms = types.ListNull(types.StringType)
	}
	if !yandexConnectionmanagerConnectionParamsKafkaAuthSaslPlan.SupportedMechanisms.Equal(yandexConnectionmanagerConnectionParamsKafkaAuthSaslState.SupportedMechanisms) {
		updatePaths = append(updatePaths, "params.kafka.auth.sasl.supported_mechanisms")
	}
	if !yandexConnectionmanagerConnectionParamsKafkaAuthSaslPlan.User.Equal(yandexConnectionmanagerConnectionParamsKafkaAuthSaslState.User) {
		updatePaths = append(updatePaths, "params.kafka.auth.sasl.user")
	}

	var yandexConnectionmanagerConnectionParamsKafkaClusterState, yandexConnectionmanagerConnectionParamsKafkaClusterPlan yandexConnectionmanagerConnectionParamsKafkaClusterModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaPlan.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaClusterPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaState.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaClusterState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if yandexConnectionmanagerConnectionParamsKafkaClusterPlan.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsKafkaClusterPlan.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsKafkaClusterHostStructModelType)
	}
	if yandexConnectionmanagerConnectionParamsKafkaClusterState.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsKafkaClusterState.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsKafkaClusterHostStructModelType)
	}
	if !yandexConnectionmanagerConnectionParamsKafkaClusterPlan.Hosts.Equal(yandexConnectionmanagerConnectionParamsKafkaClusterState.Hosts) {
		updatePaths = append(updatePaths, "params.kafka.cluster.hosts")
	}

	var yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsPlan yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaClusterPlan.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaClusterState.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsState, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsPlan yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsPlan.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsPlan.CaCertificate.Equal(yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsState.CaCertificate) {
		updatePaths = append(updatePaths, "params.kafka.cluster.tls_params.tls.ca_certificate")
	}
	if !yandexConnectionmanagerConnectionParamsKafkaPlan.ManagedClusterId.Equal(yandexConnectionmanagerConnectionParamsKafkaState.ManagedClusterId) {
		updatePaths = append(updatePaths, "params.kafka.managed_cluster_id")
	}

	var yandexConnectionmanagerConnectionParamsMongodbState, yandexConnectionmanagerConnectionParamsMongodbPlan yandexConnectionmanagerConnectionParamsMongodbModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPlan.Mongodb.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsState.Mongodb.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsMongodbAuthState, yandexConnectionmanagerConnectionParamsMongodbAuthPlan yandexConnectionmanagerConnectionParamsMongodbAuthModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbPlan.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuthPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbState.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuthState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsMongodbAuthPlan.AuthSource.Equal(yandexConnectionmanagerConnectionParamsMongodbAuthState.AuthSource) {
		updatePaths = append(updatePaths, "params.mongodb.auth.auth_source")
	}

	var yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordState, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPlan yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbAuthPlan.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbAuthState.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPlan yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPlan.Password.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordState.Password.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPlan.LockboxSecretKey.Equal(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState.LockboxSecretKey) {
		updatePaths = append(updatePaths, "params.mongodb.auth.user_password.password.lockbox_secret_key")
	}

	var yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPlan.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsPlan.Cookie.Equal(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie) {
		updatePaths = append(updatePaths, "params.mongodb.auth.user_password.password.password_generation_options.cookie")
	}

	var yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsPlan.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.ExcludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation) {
		updatePaths = append(updatePaths, "params.mongodb.auth.user_password.password.password_generation_options.lockbox_password_generation_options.excluded_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeDigits.Equal(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits) {
		updatePaths = append(updatePaths, "params.mongodb.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_digits")
	}
	if !yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeLowercase.Equal(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase) {
		updatePaths = append(updatePaths, "params.mongodb.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_lowercase")
	}
	if !yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludePunctuation.Equal(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation) {
		updatePaths = append(updatePaths, "params.mongodb.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeUppercase.Equal(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase) {
		updatePaths = append(updatePaths, "params.mongodb.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_uppercase")
	}
	if !yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation) {
		updatePaths = append(updatePaths, "params.mongodb.auth.user_password.password.password_generation_options.lockbox_password_generation_options.included_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.Length.Equal(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length) {
		updatePaths = append(updatePaths, "params.mongodb.auth.user_password.password.password_generation_options.lockbox_password_generation_options.length")
	}
	if !yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPlan.Raw.Equal(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState.Raw) {
		updatePaths = append(updatePaths, "params.mongodb.auth.user_password.password.raw")
	}
	if !yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPlan.User.Equal(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordState.User) {
		updatePaths = append(updatePaths, "params.mongodb.auth.user_password.user")
	}

	var yandexConnectionmanagerConnectionParamsMongodbClusterState, yandexConnectionmanagerConnectionParamsMongodbClusterPlan yandexConnectionmanagerConnectionParamsMongodbClusterModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbPlan.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbClusterPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbState.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbClusterState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if yandexConnectionmanagerConnectionParamsMongodbClusterPlan.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsMongodbClusterPlan.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsMongodbClusterHostStructModelType)
	}
	if yandexConnectionmanagerConnectionParamsMongodbClusterState.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsMongodbClusterState.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsMongodbClusterHostStructModelType)
	}
	if !yandexConnectionmanagerConnectionParamsMongodbClusterPlan.Hosts.Equal(yandexConnectionmanagerConnectionParamsMongodbClusterState.Hosts) {
		updatePaths = append(updatePaths, "params.mongodb.cluster.hosts")
	}

	var yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsPlan yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbClusterPlan.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbClusterState.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsState, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsPlan yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsPlan.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsPlan.CaCertificate.Equal(yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsState.CaCertificate) {
		updatePaths = append(updatePaths, "params.mongodb.cluster.tls_params.tls.ca_certificate")
	}
	if yandexConnectionmanagerConnectionParamsMongodbPlan.Databases.IsNull() {
		yandexConnectionmanagerConnectionParamsMongodbPlan.Databases = types.ListNull(types.StringType)
	}
	if yandexConnectionmanagerConnectionParamsMongodbState.Databases.IsNull() {
		yandexConnectionmanagerConnectionParamsMongodbState.Databases = types.ListNull(types.StringType)
	}
	if !yandexConnectionmanagerConnectionParamsMongodbPlan.Databases.Equal(yandexConnectionmanagerConnectionParamsMongodbState.Databases) {
		updatePaths = append(updatePaths, "params.mongodb.databases")
	}
	if !yandexConnectionmanagerConnectionParamsMongodbPlan.ManagedClusterId.Equal(yandexConnectionmanagerConnectionParamsMongodbState.ManagedClusterId) {
		updatePaths = append(updatePaths, "params.mongodb.managed_cluster_id")
	}

	var yandexConnectionmanagerConnectionParamsMysqlState, yandexConnectionmanagerConnectionParamsMysqlPlan yandexConnectionmanagerConnectionParamsMysqlModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPlan.Mysql.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsState.Mysql.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsMysqlAuthState, yandexConnectionmanagerConnectionParamsMysqlAuthPlan yandexConnectionmanagerConnectionParamsMysqlAuthModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlPlan.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuthPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlState.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuthState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordState, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPlan yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlAuthPlan.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlAuthState.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPlan yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPlan.Password.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordState.Password.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPlan.LockboxSecretKey.Equal(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState.LockboxSecretKey) {
		updatePaths = append(updatePaths, "params.mysql.auth.user_password.password.lockbox_secret_key")
	}

	var yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPlan.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsPlan.Cookie.Equal(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie) {
		updatePaths = append(updatePaths, "params.mysql.auth.user_password.password.password_generation_options.cookie")
	}

	var yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsPlan.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.ExcludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation) {
		updatePaths = append(updatePaths, "params.mysql.auth.user_password.password.password_generation_options.lockbox_password_generation_options.excluded_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeDigits.Equal(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits) {
		updatePaths = append(updatePaths, "params.mysql.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_digits")
	}
	if !yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeLowercase.Equal(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase) {
		updatePaths = append(updatePaths, "params.mysql.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_lowercase")
	}
	if !yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludePunctuation.Equal(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation) {
		updatePaths = append(updatePaths, "params.mysql.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeUppercase.Equal(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase) {
		updatePaths = append(updatePaths, "params.mysql.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_uppercase")
	}
	if !yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation) {
		updatePaths = append(updatePaths, "params.mysql.auth.user_password.password.password_generation_options.lockbox_password_generation_options.included_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.Length.Equal(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length) {
		updatePaths = append(updatePaths, "params.mysql.auth.user_password.password.password_generation_options.lockbox_password_generation_options.length")
	}
	if !yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPlan.Raw.Equal(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState.Raw) {
		updatePaths = append(updatePaths, "params.mysql.auth.user_password.password.raw")
	}
	if !yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPlan.User.Equal(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordState.User) {
		updatePaths = append(updatePaths, "params.mysql.auth.user_password.user")
	}

	var yandexConnectionmanagerConnectionParamsMysqlClusterState, yandexConnectionmanagerConnectionParamsMysqlClusterPlan yandexConnectionmanagerConnectionParamsMysqlClusterModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlPlan.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlClusterPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlState.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlClusterState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if yandexConnectionmanagerConnectionParamsMysqlClusterPlan.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsMysqlClusterPlan.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsMysqlClusterHostStructModelType)
	}
	if yandexConnectionmanagerConnectionParamsMysqlClusterState.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsMysqlClusterState.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsMysqlClusterHostStructModelType)
	}
	if !yandexConnectionmanagerConnectionParamsMysqlClusterPlan.Hosts.Equal(yandexConnectionmanagerConnectionParamsMysqlClusterState.Hosts) {
		updatePaths = append(updatePaths, "params.mysql.cluster.hosts")
	}

	var yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsPlan yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlClusterPlan.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlClusterState.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsState, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsPlan yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsPlan.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsPlan.CaCertificate.Equal(yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsState.CaCertificate) {
		updatePaths = append(updatePaths, "params.mysql.cluster.tls_params.tls.ca_certificate")
	}
	if yandexConnectionmanagerConnectionParamsMysqlPlan.Databases.IsNull() {
		yandexConnectionmanagerConnectionParamsMysqlPlan.Databases = types.ListNull(types.StringType)
	}
	if yandexConnectionmanagerConnectionParamsMysqlState.Databases.IsNull() {
		yandexConnectionmanagerConnectionParamsMysqlState.Databases = types.ListNull(types.StringType)
	}
	if !yandexConnectionmanagerConnectionParamsMysqlPlan.Databases.Equal(yandexConnectionmanagerConnectionParamsMysqlState.Databases) {
		updatePaths = append(updatePaths, "params.mysql.databases")
	}
	if !yandexConnectionmanagerConnectionParamsMysqlPlan.ManagedClusterId.Equal(yandexConnectionmanagerConnectionParamsMysqlState.ManagedClusterId) {
		updatePaths = append(updatePaths, "params.mysql.managed_cluster_id")
	}

	var yandexConnectionmanagerConnectionParamsOpensearchState, yandexConnectionmanagerConnectionParamsOpensearchPlan yandexConnectionmanagerConnectionParamsOpensearchModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPlan.Opensearch.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsState.Opensearch.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsOpensearchAuthState, yandexConnectionmanagerConnectionParamsOpensearchAuthPlan yandexConnectionmanagerConnectionParamsOpensearchAuthModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchPlan.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuthPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchState.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuthState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordState, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPlan yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchAuthPlan.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchAuthState.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPlan yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPlan.Password.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordState.Password.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPlan.LockboxSecretKey.Equal(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState.LockboxSecretKey) {
		updatePaths = append(updatePaths, "params.opensearch.auth.user_password.password.lockbox_secret_key")
	}

	var yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPlan.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsPlan.Cookie.Equal(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie) {
		updatePaths = append(updatePaths, "params.opensearch.auth.user_password.password.password_generation_options.cookie")
	}

	var yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsPlan.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.ExcludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation) {
		updatePaths = append(updatePaths, "params.opensearch.auth.user_password.password.password_generation_options.lockbox_password_generation_options.excluded_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeDigits.Equal(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits) {
		updatePaths = append(updatePaths, "params.opensearch.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_digits")
	}
	if !yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeLowercase.Equal(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase) {
		updatePaths = append(updatePaths, "params.opensearch.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_lowercase")
	}
	if !yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludePunctuation.Equal(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation) {
		updatePaths = append(updatePaths, "params.opensearch.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeUppercase.Equal(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase) {
		updatePaths = append(updatePaths, "params.opensearch.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_uppercase")
	}
	if !yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation) {
		updatePaths = append(updatePaths, "params.opensearch.auth.user_password.password.password_generation_options.lockbox_password_generation_options.included_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.Length.Equal(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length) {
		updatePaths = append(updatePaths, "params.opensearch.auth.user_password.password.password_generation_options.lockbox_password_generation_options.length")
	}
	if !yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPlan.Raw.Equal(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState.Raw) {
		updatePaths = append(updatePaths, "params.opensearch.auth.user_password.password.raw")
	}
	if !yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPlan.User.Equal(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordState.User) {
		updatePaths = append(updatePaths, "params.opensearch.auth.user_password.user")
	}

	var yandexConnectionmanagerConnectionParamsOpensearchClusterState, yandexConnectionmanagerConnectionParamsOpensearchClusterPlan yandexConnectionmanagerConnectionParamsOpensearchClusterModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchPlan.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchClusterPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchState.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchClusterState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if yandexConnectionmanagerConnectionParamsOpensearchClusterPlan.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsOpensearchClusterPlan.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModelType)
	}
	if yandexConnectionmanagerConnectionParamsOpensearchClusterState.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsOpensearchClusterState.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModelType)
	}
	if !yandexConnectionmanagerConnectionParamsOpensearchClusterPlan.Hosts.Equal(yandexConnectionmanagerConnectionParamsOpensearchClusterState.Hosts) {
		updatePaths = append(updatePaths, "params.opensearch.cluster.hosts")
	}

	var yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsPlan yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchClusterPlan.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchClusterState.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsState, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsPlan yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsPlan.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsPlan.CaCertificate.Equal(yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsState.CaCertificate) {
		updatePaths = append(updatePaths, "params.opensearch.cluster.tls_params.tls.ca_certificate")
	}
	if !yandexConnectionmanagerConnectionParamsOpensearchPlan.ManagedClusterId.Equal(yandexConnectionmanagerConnectionParamsOpensearchState.ManagedClusterId) {
		updatePaths = append(updatePaths, "params.opensearch.managed_cluster_id")
	}

	var yandexConnectionmanagerConnectionParamsPostgresqlState, yandexConnectionmanagerConnectionParamsPostgresqlPlan yandexConnectionmanagerConnectionParamsPostgresqlModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPlan.Postgresql.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsState.Postgresql.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsPostgresqlAuthState, yandexConnectionmanagerConnectionParamsPostgresqlAuthPlan yandexConnectionmanagerConnectionParamsPostgresqlAuthModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlPlan.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuthPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlState.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuthState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordState, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPlan yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlAuthPlan.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlAuthState.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPlan yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPlan.Password.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordState.Password.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPlan.LockboxSecretKey.Equal(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState.LockboxSecretKey) {
		updatePaths = append(updatePaths, "params.postgresql.auth.user_password.password.lockbox_secret_key")
	}

	var yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPlan.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsPlan.Cookie.Equal(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie) {
		updatePaths = append(updatePaths, "params.postgresql.auth.user_password.password.password_generation_options.cookie")
	}

	var yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsPlan.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.ExcludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation) {
		updatePaths = append(updatePaths, "params.postgresql.auth.user_password.password.password_generation_options.lockbox_password_generation_options.excluded_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeDigits.Equal(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits) {
		updatePaths = append(updatePaths, "params.postgresql.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_digits")
	}
	if !yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeLowercase.Equal(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase) {
		updatePaths = append(updatePaths, "params.postgresql.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_lowercase")
	}
	if !yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludePunctuation.Equal(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation) {
		updatePaths = append(updatePaths, "params.postgresql.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeUppercase.Equal(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase) {
		updatePaths = append(updatePaths, "params.postgresql.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_uppercase")
	}
	if !yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation) {
		updatePaths = append(updatePaths, "params.postgresql.auth.user_password.password.password_generation_options.lockbox_password_generation_options.included_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.Length.Equal(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length) {
		updatePaths = append(updatePaths, "params.postgresql.auth.user_password.password.password_generation_options.lockbox_password_generation_options.length")
	}
	if !yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPlan.Raw.Equal(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState.Raw) {
		updatePaths = append(updatePaths, "params.postgresql.auth.user_password.password.raw")
	}
	if !yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPlan.User.Equal(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordState.User) {
		updatePaths = append(updatePaths, "params.postgresql.auth.user_password.user")
	}

	var yandexConnectionmanagerConnectionParamsPostgresqlClusterState, yandexConnectionmanagerConnectionParamsPostgresqlClusterPlan yandexConnectionmanagerConnectionParamsPostgresqlClusterModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlPlan.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlClusterPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlState.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlClusterState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if yandexConnectionmanagerConnectionParamsPostgresqlClusterPlan.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsPostgresqlClusterPlan.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModelType)
	}
	if yandexConnectionmanagerConnectionParamsPostgresqlClusterState.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsPostgresqlClusterState.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModelType)
	}
	if !yandexConnectionmanagerConnectionParamsPostgresqlClusterPlan.Hosts.Equal(yandexConnectionmanagerConnectionParamsPostgresqlClusterState.Hosts) {
		updatePaths = append(updatePaths, "params.postgresql.cluster.hosts")
	}

	var yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsPlan yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlClusterPlan.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlClusterState.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsState, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsPlan yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsPlan.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsPlan.CaCertificate.Equal(yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsState.CaCertificate) {
		updatePaths = append(updatePaths, "params.postgresql.cluster.tls_params.tls.ca_certificate")
	}
	if yandexConnectionmanagerConnectionParamsPostgresqlPlan.Databases.IsNull() {
		yandexConnectionmanagerConnectionParamsPostgresqlPlan.Databases = types.ListNull(types.StringType)
	}
	if yandexConnectionmanagerConnectionParamsPostgresqlState.Databases.IsNull() {
		yandexConnectionmanagerConnectionParamsPostgresqlState.Databases = types.ListNull(types.StringType)
	}
	if !yandexConnectionmanagerConnectionParamsPostgresqlPlan.Databases.Equal(yandexConnectionmanagerConnectionParamsPostgresqlState.Databases) {
		updatePaths = append(updatePaths, "params.postgresql.databases")
	}
	if !yandexConnectionmanagerConnectionParamsPostgresqlPlan.ManagedClusterId.Equal(yandexConnectionmanagerConnectionParamsPostgresqlState.ManagedClusterId) {
		updatePaths = append(updatePaths, "params.postgresql.managed_cluster_id")
	}

	var yandexConnectionmanagerConnectionParamsRedisState, yandexConnectionmanagerConnectionParamsRedisPlan yandexConnectionmanagerConnectionParamsRedisModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPlan.Redis.As(ctx, &yandexConnectionmanagerConnectionParamsRedisPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsState.Redis.As(ctx, &yandexConnectionmanagerConnectionParamsRedisState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsRedisAuthState, yandexConnectionmanagerConnectionParamsRedisAuthPlan yandexConnectionmanagerConnectionParamsRedisAuthModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisPlan.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuthPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisState.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuthState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordState, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPlan yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisAuthPlan.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisAuthState.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPlan yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPlan.Password.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordState.Password.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPlan.LockboxSecretKey.Equal(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState.LockboxSecretKey) {
		updatePaths = append(updatePaths, "params.redis.auth.user_password.password.lockbox_secret_key")
	}

	var yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPlan.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsPlan.Cookie.Equal(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie) {
		updatePaths = append(updatePaths, "params.redis.auth.user_password.password.password_generation_options.cookie")
	}

	var yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsPlan.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.ExcludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation) {
		updatePaths = append(updatePaths, "params.redis.auth.user_password.password.password_generation_options.lockbox_password_generation_options.excluded_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeDigits.Equal(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits) {
		updatePaths = append(updatePaths, "params.redis.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_digits")
	}
	if !yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeLowercase.Equal(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase) {
		updatePaths = append(updatePaths, "params.redis.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_lowercase")
	}
	if !yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludePunctuation.Equal(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation) {
		updatePaths = append(updatePaths, "params.redis.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeUppercase.Equal(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase) {
		updatePaths = append(updatePaths, "params.redis.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_uppercase")
	}
	if !yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation) {
		updatePaths = append(updatePaths, "params.redis.auth.user_password.password.password_generation_options.lockbox_password_generation_options.included_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.Length.Equal(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length) {
		updatePaths = append(updatePaths, "params.redis.auth.user_password.password.password_generation_options.lockbox_password_generation_options.length")
	}
	if !yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPlan.Raw.Equal(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState.Raw) {
		updatePaths = append(updatePaths, "params.redis.auth.user_password.password.raw")
	}
	if !yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPlan.User.Equal(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordState.User) {
		updatePaths = append(updatePaths, "params.redis.auth.user_password.user")
	}

	var yandexConnectionmanagerConnectionParamsRedisClusterState, yandexConnectionmanagerConnectionParamsRedisClusterPlan yandexConnectionmanagerConnectionParamsRedisClusterModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisPlan.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsRedisClusterPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisState.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsRedisClusterState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if yandexConnectionmanagerConnectionParamsRedisClusterPlan.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsRedisClusterPlan.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsRedisClusterHostStructModelType)
	}
	if yandexConnectionmanagerConnectionParamsRedisClusterState.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsRedisClusterState.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsRedisClusterHostStructModelType)
	}
	if !yandexConnectionmanagerConnectionParamsRedisClusterPlan.Hosts.Equal(yandexConnectionmanagerConnectionParamsRedisClusterState.Hosts) {
		updatePaths = append(updatePaths, "params.redis.cluster.hosts")
	}
	if !yandexConnectionmanagerConnectionParamsRedisClusterPlan.SentinelPort.Equal(yandexConnectionmanagerConnectionParamsRedisClusterState.SentinelPort) {
		updatePaths = append(updatePaths, "params.redis.cluster.sentinel_port")
	}

	var yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsPlan yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisClusterPlan.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisClusterState.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsState, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsPlan yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsPlan.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsPlan.CaCertificate.Equal(yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsState.CaCertificate) {
		updatePaths = append(updatePaths, "params.redis.cluster.tls_params.tls.ca_certificate")
	}
	if yandexConnectionmanagerConnectionParamsRedisPlan.Databases.IsNull() {
		yandexConnectionmanagerConnectionParamsRedisPlan.Databases = types.ListNull(types.Int64Type)
	}
	if yandexConnectionmanagerConnectionParamsRedisState.Databases.IsNull() {
		yandexConnectionmanagerConnectionParamsRedisState.Databases = types.ListNull(types.Int64Type)
	}
	if !yandexConnectionmanagerConnectionParamsRedisPlan.Databases.Equal(yandexConnectionmanagerConnectionParamsRedisState.Databases) {
		updatePaths = append(updatePaths, "params.redis.databases")
	}

	var yandexConnectionmanagerConnectionParamsTrinoState, yandexConnectionmanagerConnectionParamsTrinoPlan yandexConnectionmanagerConnectionParamsTrinoModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPlan.Trino.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsState.Trino.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsTrinoAuthState, yandexConnectionmanagerConnectionParamsTrinoAuthPlan yandexConnectionmanagerConnectionParamsTrinoAuthModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoPlan.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuthPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoState.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuthState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordState, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPlan yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoAuthPlan.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoAuthState.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPlan yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPlan.Password.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordState.Password.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPlan.LockboxSecretKey.Equal(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState.LockboxSecretKey) {
		updatePaths = append(updatePaths, "params.trino.auth.user_password.password.lockbox_secret_key")
	}

	var yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPlan.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsPlan.Cookie.Equal(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie) {
		updatePaths = append(updatePaths, "params.trino.auth.user_password.password.password_generation_options.cookie")
	}

	var yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsPlan.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.ExcludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation) {
		updatePaths = append(updatePaths, "params.trino.auth.user_password.password.password_generation_options.lockbox_password_generation_options.excluded_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeDigits.Equal(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits) {
		updatePaths = append(updatePaths, "params.trino.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_digits")
	}
	if !yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeLowercase.Equal(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase) {
		updatePaths = append(updatePaths, "params.trino.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_lowercase")
	}
	if !yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludePunctuation.Equal(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation) {
		updatePaths = append(updatePaths, "params.trino.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeUppercase.Equal(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase) {
		updatePaths = append(updatePaths, "params.trino.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_uppercase")
	}
	if !yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation) {
		updatePaths = append(updatePaths, "params.trino.auth.user_password.password.password_generation_options.lockbox_password_generation_options.included_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.Length.Equal(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length) {
		updatePaths = append(updatePaths, "params.trino.auth.user_password.password.password_generation_options.lockbox_password_generation_options.length")
	}
	if !yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPlan.Raw.Equal(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState.Raw) {
		updatePaths = append(updatePaths, "params.trino.auth.user_password.password.raw")
	}
	if !yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPlan.User.Equal(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordState.User) {
		updatePaths = append(updatePaths, "params.trino.auth.user_password.user")
	}

	var yandexConnectionmanagerConnectionParamsTrinoClusterState, yandexConnectionmanagerConnectionParamsTrinoClusterPlan yandexConnectionmanagerConnectionParamsTrinoClusterModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoPlan.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoClusterPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoState.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoClusterState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorState, yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorPlan yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoClusterPlan.Coordinator.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoClusterState.Coordinator.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorPlan.Host.Equal(yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorState.Host) {
		updatePaths = append(updatePaths, "params.trino.cluster.coordinator.host")
	}
	if !yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorPlan.Port.Equal(yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorState.Port) {
		updatePaths = append(updatePaths, "params.trino.cluster.coordinator.port")
	}

	var yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsPlan yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoClusterPlan.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoClusterState.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsState, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsPlan yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsPlan.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsPlan.CaCertificate.Equal(yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsState.CaCertificate) {
		updatePaths = append(updatePaths, "params.trino.cluster.tls_params.tls.ca_certificate")
	}

	var yandexConnectionmanagerConnectionParamsValkeyState, yandexConnectionmanagerConnectionParamsValkeyPlan yandexConnectionmanagerConnectionParamsValkeyModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsPlan.Valkey.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsState.Valkey.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsValkeyAuthState, yandexConnectionmanagerConnectionParamsValkeyAuthPlan yandexConnectionmanagerConnectionParamsValkeyAuthModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyPlan.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuthPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyState.Auth.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuthState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordState, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPlan yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyAuthPlan.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyAuthState.UserPassword.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPlan yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPlan.Password.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordState.Password.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPlan.LockboxSecretKey.Equal(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState.LockboxSecretKey) {
		updatePaths = append(updatePaths, "params.valkey.auth.user_password.password.lockbox_secret_key")
	}

	var yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPlan.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState.PasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsPlan.Cookie.Equal(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie) {
		updatePaths = append(updatePaths, "params.valkey.auth.user_password.password.password_generation_options.cookie")
	}

	var yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsPlan.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.ExcludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation) {
		updatePaths = append(updatePaths, "params.valkey.auth.user_password.password.password_generation_options.lockbox_password_generation_options.excluded_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeDigits.Equal(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits) {
		updatePaths = append(updatePaths, "params.valkey.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_digits")
	}
	if !yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeLowercase.Equal(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase) {
		updatePaths = append(updatePaths, "params.valkey.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_lowercase")
	}
	if !yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludePunctuation.Equal(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation) {
		updatePaths = append(updatePaths, "params.valkey.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludeUppercase.Equal(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase) {
		updatePaths = append(updatePaths, "params.valkey.auth.user_password.password.password_generation_options.lockbox_password_generation_options.include_uppercase")
	}
	if !yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.IncludedPunctuation.Equal(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation) {
		updatePaths = append(updatePaths, "params.valkey.auth.user_password.password.password_generation_options.lockbox_password_generation_options.included_punctuation")
	}
	if !yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsPlan.Length.Equal(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length) {
		updatePaths = append(updatePaths, "params.valkey.auth.user_password.password.password_generation_options.lockbox_password_generation_options.length")
	}
	if !yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPlan.Raw.Equal(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState.Raw) {
		updatePaths = append(updatePaths, "params.valkey.auth.user_password.password.raw")
	}
	if !yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPlan.User.Equal(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordState.User) {
		updatePaths = append(updatePaths, "params.valkey.auth.user_password.user")
	}

	var yandexConnectionmanagerConnectionParamsValkeyClusterState, yandexConnectionmanagerConnectionParamsValkeyClusterPlan yandexConnectionmanagerConnectionParamsValkeyClusterModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyPlan.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyClusterPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyState.Cluster.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyClusterState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if yandexConnectionmanagerConnectionParamsValkeyClusterPlan.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsValkeyClusterPlan.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsValkeyClusterHostStructModelType)
	}
	if yandexConnectionmanagerConnectionParamsValkeyClusterState.Hosts.IsNull() {
		yandexConnectionmanagerConnectionParamsValkeyClusterState.Hosts = types.ListNull(yandexConnectionmanagerConnectionParamsValkeyClusterHostStructModelType)
	}
	if !yandexConnectionmanagerConnectionParamsValkeyClusterPlan.Hosts.Equal(yandexConnectionmanagerConnectionParamsValkeyClusterState.Hosts) {
		updatePaths = append(updatePaths, "params.valkey.cluster.hosts")
	}
	if !yandexConnectionmanagerConnectionParamsValkeyClusterPlan.SentinelPort.Equal(yandexConnectionmanagerConnectionParamsValkeyClusterState.SentinelPort) {
		updatePaths = append(updatePaths, "params.valkey.cluster.sentinel_port")
	}

	var yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsPlan yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyClusterPlan.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyClusterState.TlsParams.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	var yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsState, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsPlan yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsModel
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsPlan.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsPlan, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	resp.Diagnostics.Append(yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState.Tls.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsState, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if resp.Diagnostics.HasError() {
		return
	}

	if !yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsPlan.CaCertificate.Equal(yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsState.CaCertificate) {
		updatePaths = append(updatePaths, "params.valkey.cluster.tls_params.tls.ca_certificate")
	}
	if yandexConnectionmanagerConnectionParamsValkeyPlan.Databases.IsNull() {
		yandexConnectionmanagerConnectionParamsValkeyPlan.Databases = types.ListNull(types.Int64Type)
	}
	if yandexConnectionmanagerConnectionParamsValkeyState.Databases.IsNull() {
		yandexConnectionmanagerConnectionParamsValkeyState.Databases = types.ListNull(types.Int64Type)
	}
	if !yandexConnectionmanagerConnectionParamsValkeyPlan.Databases.Equal(yandexConnectionmanagerConnectionParamsValkeyState.Databases) {
		updatePaths = append(updatePaths, "params.valkey.databases")
	}
	if !yandexConnectionmanagerConnectionParamsValkeyPlan.ManagedClusterId.Equal(yandexConnectionmanagerConnectionParamsValkeyState.ManagedClusterId) {
		updatePaths = append(updatePaths, "params.valkey.managed_cluster_id")
	}
	if len(updatePaths) != 0 {

		updateReq := &connectionmanager.UpdateConnectionRequest{}
		id := plan.ID.ValueString()
		if !plan.ConnectionId.IsUnknown() && !plan.ConnectionId.IsNull() {
			id = plan.ConnectionId.ValueString()
		}
		updateReq.SetConnectionId(id)
		updateReq.SetName(plan.Name.ValueString())
		updateReq.SetDescription(plan.Description.ValueString())
		updateReq.SetLabels(expandYandexConnectionmanagerConnectionLabels(ctx, plan.Labels, &diags))
		updateReq.SetParams(expandYandexConnectionmanagerConnectionParams(ctx, plan.Params, &diags))
		updateReq.SetUpdateMask(&field_mask.FieldMask{Paths: updatePaths})

		resp.Diagnostics.Append(diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		tflog.Debug(ctx, fmt.Sprintf("Update connection request: %s", validate.ProtoDump(updateReq)))

		md := new(metadata.MD)
		op, err := connectionmanagerv1sdk.NewConnectionClient(r.providerConfig.SDKv2).Update(ctx, updateReq, grpc.Header(md))
		if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
			tflog.Debug(ctx, fmt.Sprintf("Update connection x-server-trace-id: %s", traceHeader[0]))
		}
		if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
			tflog.Debug(ctx, fmt.Sprintf("Update connection x-server-request-id: %s", traceHeader[0]))
		}
		if err != nil {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to update connection:"+err.Error(),
			)
			return
		}
		updateRes, err := op.Wait(ctx)
		if err != nil {
			resp.Diagnostics.AddError(
				"Unable to Update Resource",
				fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
					"Please retry the operation or report this issue to the provider developers.\n\n"+
					"Error: %s", err),
			)
			return
		}
		tflog.Debug(ctx, fmt.Sprintf("Update connection response: %s", validate.ProtoDump(updateRes)))

		plan.ConnectionId = types.StringValue(updateRes.Id)
	}
	reqApi := &connectionmanager.GetConnectionRequest{}
	reqApi.SetConnectionId(plan.ConnectionId.ValueString())
	tflog.Debug(ctx, fmt.Sprintf("Read connection request: %s", validate.ProtoDump(reqApi)))
	md := new(metadata.MD)
	res, err := connectionmanagerv1sdk.NewConnectionClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read connection x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read connection x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"connection not found",
			)
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get connection:"+err.Error(),
			)
		}
	}
	tflog.Debug(ctx, fmt.Sprintf("Read connection response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	to := state.Timeouts
	if !plan.Timeouts.Equal(state.Timeouts) {
		to = plan.Timeouts
	}

	newState := flattenYandexConnectionmanagerConnection(ctx, res, plan, to, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}
