// Code generated by tfgen. DO NOT EDIT.

package yandex_connectionmanager_connection

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	connectionmanager "github.com/yandex-cloud/go-genproto/yandex/cloud/connectionmanager/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	"google.golang.org/protobuf/types/known/wrapperspb"
)

type yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModel struct {
	Health    types.String `tfsdk:"health"`
	Host      types.String `tfsdk:"host"`
	HttpPort  types.Int64  `tfsdk:"http_port"`
	ShardName types.String `tfsdk:"shard_name"`
	TcpPort   types.Int64  `tfsdk:"tcp_port"`
}

var yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"health":     types.StringType,
		"host":       types.StringType,
		"http_port":  types.Int64Type,
		"shard_name": types.StringType,
		"tcp_port":   types.Int64Type,
	},
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseClusterHostStruct(ctx context.Context,
	yandexConnectionmanagerConnectionParamsClickhouseClusterHostStruct *connectionmanager.ClickHouseCluster_Host,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterHostStruct == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModelType.AttrTypes, yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModel{
		Health:    types.StringValue(yandexConnectionmanagerConnectionParamsClickhouseClusterHostStruct.GetHealth().String()),
		Host:      types.StringValue(yandexConnectionmanagerConnectionParamsClickhouseClusterHostStruct.GetHost()),
		HttpPort:  types.Int64Value(int64(yandexConnectionmanagerConnectionParamsClickhouseClusterHostStruct.GetHttpPort())),
		ShardName: types.StringValue(yandexConnectionmanagerConnectionParamsClickhouseClusterHostStruct.GetShardName()),
		TcpPort:   types.Int64Value(int64(yandexConnectionmanagerConnectionParamsClickhouseClusterHostStruct.GetTcpPort())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseClusterHostStruct(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructState types.Object, diags *diag.Diagnostics) *connectionmanager.ClickHouseCluster_Host {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsClickhouseClusterHostStruct yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModel
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructState.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseClusterHostStruct, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModel(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterHostStruct, diags)
}

func expandYandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModel(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructState yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModel, diags *diag.Diagnostics) *connectionmanager.ClickHouseCluster_Host {
	value := &connectionmanager.ClickHouseCluster_Host{}
	value.SetHealth(connectionmanager.ClickHouseCluster_Host_Health(connectionmanager.ClickHouseCluster_Host_Health_value[yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructState.Health.ValueString()]))
	value.SetHost(yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructState.Host.ValueString())
	value.SetHttpPort((yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructState.HttpPort.ValueInt64()))
	value.SetShardName(yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructState.ShardName.ValueString())
	value.SetTcpPort((yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructState.TcpPort.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModel struct {
	Name       types.String `tfsdk:"name"`
	ShardNames types.List   `tfsdk:"shard_names"`
}

var yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"name":        types.StringType,
		"shard_names": types.ListType{ElemType: types.StringType},
	},
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStruct(ctx context.Context,
	yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStruct *connectionmanager.ClickHouseCluster_ShardGroup,
	state yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStruct == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModelType.AttrTypes, yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModel{
		Name:       types.StringValue(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStruct.GetName()),
		ShardNames: flattenYandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNames(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStruct.GetShardNames(), state.ShardNames, diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStruct(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructState types.Object, diags *diag.Diagnostics) *connectionmanager.ClickHouseCluster_ShardGroup {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStruct yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModel
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructState.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStruct, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModel(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStruct, diags)
}

func expandYandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModel(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructState yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModel, diags *diag.Diagnostics) *connectionmanager.ClickHouseCluster_ShardGroup {
	value := &connectionmanager.ClickHouseCluster_ShardGroup{}
	value.SetName(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructState.Name.ValueString())
	value.SetShardNames(expandYandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNames(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructState.ShardNames, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNames(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNames []string, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNames == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(types.StringType)
	}
	var yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNames {
		val := types.StringValue(elem)
		yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesValues = append(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNames(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesState types.List, diags *diag.Diagnostics) []string {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesState.Elements()) == 0 {
		return []string{}
	}
	yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesRes := make([]string, 0, len(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesState.Elements()))
	yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesType := make([]types.String, 0, len(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesType {
		yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesRes = append(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesRes, elem.ValueString())
	}
	return yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructShardNamesRes
}

type yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModel struct {
	Health types.String `tfsdk:"health"`
	Host   types.String `tfsdk:"host"`
	Port   types.Int64  `tfsdk:"port"`
	Role   types.String `tfsdk:"role"`
}

var yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"health": types.StringType,
		"host":   types.StringType,
		"port":   types.Int64Type,
		"role":   types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsGreenplumClusterHostStruct(ctx context.Context,
	yandexConnectionmanagerConnectionParamsGreenplumClusterHostStruct *connectionmanager.GreenplumCluster_Host,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsGreenplumClusterHostStruct == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModelType.AttrTypes, yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModel{
		Health: types.StringValue(yandexConnectionmanagerConnectionParamsGreenplumClusterHostStruct.GetHealth().String()),
		Host:   types.StringValue(yandexConnectionmanagerConnectionParamsGreenplumClusterHostStruct.GetHost()),
		Port:   types.Int64Value(int64(yandexConnectionmanagerConnectionParamsGreenplumClusterHostStruct.GetPort())),
		Role:   types.StringValue(yandexConnectionmanagerConnectionParamsGreenplumClusterHostStruct.GetRole().String()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsGreenplumClusterHostStruct(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructState types.Object, diags *diag.Diagnostics) *connectionmanager.GreenplumCluster_Host {
	if yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructState.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsGreenplumClusterHostStruct yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModel
	diags.Append(yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructState.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumClusterHostStruct, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModel(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterHostStruct, diags)
}

func expandYandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModel(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructState yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModel, diags *diag.Diagnostics) *connectionmanager.GreenplumCluster_Host {
	value := &connectionmanager.GreenplumCluster_Host{}
	value.SetHealth(connectionmanager.GreenplumCluster_Host_Health(connectionmanager.GreenplumCluster_Host_Health_value[yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructState.Health.ValueString()]))
	value.SetHost(yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructState.Host.ValueString())
	value.SetPort((yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructState.Port.ValueInt64()))
	value.SetRole(connectionmanager.GreenplumCluster_Host_Role(connectionmanager.GreenplumCluster_Host_Role_value[yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructState.Role.ValueString()]))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsKafkaClusterHostStructModel struct {
	Health types.String `tfsdk:"health"`
	Host   types.String `tfsdk:"host"`
	Port   types.Int64  `tfsdk:"port"`
}

var yandexConnectionmanagerConnectionParamsKafkaClusterHostStructModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"health": types.StringType,
		"host":   types.StringType,
		"port":   types.Int64Type,
	},
}

func flattenYandexConnectionmanagerConnectionParamsKafkaClusterHostStruct(ctx context.Context,
	yandexConnectionmanagerConnectionParamsKafkaClusterHostStruct *connectionmanager.KafkaCluster_Host,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsKafkaClusterHostStruct == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsKafkaClusterHostStructModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterHostStructModelType.AttrTypes, yandexConnectionmanagerConnectionParamsKafkaClusterHostStructModel{
		Health: types.StringValue(yandexConnectionmanagerConnectionParamsKafkaClusterHostStruct.GetHealth().String()),
		Host:   types.StringValue(yandexConnectionmanagerConnectionParamsKafkaClusterHostStruct.GetHost()),
		Port:   types.Int64Value(int64(yandexConnectionmanagerConnectionParamsKafkaClusterHostStruct.GetPort())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsKafkaClusterHostStruct(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaClusterHostStructState types.Object, diags *diag.Diagnostics) *connectionmanager.KafkaCluster_Host {
	if yandexConnectionmanagerConnectionParamsKafkaClusterHostStructState.IsNull() || yandexConnectionmanagerConnectionParamsKafkaClusterHostStructState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsKafkaClusterHostStruct yandexConnectionmanagerConnectionParamsKafkaClusterHostStructModel
	diags.Append(yandexConnectionmanagerConnectionParamsKafkaClusterHostStructState.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaClusterHostStruct, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsKafkaClusterHostStructModel(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterHostStruct, diags)
}

func expandYandexConnectionmanagerConnectionParamsKafkaClusterHostStructModel(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaClusterHostStructState yandexConnectionmanagerConnectionParamsKafkaClusterHostStructModel, diags *diag.Diagnostics) *connectionmanager.KafkaCluster_Host {
	value := &connectionmanager.KafkaCluster_Host{}
	value.SetHealth(connectionmanager.KafkaCluster_Host_Health(connectionmanager.KafkaCluster_Host_Health_value[yandexConnectionmanagerConnectionParamsKafkaClusterHostStructState.Health.ValueString()]))
	value.SetHost(yandexConnectionmanagerConnectionParamsKafkaClusterHostStructState.Host.ValueString())
	value.SetPort((yandexConnectionmanagerConnectionParamsKafkaClusterHostStructState.Port.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMongodbClusterHostStructModel struct {
	Health types.String `tfsdk:"health"`
	Host   types.String `tfsdk:"host"`
	Port   types.Int64  `tfsdk:"port"`
	Role   types.String `tfsdk:"role"`
	Type   types.String `tfsdk:"type"`
}

var yandexConnectionmanagerConnectionParamsMongodbClusterHostStructModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"health": types.StringType,
		"host":   types.StringType,
		"port":   types.Int64Type,
		"role":   types.StringType,
		"type":   types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMongodbClusterHostStruct(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMongodbClusterHostStruct *connectionmanager.MongoDBCluster_Host,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMongodbClusterHostStruct == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMongodbClusterHostStructModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterHostStructModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMongodbClusterHostStructModel{
		Health: types.StringValue(yandexConnectionmanagerConnectionParamsMongodbClusterHostStruct.GetHealth().String()),
		Host:   types.StringValue(yandexConnectionmanagerConnectionParamsMongodbClusterHostStruct.GetHost()),
		Port:   types.Int64Value(int64(yandexConnectionmanagerConnectionParamsMongodbClusterHostStruct.GetPort())),
		Role:   types.StringValue(yandexConnectionmanagerConnectionParamsMongodbClusterHostStruct.GetRole().String()),
		Type:   types.StringValue(yandexConnectionmanagerConnectionParamsMongodbClusterHostStruct.GetType().String()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMongodbClusterHostStruct(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbClusterHostStructState types.Object, diags *diag.Diagnostics) *connectionmanager.MongoDBCluster_Host {
	if yandexConnectionmanagerConnectionParamsMongodbClusterHostStructState.IsNull() || yandexConnectionmanagerConnectionParamsMongodbClusterHostStructState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMongodbClusterHostStruct yandexConnectionmanagerConnectionParamsMongodbClusterHostStructModel
	diags.Append(yandexConnectionmanagerConnectionParamsMongodbClusterHostStructState.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbClusterHostStruct, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMongodbClusterHostStructModel(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterHostStruct, diags)
}

func expandYandexConnectionmanagerConnectionParamsMongodbClusterHostStructModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbClusterHostStructState yandexConnectionmanagerConnectionParamsMongodbClusterHostStructModel, diags *diag.Diagnostics) *connectionmanager.MongoDBCluster_Host {
	value := &connectionmanager.MongoDBCluster_Host{}
	value.SetHealth(connectionmanager.MongoDBCluster_Host_Health(connectionmanager.MongoDBCluster_Host_Health_value[yandexConnectionmanagerConnectionParamsMongodbClusterHostStructState.Health.ValueString()]))
	value.SetHost(yandexConnectionmanagerConnectionParamsMongodbClusterHostStructState.Host.ValueString())
	value.SetPort((yandexConnectionmanagerConnectionParamsMongodbClusterHostStructState.Port.ValueInt64()))
	value.SetRole(connectionmanager.MongoDBCluster_Host_Role(connectionmanager.MongoDBCluster_Host_Role_value[yandexConnectionmanagerConnectionParamsMongodbClusterHostStructState.Role.ValueString()]))
	value.SetType(connectionmanager.MongoDBCluster_Host_Type(connectionmanager.MongoDBCluster_Host_Type_value[yandexConnectionmanagerConnectionParamsMongodbClusterHostStructState.Type.ValueString()]))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMysqlClusterHostStructModel struct {
	Health types.String `tfsdk:"health"`
	Host   types.String `tfsdk:"host"`
	Port   types.Int64  `tfsdk:"port"`
	Role   types.String `tfsdk:"role"`
}

var yandexConnectionmanagerConnectionParamsMysqlClusterHostStructModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"health": types.StringType,
		"host":   types.StringType,
		"port":   types.Int64Type,
		"role":   types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMysqlClusterHostStruct(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMysqlClusterHostStruct *connectionmanager.MySQLCluster_Host,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMysqlClusterHostStruct == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMysqlClusterHostStructModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterHostStructModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMysqlClusterHostStructModel{
		Health: types.StringValue(yandexConnectionmanagerConnectionParamsMysqlClusterHostStruct.GetHealth().String()),
		Host:   types.StringValue(yandexConnectionmanagerConnectionParamsMysqlClusterHostStruct.GetHost()),
		Port:   types.Int64Value(int64(yandexConnectionmanagerConnectionParamsMysqlClusterHostStruct.GetPort())),
		Role:   types.StringValue(yandexConnectionmanagerConnectionParamsMysqlClusterHostStruct.GetRole().String()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMysqlClusterHostStruct(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlClusterHostStructState types.Object, diags *diag.Diagnostics) *connectionmanager.MySQLCluster_Host {
	if yandexConnectionmanagerConnectionParamsMysqlClusterHostStructState.IsNull() || yandexConnectionmanagerConnectionParamsMysqlClusterHostStructState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMysqlClusterHostStruct yandexConnectionmanagerConnectionParamsMysqlClusterHostStructModel
	diags.Append(yandexConnectionmanagerConnectionParamsMysqlClusterHostStructState.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlClusterHostStruct, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMysqlClusterHostStructModel(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterHostStruct, diags)
}

func expandYandexConnectionmanagerConnectionParamsMysqlClusterHostStructModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlClusterHostStructState yandexConnectionmanagerConnectionParamsMysqlClusterHostStructModel, diags *diag.Diagnostics) *connectionmanager.MySQLCluster_Host {
	value := &connectionmanager.MySQLCluster_Host{}
	value.SetHealth(connectionmanager.MySQLCluster_Host_Health(connectionmanager.MySQLCluster_Host_Health_value[yandexConnectionmanagerConnectionParamsMysqlClusterHostStructState.Health.ValueString()]))
	value.SetHost(yandexConnectionmanagerConnectionParamsMysqlClusterHostStructState.Host.ValueString())
	value.SetPort((yandexConnectionmanagerConnectionParamsMysqlClusterHostStructState.Port.ValueInt64()))
	value.SetRole(connectionmanager.MySQLCluster_Host_Role(connectionmanager.MySQLCluster_Host_Role_value[yandexConnectionmanagerConnectionParamsMysqlClusterHostStructState.Role.ValueString()]))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModel struct {
	Health types.String `tfsdk:"health"`
	Host   types.String `tfsdk:"host"`
	Port   types.Int64  `tfsdk:"port"`
	Roles  types.List   `tfsdk:"roles"`
}

var yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"health": types.StringType,
		"host":   types.StringType,
		"port":   types.Int64Type,
		"roles":  types.ListType{ElemType: types.StringType},
	},
}

func flattenYandexConnectionmanagerConnectionParamsOpensearchClusterHostStruct(ctx context.Context,
	yandexConnectionmanagerConnectionParamsOpensearchClusterHostStruct *connectionmanager.OpenSearchCluster_Host,
	state yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsOpensearchClusterHostStruct == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModelType.AttrTypes, yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModel{
		Health: types.StringValue(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStruct.GetHealth().String()),
		Host:   types.StringValue(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStruct.GetHost()),
		Port:   types.Int64Value(int64(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStruct.GetPort())),
		Roles:  flattenYandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRoles(ctx, converter.EnumSliceToStrSlice(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStruct.GetRoles()), state.Roles, diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsOpensearchClusterHostStruct(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructState types.Object, diags *diag.Diagnostics) *connectionmanager.OpenSearchCluster_Host {
	if yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructState.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsOpensearchClusterHostStruct yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModel
	diags.Append(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructState.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchClusterHostStruct, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModel(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterHostStruct, diags)
}

func expandYandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModel(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructState yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModel, diags *diag.Diagnostics) *connectionmanager.OpenSearchCluster_Host {
	value := &connectionmanager.OpenSearchCluster_Host{}
	value.SetHealth(connectionmanager.OpenSearchCluster_Host_Health(connectionmanager.OpenSearchCluster_Host_Health_value[yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructState.Health.ValueString()]))
	value.SetHost(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructState.Host.ValueString())
	value.SetPort((yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructState.Port.ValueInt64()))
	value.SetRoles(converter.StrSliceToEnumSlice[connectionmanager.OpenSearchCluster_Host_GroupRole](connectionmanager.OpenSearchCluster_Host_GroupRole_value, expandYandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRoles(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructState.Roles, diags)))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRoles(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRoles []string, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRoles == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(types.StringType)
	}
	var yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRoles {
		val := types.StringValue(elem)
		yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesValues = append(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRoles(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesState types.List, diags *diag.Diagnostics) []string {
	if yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesState.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesState.Elements()) == 0 {
		return []string{}
	}
	yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesRes := make([]string, 0, len(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesState.Elements()))
	yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesType := make([]types.String, 0, len(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesType {
		yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesRes = append(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesRes, elem.ValueString())
	}
	return yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructRolesRes
}

type yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModel struct {
	Health      types.String `tfsdk:"health"`
	Host        types.String `tfsdk:"host"`
	Port        types.Int64  `tfsdk:"port"`
	ReplicaType types.String `tfsdk:"replica_type"`
	Role        types.String `tfsdk:"role"`
}

var yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"health":       types.StringType,
		"host":         types.StringType,
		"port":         types.Int64Type,
		"replica_type": types.StringType,
		"role":         types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsPostgresqlClusterHostStruct(ctx context.Context,
	yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStruct *connectionmanager.PostgreSQLCluster_Host,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStruct == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModelType.AttrTypes, yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModel{
		Health:      types.StringValue(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStruct.GetHealth().String()),
		Host:        types.StringValue(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStruct.GetHost()),
		Port:        types.Int64Value(int64(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStruct.GetPort())),
		ReplicaType: types.StringValue(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStruct.GetReplicaType().String()),
		Role:        types.StringValue(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStruct.GetRole().String()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlClusterHostStruct(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructState types.Object, diags *diag.Diagnostics) *connectionmanager.PostgreSQLCluster_Host {
	if yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructState.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStruct yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModel
	diags.Append(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructState.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStruct, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModel(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStruct, diags)
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModel(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructState yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModel, diags *diag.Diagnostics) *connectionmanager.PostgreSQLCluster_Host {
	value := &connectionmanager.PostgreSQLCluster_Host{}
	value.SetHealth(connectionmanager.PostgreSQLCluster_Host_Health(connectionmanager.PostgreSQLCluster_Host_Health_value[yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructState.Health.ValueString()]))
	value.SetHost(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructState.Host.ValueString())
	value.SetPort((yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructState.Port.ValueInt64()))
	value.SetReplicaType(connectionmanager.PostgreSQLCluster_Host_ReplicaType(connectionmanager.PostgreSQLCluster_Host_ReplicaType_value[yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructState.ReplicaType.ValueString()]))
	value.SetRole(connectionmanager.PostgreSQLCluster_Host_Role(connectionmanager.PostgreSQLCluster_Host_Role_value[yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructState.Role.ValueString()]))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsRedisClusterHostStructModel struct {
	Health    types.String `tfsdk:"health"`
	Host      types.String `tfsdk:"host"`
	Port      types.Int64  `tfsdk:"port"`
	Role      types.String `tfsdk:"role"`
	ShardName types.String `tfsdk:"shard_name"`
}

var yandexConnectionmanagerConnectionParamsRedisClusterHostStructModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"health":     types.StringType,
		"host":       types.StringType,
		"port":       types.Int64Type,
		"role":       types.StringType,
		"shard_name": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsRedisClusterHostStruct(ctx context.Context,
	yandexConnectionmanagerConnectionParamsRedisClusterHostStruct *connectionmanager.RedisCluster_Host,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsRedisClusterHostStruct == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsRedisClusterHostStructModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsRedisClusterHostStructModelType.AttrTypes, yandexConnectionmanagerConnectionParamsRedisClusterHostStructModel{
		Health:    types.StringValue(yandexConnectionmanagerConnectionParamsRedisClusterHostStruct.GetHealth().String()),
		Host:      types.StringValue(yandexConnectionmanagerConnectionParamsRedisClusterHostStruct.GetHost()),
		Port:      types.Int64Value(int64(yandexConnectionmanagerConnectionParamsRedisClusterHostStruct.GetPort())),
		Role:      types.StringValue(yandexConnectionmanagerConnectionParamsRedisClusterHostStruct.GetRole().String()),
		ShardName: types.StringValue(yandexConnectionmanagerConnectionParamsRedisClusterHostStruct.GetShardName()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsRedisClusterHostStruct(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisClusterHostStructState types.Object, diags *diag.Diagnostics) *connectionmanager.RedisCluster_Host {
	if yandexConnectionmanagerConnectionParamsRedisClusterHostStructState.IsNull() || yandexConnectionmanagerConnectionParamsRedisClusterHostStructState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsRedisClusterHostStruct yandexConnectionmanagerConnectionParamsRedisClusterHostStructModel
	diags.Append(yandexConnectionmanagerConnectionParamsRedisClusterHostStructState.As(ctx, &yandexConnectionmanagerConnectionParamsRedisClusterHostStruct, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsRedisClusterHostStructModel(ctx, yandexConnectionmanagerConnectionParamsRedisClusterHostStruct, diags)
}

func expandYandexConnectionmanagerConnectionParamsRedisClusterHostStructModel(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisClusterHostStructState yandexConnectionmanagerConnectionParamsRedisClusterHostStructModel, diags *diag.Diagnostics) *connectionmanager.RedisCluster_Host {
	value := &connectionmanager.RedisCluster_Host{}
	value.SetHealth(connectionmanager.RedisCluster_Host_Health(connectionmanager.RedisCluster_Host_Health_value[yandexConnectionmanagerConnectionParamsRedisClusterHostStructState.Health.ValueString()]))
	value.SetHost(yandexConnectionmanagerConnectionParamsRedisClusterHostStructState.Host.ValueString())
	value.SetPort((yandexConnectionmanagerConnectionParamsRedisClusterHostStructState.Port.ValueInt64()))
	value.SetRole(connectionmanager.RedisCluster_Host_Role(connectionmanager.RedisCluster_Host_Role_value[yandexConnectionmanagerConnectionParamsRedisClusterHostStructState.Role.ValueString()]))
	value.SetShardName(yandexConnectionmanagerConnectionParamsRedisClusterHostStructState.ShardName.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsValkeyClusterHostStructModel struct {
	Health    types.String `tfsdk:"health"`
	Host      types.String `tfsdk:"host"`
	Port      types.Int64  `tfsdk:"port"`
	Role      types.String `tfsdk:"role"`
	ShardName types.String `tfsdk:"shard_name"`
}

var yandexConnectionmanagerConnectionParamsValkeyClusterHostStructModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"health":     types.StringType,
		"host":       types.StringType,
		"port":       types.Int64Type,
		"role":       types.StringType,
		"shard_name": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsValkeyClusterHostStruct(ctx context.Context,
	yandexConnectionmanagerConnectionParamsValkeyClusterHostStruct *connectionmanager.ValkeyCluster_Host,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsValkeyClusterHostStruct == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsValkeyClusterHostStructModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterHostStructModelType.AttrTypes, yandexConnectionmanagerConnectionParamsValkeyClusterHostStructModel{
		Health:    types.StringValue(yandexConnectionmanagerConnectionParamsValkeyClusterHostStruct.GetHealth().String()),
		Host:      types.StringValue(yandexConnectionmanagerConnectionParamsValkeyClusterHostStruct.GetHost()),
		Port:      types.Int64Value(int64(yandexConnectionmanagerConnectionParamsValkeyClusterHostStruct.GetPort())),
		Role:      types.StringValue(yandexConnectionmanagerConnectionParamsValkeyClusterHostStruct.GetRole().String()),
		ShardName: types.StringValue(yandexConnectionmanagerConnectionParamsValkeyClusterHostStruct.GetShardName()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsValkeyClusterHostStruct(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyClusterHostStructState types.Object, diags *diag.Diagnostics) *connectionmanager.ValkeyCluster_Host {
	if yandexConnectionmanagerConnectionParamsValkeyClusterHostStructState.IsNull() || yandexConnectionmanagerConnectionParamsValkeyClusterHostStructState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsValkeyClusterHostStruct yandexConnectionmanagerConnectionParamsValkeyClusterHostStructModel
	diags.Append(yandexConnectionmanagerConnectionParamsValkeyClusterHostStructState.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyClusterHostStruct, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsValkeyClusterHostStructModel(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterHostStruct, diags)
}

func expandYandexConnectionmanagerConnectionParamsValkeyClusterHostStructModel(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyClusterHostStructState yandexConnectionmanagerConnectionParamsValkeyClusterHostStructModel, diags *diag.Diagnostics) *connectionmanager.ValkeyCluster_Host {
	value := &connectionmanager.ValkeyCluster_Host{}
	value.SetHealth(connectionmanager.ValkeyCluster_Host_Health(connectionmanager.ValkeyCluster_Host_Health_value[yandexConnectionmanagerConnectionParamsValkeyClusterHostStructState.Health.ValueString()]))
	value.SetHost(yandexConnectionmanagerConnectionParamsValkeyClusterHostStructState.Host.ValueString())
	value.SetPort((yandexConnectionmanagerConnectionParamsValkeyClusterHostStructState.Port.ValueInt64()))
	value.SetRole(connectionmanager.ValkeyCluster_Host_Role(connectionmanager.ValkeyCluster_Host_Role_value[yandexConnectionmanagerConnectionParamsValkeyClusterHostStructState.Role.ValueString()]))
	value.SetShardName(yandexConnectionmanagerConnectionParamsValkeyClusterHostStructState.ShardName.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionModel struct {
	CanUse        types.Bool     `tfsdk:"can_use"`
	ConnectionId  types.String   `tfsdk:"connection_id"`
	ID            types.String   `tfsdk:"id"`
	CreatedAt     types.String   `tfsdk:"created_at"`
	CreatedBy     types.String   `tfsdk:"created_by"`
	Description   types.String   `tfsdk:"description"`
	FolderId      types.String   `tfsdk:"folder_id"`
	IsManaged     types.Bool     `tfsdk:"is_managed"`
	Labels        types.Map      `tfsdk:"labels"`
	LockboxSecret types.Object   `tfsdk:"lockbox_secret"`
	Name          types.String   `tfsdk:"name"`
	Params        types.Object   `tfsdk:"params"`
	UpdatedAt     types.String   `tfsdk:"updated_at"`
	Timeouts      timeouts.Value `tfsdk:"timeouts"`
}

var yandexConnectionmanagerConnectionModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"can_use":        types.BoolType,
		"connection_id":  types.StringType,
		"id":             types.StringType,
		"created_at":     types.StringType,
		"created_by":     types.StringType,
		"description":    types.StringType,
		"folder_id":      types.StringType,
		"is_managed":     types.BoolType,
		"labels":         types.MapType{ElemType: types.StringType},
		"lockbox_secret": yandexConnectionmanagerConnectionLockboxSecretModelType,
		"name":           types.StringType,
		"params":         yandexConnectionmanagerConnectionParamsModelType,
		"updated_at":     types.StringType,
		"timeouts":       timeouts.AttributesAll(context.Background()).GetType(),
	},
}

func flattenYandexConnectionmanagerConnection(ctx context.Context,
	yandexConnectionmanagerConnection *connectionmanager.Connection,
	state yandexConnectionmanagerConnectionModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnection == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionModelType.AttrTypes, yandexConnectionmanagerConnectionModel{
		CanUse:        types.BoolValue(yandexConnectionmanagerConnection.GetCanUse().GetValue()),
		ConnectionId:  types.StringValue(yandexConnectionmanagerConnection.GetId()),
		ID:            types.StringValue(yandexConnectionmanagerConnection.GetId()),
		CreatedAt:     types.StringValue(yandexConnectionmanagerConnection.GetCreatedAt().AsTime().Format(time.RFC3339)),
		CreatedBy:     types.StringValue(yandexConnectionmanagerConnection.GetCreatedBy()),
		Description:   types.StringValue(yandexConnectionmanagerConnection.GetDescription()),
		FolderId:      types.StringValue(yandexConnectionmanagerConnection.GetFolderId()),
		IsManaged:     types.BoolValue(yandexConnectionmanagerConnection.GetIsManaged()),
		Labels:        flattenYandexConnectionmanagerConnectionLabels(ctx, yandexConnectionmanagerConnection.GetLabels(), state.Labels, diags),
		LockboxSecret: flattenYandexConnectionmanagerConnectionLockboxSecret(ctx, yandexConnectionmanagerConnection.GetLockboxSecret(), diags),
		Name:          types.StringValue(yandexConnectionmanagerConnection.GetName()),
		Params:        flattenYandexConnectionmanagerConnectionParams(ctx, yandexConnectionmanagerConnection.GetParams(), converter.ExpandObject(ctx, state.Params, yandexConnectionmanagerConnectionParamsModel{}, diags).(yandexConnectionmanagerConnectionParamsModel), diags),
		UpdatedAt:     types.StringValue(yandexConnectionmanagerConnection.GetUpdatedAt().AsTime().Format(time.RFC3339)),
		Timeouts:      to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnection(ctx context.Context, yandexConnectionmanagerConnectionState types.Object, diags *diag.Diagnostics) *connectionmanager.Connection {
	if yandexConnectionmanagerConnectionState.IsNull() || yandexConnectionmanagerConnectionState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnection yandexConnectionmanagerConnectionModel
	diags.Append(yandexConnectionmanagerConnectionState.As(ctx, &yandexConnectionmanagerConnection, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionModel(ctx, yandexConnectionmanagerConnection, diags)
}

func expandYandexConnectionmanagerConnectionModel(ctx context.Context, yandexConnectionmanagerConnectionState yandexConnectionmanagerConnectionModel, diags *diag.Diagnostics) *connectionmanager.Connection {
	value := &connectionmanager.Connection{}
	value.SetCanUse(wrapperspb.Bool(yandexConnectionmanagerConnectionState.CanUse.ValueBool()))
	value.SetId(yandexConnectionmanagerConnectionState.ConnectionId.ValueString())
	value.SetId(yandexConnectionmanagerConnectionState.ConnectionId.ValueString())
	value.SetCreatedAt(converter.ParseTimestamp(yandexConnectionmanagerConnectionState.CreatedAt.ValueString(), diags))
	value.SetCreatedBy(yandexConnectionmanagerConnectionState.CreatedBy.ValueString())
	value.SetDescription(yandexConnectionmanagerConnectionState.Description.ValueString())
	value.SetFolderId(yandexConnectionmanagerConnectionState.FolderId.ValueString())
	value.SetIsManaged(yandexConnectionmanagerConnectionState.IsManaged.ValueBool())
	value.SetLabels(expandYandexConnectionmanagerConnectionLabels(ctx, yandexConnectionmanagerConnectionState.Labels, diags))
	if !(yandexConnectionmanagerConnectionState.LockboxSecret.IsNull() || yandexConnectionmanagerConnectionState.LockboxSecret.IsUnknown() || yandexConnectionmanagerConnectionState.LockboxSecret.Equal(types.Object{})) {
		value.SetLockboxSecret(expandYandexConnectionmanagerConnectionLockboxSecret(ctx, yandexConnectionmanagerConnectionState.LockboxSecret, diags))
	}
	value.SetName(yandexConnectionmanagerConnectionState.Name.ValueString())
	value.SetParams(expandYandexConnectionmanagerConnectionParams(ctx, yandexConnectionmanagerConnectionState.Params, diags))
	value.SetUpdatedAt(converter.ParseTimestamp(yandexConnectionmanagerConnectionState.UpdatedAt.ValueString(), diags))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionLabels(ctx context.Context, yandexConnectionmanagerConnectionLabels map[string]string, listState types.Map, diags *diag.Diagnostics) types.Map {
	if yandexConnectionmanagerConnectionLabels == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.MapNull(types.StringType)
	}
	yandexConnectionmanagerConnectionLabelsValues := make(map[string]attr.Value)
	for k, elem := range yandexConnectionmanagerConnectionLabels {
		val := types.StringValue(elem)
		yandexConnectionmanagerConnectionLabelsValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexConnectionmanagerConnectionLabelsValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionLabels(ctx context.Context, yandexConnectionmanagerConnectionLabelsState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexConnectionmanagerConnectionLabelsState.IsNull() || yandexConnectionmanagerConnectionLabelsState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionLabelsState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexConnectionmanagerConnectionLabelsRes := make(map[string]string)
	yandexConnectionmanagerConnectionLabelsType := make(map[string]types.String)
	diags.Append(yandexConnectionmanagerConnectionLabelsState.ElementsAs(ctx, &yandexConnectionmanagerConnectionLabelsType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexConnectionmanagerConnectionLabelsType {
		yandexConnectionmanagerConnectionLabelsRes[k] = elem.ValueString()
	}
	return yandexConnectionmanagerConnectionLabelsRes
}

type yandexConnectionmanagerConnectionLockboxSecretModel struct {
	ConnectionId  types.String `tfsdk:"connection_id"`
	ID            types.String `tfsdk:"id"`
	NewestVersion types.String `tfsdk:"newest_version"`
	Version       types.String `tfsdk:"version"`
}

var yandexConnectionmanagerConnectionLockboxSecretModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"connection_id":  types.StringType,
		"id":             types.StringType,
		"newest_version": types.StringType,
		"version":        types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionLockboxSecret(ctx context.Context,
	yandexConnectionmanagerConnectionLockboxSecret *connectionmanager.LockboxSecret,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionLockboxSecret == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionLockboxSecretModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionLockboxSecretModelType.AttrTypes, yandexConnectionmanagerConnectionLockboxSecretModel{
		ConnectionId:  types.StringValue(yandexConnectionmanagerConnectionLockboxSecret.GetId()),
		ID:            types.StringValue(yandexConnectionmanagerConnectionLockboxSecret.GetId()),
		NewestVersion: types.StringValue(yandexConnectionmanagerConnectionLockboxSecret.GetNewestVersion()),
		Version:       types.StringValue(yandexConnectionmanagerConnectionLockboxSecret.GetVersion()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionLockboxSecret(ctx context.Context, yandexConnectionmanagerConnectionLockboxSecretState types.Object, diags *diag.Diagnostics) *connectionmanager.LockboxSecret {
	if yandexConnectionmanagerConnectionLockboxSecretState.IsNull() || yandexConnectionmanagerConnectionLockboxSecretState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionLockboxSecret yandexConnectionmanagerConnectionLockboxSecretModel
	diags.Append(yandexConnectionmanagerConnectionLockboxSecretState.As(ctx, &yandexConnectionmanagerConnectionLockboxSecret, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionLockboxSecretModel(ctx, yandexConnectionmanagerConnectionLockboxSecret, diags)
}

func expandYandexConnectionmanagerConnectionLockboxSecretModel(ctx context.Context, yandexConnectionmanagerConnectionLockboxSecretState yandexConnectionmanagerConnectionLockboxSecretModel, diags *diag.Diagnostics) *connectionmanager.LockboxSecret {
	value := &connectionmanager.LockboxSecret{}
	value.SetId(yandexConnectionmanagerConnectionLockboxSecretState.ConnectionId.ValueString())
	value.SetId(yandexConnectionmanagerConnectionLockboxSecretState.ConnectionId.ValueString())
	value.SetNewestVersion(yandexConnectionmanagerConnectionLockboxSecretState.NewestVersion.ValueString())
	value.SetVersion(yandexConnectionmanagerConnectionLockboxSecretState.Version.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsModel struct {
	Clickhouse types.Object `tfsdk:"clickhouse"`
	Greenplum  types.Object `tfsdk:"greenplum"`
	Kafka      types.Object `tfsdk:"kafka"`
	Mongodb    types.Object `tfsdk:"mongodb"`
	Mysql      types.Object `tfsdk:"mysql"`
	Opensearch types.Object `tfsdk:"opensearch"`
	Postgresql types.Object `tfsdk:"postgresql"`
	Redis      types.Object `tfsdk:"redis"`
	Trino      types.Object `tfsdk:"trino"`
	Valkey     types.Object `tfsdk:"valkey"`
}

var yandexConnectionmanagerConnectionParamsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"clickhouse": yandexConnectionmanagerConnectionParamsClickhouseModelType,
		"greenplum":  yandexConnectionmanagerConnectionParamsGreenplumModelType,
		"kafka":      yandexConnectionmanagerConnectionParamsKafkaModelType,
		"mongodb":    yandexConnectionmanagerConnectionParamsMongodbModelType,
		"mysql":      yandexConnectionmanagerConnectionParamsMysqlModelType,
		"opensearch": yandexConnectionmanagerConnectionParamsOpensearchModelType,
		"postgresql": yandexConnectionmanagerConnectionParamsPostgresqlModelType,
		"redis":      yandexConnectionmanagerConnectionParamsRedisModelType,
		"trino":      yandexConnectionmanagerConnectionParamsTrinoModelType,
		"valkey":     yandexConnectionmanagerConnectionParamsValkeyModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParams(ctx context.Context,
	yandexConnectionmanagerConnectionParams *connectionmanager.ConnectionParams,
	state yandexConnectionmanagerConnectionParamsModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParams == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsModel{
		Clickhouse: flattenYandexConnectionmanagerConnectionParamsClickhouse(ctx, yandexConnectionmanagerConnectionParams.GetClickhouse(), converter.ExpandObject(ctx, state.Clickhouse, yandexConnectionmanagerConnectionParamsClickhouseModel{}, diags).(yandexConnectionmanagerConnectionParamsClickhouseModel), diags),
		Greenplum:  flattenYandexConnectionmanagerConnectionParamsGreenplum(ctx, yandexConnectionmanagerConnectionParams.GetGreenplum(), converter.ExpandObject(ctx, state.Greenplum, yandexConnectionmanagerConnectionParamsGreenplumModel{}, diags).(yandexConnectionmanagerConnectionParamsGreenplumModel), diags),
		Kafka:      flattenYandexConnectionmanagerConnectionParamsKafka(ctx, yandexConnectionmanagerConnectionParams.GetKafka(), converter.ExpandObject(ctx, state.Kafka, yandexConnectionmanagerConnectionParamsKafkaModel{}, diags).(yandexConnectionmanagerConnectionParamsKafkaModel), diags),
		Mongodb:    flattenYandexConnectionmanagerConnectionParamsMongodb(ctx, yandexConnectionmanagerConnectionParams.GetMongodb(), converter.ExpandObject(ctx, state.Mongodb, yandexConnectionmanagerConnectionParamsMongodbModel{}, diags).(yandexConnectionmanagerConnectionParamsMongodbModel), diags),
		Mysql:      flattenYandexConnectionmanagerConnectionParamsMysql(ctx, yandexConnectionmanagerConnectionParams.GetMysql(), converter.ExpandObject(ctx, state.Mysql, yandexConnectionmanagerConnectionParamsMysqlModel{}, diags).(yandexConnectionmanagerConnectionParamsMysqlModel), diags),
		Opensearch: flattenYandexConnectionmanagerConnectionParamsOpensearch(ctx, yandexConnectionmanagerConnectionParams.GetOpensearch(), converter.ExpandObject(ctx, state.Opensearch, yandexConnectionmanagerConnectionParamsOpensearchModel{}, diags).(yandexConnectionmanagerConnectionParamsOpensearchModel), diags),
		Postgresql: flattenYandexConnectionmanagerConnectionParamsPostgresql(ctx, yandexConnectionmanagerConnectionParams.GetPostgresql(), converter.ExpandObject(ctx, state.Postgresql, yandexConnectionmanagerConnectionParamsPostgresqlModel{}, diags).(yandexConnectionmanagerConnectionParamsPostgresqlModel), diags),
		Redis:      flattenYandexConnectionmanagerConnectionParamsRedis(ctx, yandexConnectionmanagerConnectionParams.GetRedis(), converter.ExpandObject(ctx, state.Redis, yandexConnectionmanagerConnectionParamsRedisModel{}, diags).(yandexConnectionmanagerConnectionParamsRedisModel), diags),
		Trino:      flattenYandexConnectionmanagerConnectionParamsTrino(ctx, yandexConnectionmanagerConnectionParams.GetTrino(), converter.ExpandObject(ctx, state.Trino, yandexConnectionmanagerConnectionParamsTrinoModel{}, diags).(yandexConnectionmanagerConnectionParamsTrinoModel), diags),
		Valkey:     flattenYandexConnectionmanagerConnectionParamsValkey(ctx, yandexConnectionmanagerConnectionParams.GetValkey(), converter.ExpandObject(ctx, state.Valkey, yandexConnectionmanagerConnectionParamsValkeyModel{}, diags).(yandexConnectionmanagerConnectionParamsValkeyModel), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParams(ctx context.Context, yandexConnectionmanagerConnectionParamsState types.Object, diags *diag.Diagnostics) *connectionmanager.ConnectionParams {
	if yandexConnectionmanagerConnectionParamsState.IsNull() || yandexConnectionmanagerConnectionParamsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParams yandexConnectionmanagerConnectionParamsModel
	diags.Append(yandexConnectionmanagerConnectionParamsState.As(ctx, &yandexConnectionmanagerConnectionParams, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsModel(ctx, yandexConnectionmanagerConnectionParams, diags)
}

func expandYandexConnectionmanagerConnectionParamsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsState yandexConnectionmanagerConnectionParamsModel, diags *diag.Diagnostics) *connectionmanager.ConnectionParams {
	value := &connectionmanager.ConnectionParams{}
	if !(yandexConnectionmanagerConnectionParamsState.Clickhouse.IsNull() || yandexConnectionmanagerConnectionParamsState.Clickhouse.IsUnknown() || yandexConnectionmanagerConnectionParamsState.Clickhouse.Equal(types.Object{})) {
		value.SetClickhouse(expandYandexConnectionmanagerConnectionParamsClickhouse(ctx, yandexConnectionmanagerConnectionParamsState.Clickhouse, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsState.Greenplum.IsNull() || yandexConnectionmanagerConnectionParamsState.Greenplum.IsUnknown() || yandexConnectionmanagerConnectionParamsState.Greenplum.Equal(types.Object{})) {
		value.SetGreenplum(expandYandexConnectionmanagerConnectionParamsGreenplum(ctx, yandexConnectionmanagerConnectionParamsState.Greenplum, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsState.Kafka.IsNull() || yandexConnectionmanagerConnectionParamsState.Kafka.IsUnknown() || yandexConnectionmanagerConnectionParamsState.Kafka.Equal(types.Object{})) {
		value.SetKafka(expandYandexConnectionmanagerConnectionParamsKafka(ctx, yandexConnectionmanagerConnectionParamsState.Kafka, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsState.Mongodb.IsNull() || yandexConnectionmanagerConnectionParamsState.Mongodb.IsUnknown() || yandexConnectionmanagerConnectionParamsState.Mongodb.Equal(types.Object{})) {
		value.SetMongodb(expandYandexConnectionmanagerConnectionParamsMongodb(ctx, yandexConnectionmanagerConnectionParamsState.Mongodb, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsState.Mysql.IsNull() || yandexConnectionmanagerConnectionParamsState.Mysql.IsUnknown() || yandexConnectionmanagerConnectionParamsState.Mysql.Equal(types.Object{})) {
		value.SetMysql(expandYandexConnectionmanagerConnectionParamsMysql(ctx, yandexConnectionmanagerConnectionParamsState.Mysql, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsState.Opensearch.IsNull() || yandexConnectionmanagerConnectionParamsState.Opensearch.IsUnknown() || yandexConnectionmanagerConnectionParamsState.Opensearch.Equal(types.Object{})) {
		value.SetOpensearch(expandYandexConnectionmanagerConnectionParamsOpensearch(ctx, yandexConnectionmanagerConnectionParamsState.Opensearch, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsState.Postgresql.IsNull() || yandexConnectionmanagerConnectionParamsState.Postgresql.IsUnknown() || yandexConnectionmanagerConnectionParamsState.Postgresql.Equal(types.Object{})) {
		value.SetPostgresql(expandYandexConnectionmanagerConnectionParamsPostgresql(ctx, yandexConnectionmanagerConnectionParamsState.Postgresql, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsState.Redis.IsNull() || yandexConnectionmanagerConnectionParamsState.Redis.IsUnknown() || yandexConnectionmanagerConnectionParamsState.Redis.Equal(types.Object{})) {
		value.SetRedis(expandYandexConnectionmanagerConnectionParamsRedis(ctx, yandexConnectionmanagerConnectionParamsState.Redis, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsState.Trino.IsNull() || yandexConnectionmanagerConnectionParamsState.Trino.IsUnknown() || yandexConnectionmanagerConnectionParamsState.Trino.Equal(types.Object{})) {
		value.SetTrino(expandYandexConnectionmanagerConnectionParamsTrino(ctx, yandexConnectionmanagerConnectionParamsState.Trino, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsState.Valkey.IsNull() || yandexConnectionmanagerConnectionParamsState.Valkey.IsUnknown() || yandexConnectionmanagerConnectionParamsState.Valkey.Equal(types.Object{})) {
		value.SetValkey(expandYandexConnectionmanagerConnectionParamsValkey(ctx, yandexConnectionmanagerConnectionParamsState.Valkey, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsClickhouseModel struct {
	Auth             types.Object `tfsdk:"auth"`
	Cluster          types.Object `tfsdk:"cluster"`
	Databases        types.List   `tfsdk:"databases"`
	ManagedClusterId types.String `tfsdk:"managed_cluster_id"`
}

var yandexConnectionmanagerConnectionParamsClickhouseModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"auth":               yandexConnectionmanagerConnectionParamsClickhouseAuthModelType,
		"cluster":            yandexConnectionmanagerConnectionParamsClickhouseClusterModelType,
		"databases":          types.ListType{ElemType: types.StringType},
		"managed_cluster_id": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsClickhouse(ctx context.Context,
	yandexConnectionmanagerConnectionParamsClickhouse *connectionmanager.ClickHouseConnection,
	state yandexConnectionmanagerConnectionParamsClickhouseModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsClickhouse == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsClickhouseModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsClickhouseModelType.AttrTypes, yandexConnectionmanagerConnectionParamsClickhouseModel{
		Auth:             flattenYandexConnectionmanagerConnectionParamsClickhouseAuth(ctx, yandexConnectionmanagerConnectionParamsClickhouse.GetAuth(), converter.ExpandObject(ctx, state.Auth, yandexConnectionmanagerConnectionParamsClickhouseAuthModel{}, diags).(yandexConnectionmanagerConnectionParamsClickhouseAuthModel), diags),
		Cluster:          flattenYandexConnectionmanagerConnectionParamsClickhouseCluster(ctx, yandexConnectionmanagerConnectionParamsClickhouse.GetCluster(), converter.ExpandObject(ctx, state.Cluster, yandexConnectionmanagerConnectionParamsClickhouseClusterModel{}, diags).(yandexConnectionmanagerConnectionParamsClickhouseClusterModel), diags),
		Databases:        flattenYandexConnectionmanagerConnectionParamsClickhouseDatabases(ctx, yandexConnectionmanagerConnectionParamsClickhouse.GetDatabases(), state.Databases, diags),
		ManagedClusterId: types.StringValue(yandexConnectionmanagerConnectionParamsClickhouse.GetManagedClusterId()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouse(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseState types.Object, diags *diag.Diagnostics) *connectionmanager.ClickHouseConnection {
	if yandexConnectionmanagerConnectionParamsClickhouseState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsClickhouse yandexConnectionmanagerConnectionParamsClickhouseModel
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseState.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouse, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsClickhouseModel(ctx, yandexConnectionmanagerConnectionParamsClickhouse, diags)
}

func expandYandexConnectionmanagerConnectionParamsClickhouseModel(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseState yandexConnectionmanagerConnectionParamsClickhouseModel, diags *diag.Diagnostics) *connectionmanager.ClickHouseConnection {
	value := &connectionmanager.ClickHouseConnection{}
	value.SetAuth(expandYandexConnectionmanagerConnectionParamsClickhouseAuth(ctx, yandexConnectionmanagerConnectionParamsClickhouseState.Auth, diags))
	value.SetCluster(expandYandexConnectionmanagerConnectionParamsClickhouseCluster(ctx, yandexConnectionmanagerConnectionParamsClickhouseState.Cluster, diags))
	value.SetDatabases(expandYandexConnectionmanagerConnectionParamsClickhouseDatabases(ctx, yandexConnectionmanagerConnectionParamsClickhouseState.Databases, diags))
	value.SetManagedClusterId(yandexConnectionmanagerConnectionParamsClickhouseState.ManagedClusterId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsClickhouseAuthModel struct {
	UserPassword types.Object `tfsdk:"user_password"`
}

var yandexConnectionmanagerConnectionParamsClickhouseAuthModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"user_password": yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseAuth(ctx context.Context,
	yandexConnectionmanagerConnectionParamsClickhouseAuth *connectionmanager.ClickHouseAuth,
	state yandexConnectionmanagerConnectionParamsClickhouseAuthModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsClickhouseAuth == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsClickhouseAuthModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthModelType.AttrTypes, yandexConnectionmanagerConnectionParamsClickhouseAuthModel{
		UserPassword: flattenYandexConnectionmanagerConnectionParamsClickhouseAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuth.GetUserPassword(), converter.ExpandObject(ctx, state.UserPassword, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordModel), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseAuth(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseAuthState types.Object, diags *diag.Diagnostics) *connectionmanager.ClickHouseAuth {
	if yandexConnectionmanagerConnectionParamsClickhouseAuthState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseAuthState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsClickhouseAuth yandexConnectionmanagerConnectionParamsClickhouseAuthModel
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseAuthState.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuth, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsClickhouseAuthModel(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuth, diags)
}

func expandYandexConnectionmanagerConnectionParamsClickhouseAuthModel(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseAuthState yandexConnectionmanagerConnectionParamsClickhouseAuthModel, diags *diag.Diagnostics) *connectionmanager.ClickHouseAuth {
	value := &connectionmanager.ClickHouseAuth{}
	if !(yandexConnectionmanagerConnectionParamsClickhouseAuthState.UserPassword.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseAuthState.UserPassword.IsUnknown() || yandexConnectionmanagerConnectionParamsClickhouseAuthState.UserPassword.Equal(types.Object{})) {
		value.SetUserPassword(expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthState.UserPassword, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordModel struct {
	Password types.Object `tfsdk:"password"`
	User     types.String `tfsdk:"user"`
}

var yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"password": yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordModelType,
		"user":     types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseAuthUserPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsClickhouseAuthUserPassword *connectionmanager.UserPasswordAuth,
	state yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsClickhouseAuthUserPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordModel{
		Password: flattenYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPassword.GetPassword(), converter.ExpandObject(ctx, state.Password, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordModel), diags),
		User:     types.StringValue(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPassword.GetUser()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.UserPasswordAuth {
	if yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsClickhouseAuthUserPassword yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuthUserPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordModel(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordState yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordModel, diags *diag.Diagnostics) *connectionmanager.UserPasswordAuth {
	value := &connectionmanager.UserPasswordAuth{}
	value.SetPassword(expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordState.Password, diags))
	value.SetUser(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordState.User.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordModel struct {
	LockboxSecretKey          types.String `tfsdk:"lockbox_secret_key"`
	PasswordGenerationOptions types.Object `tfsdk:"password_generation_options"`
	Raw                       types.String `tfsdk:"raw"`
}

var yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"lockbox_secret_key":          types.StringType,
		"password_generation_options": yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsModelType,
		"raw":                         types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPassword *connectionmanager.Password,
	state yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordModel{
		LockboxSecretKey:          types.StringValue(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPassword.GetLockboxSecretKey()),
		PasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPassword.GetPasswordGenerationOptions(), diags),
		Raw:                       state.Raw,
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.Password {
	if yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPassword yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordModel(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordModel, diags *diag.Diagnostics) *connectionmanager.Password {
	value := &connectionmanager.Password{}
	if !(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState.LockboxSecretKey.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState.LockboxSecretKey.IsUnknown() || yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState.LockboxSecretKey.Equal(types.StringValue(""))) {
		value.SetLockboxSecretKey(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState.LockboxSecretKey.ValueString())
	}
	value.SetPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState.PasswordGenerationOptions, diags))
	value.SetRaw(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordState.Raw.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsModel struct {
	Cookie                           types.String `tfsdk:"cookie"`
	LockboxPasswordGenerationOptions types.Object `tfsdk:"lockbox_password_generation_options"`
}

var yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cookie":                              types.StringType,
		"lockbox_password_generation_options": yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptions *connectionmanager.PasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsModel{
		Cookie:                           types.StringValue(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptions.GetCookie()),
		LockboxPasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptions.GetLockboxPasswordGenerationOptions(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptions yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	value := &connectionmanager.PasswordGenerationOptions{}
	value.SetCookie(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie.ValueString())
	if !(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsUnknown() || yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.Equal(types.Object{})) {
		value.SetLockboxPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel struct {
	ExcludedPunctuation types.String `tfsdk:"excluded_punctuation"`
	IncludeDigits       types.Bool   `tfsdk:"include_digits"`
	IncludeLowercase    types.Bool   `tfsdk:"include_lowercase"`
	IncludePunctuation  types.Bool   `tfsdk:"include_punctuation"`
	IncludeUppercase    types.Bool   `tfsdk:"include_uppercase"`
	IncludedPunctuation types.String `tfsdk:"included_punctuation"`
	Length              types.Int64  `tfsdk:"length"`
}

var yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"excluded_punctuation": types.StringType,
		"include_digits":       types.BoolType,
		"include_lowercase":    types.BoolType,
		"include_punctuation":  types.BoolType,
		"include_uppercase":    types.BoolType,
		"included_punctuation": types.StringType,
		"length":               types.Int64Type,
	},
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions *connectionmanager.LockboxPasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel{
		ExcludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetExcludedPunctuation()),
		IncludeDigits:       types.BoolValue(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeDigits().GetValue()),
		IncludeLowercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeLowercase().GetValue()),
		IncludePunctuation:  types.BoolValue(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludePunctuation().GetValue()),
		IncludeUppercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeUppercase().GetValue()),
		IncludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludedPunctuation()),
		Length:              types.Int64Value(int64(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetLength())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	value := &connectionmanager.LockboxPasswordGenerationOptions{}
	value.SetExcludedPunctuation(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation.ValueString())
	value.SetIncludeDigits(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits.ValueBool()))
	value.SetIncludeLowercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase.ValueBool()))
	value.SetIncludePunctuation(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation.ValueBool()))
	value.SetIncludeUppercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase.ValueBool()))
	value.SetIncludedPunctuation(yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation.ValueString())
	value.SetLength((yandexConnectionmanagerConnectionParamsClickhouseAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsClickhouseClusterModel struct {
	Hosts       types.List   `tfsdk:"hosts"`
	ShardGroups types.List   `tfsdk:"shard_groups"`
	TlsParams   types.Object `tfsdk:"tls_params"`
}

var yandexConnectionmanagerConnectionParamsClickhouseClusterModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"hosts":        types.ListType{ElemType: yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModelType},
		"shard_groups": types.ListType{ElemType: yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModelType},
		"tls_params":   yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseCluster(ctx context.Context,
	yandexConnectionmanagerConnectionParamsClickhouseCluster *connectionmanager.ClickHouseCluster,
	state yandexConnectionmanagerConnectionParamsClickhouseClusterModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsClickhouseCluster == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsClickhouseClusterModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterModelType.AttrTypes, yandexConnectionmanagerConnectionParamsClickhouseClusterModel{
		Hosts:       flattenYandexConnectionmanagerConnectionParamsClickhouseClusterHosts(ctx, yandexConnectionmanagerConnectionParamsClickhouseCluster.GetHosts(), state.Hosts, diags),
		ShardGroups: flattenYandexConnectionmanagerConnectionParamsClickhouseClusterShardGroups(ctx, yandexConnectionmanagerConnectionParamsClickhouseCluster.GetShardGroups(), state.ShardGroups, diags),
		TlsParams:   flattenYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsClickhouseCluster.GetTlsParams(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseCluster(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterState types.Object, diags *diag.Diagnostics) *connectionmanager.ClickHouseCluster {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseClusterState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsClickhouseCluster yandexConnectionmanagerConnectionParamsClickhouseClusterModel
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseClusterState.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseCluster, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsClickhouseClusterModel(ctx, yandexConnectionmanagerConnectionParamsClickhouseCluster, diags)
}

func expandYandexConnectionmanagerConnectionParamsClickhouseClusterModel(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterState yandexConnectionmanagerConnectionParamsClickhouseClusterModel, diags *diag.Diagnostics) *connectionmanager.ClickHouseCluster {
	value := &connectionmanager.ClickHouseCluster{}
	value.SetHosts(expandYandexConnectionmanagerConnectionParamsClickhouseClusterHosts(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterState.Hosts, diags))
	value.SetShardGroups(expandYandexConnectionmanagerConnectionParamsClickhouseClusterShardGroups(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterState.ShardGroups, diags))
	value.SetTlsParams(expandYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterState.TlsParams, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterHosts []*connectionmanager.ClickHouseCluster_Host, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterHosts == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModelType)
	}
	var yandexConnectionmanagerConnectionParamsClickhouseClusterHostsValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsClickhouseClusterHosts {
		val := flattenYandexConnectionmanagerConnectionParamsClickhouseClusterHostStruct(ctx, elem, diags)
		yandexConnectionmanagerConnectionParamsClickhouseClusterHostsValues = append(yandexConnectionmanagerConnectionParamsClickhouseClusterHostsValues, val)
	}

	value, diag := types.ListValue(yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModelType, yandexConnectionmanagerConnectionParamsClickhouseClusterHostsValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterHostsState types.List, diags *diag.Diagnostics) []*connectionmanager.ClickHouseCluster_Host {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterHostsState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseClusterHostsState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsClickhouseClusterHostsState.Elements()) == 0 {
		return []*connectionmanager.ClickHouseCluster_Host{}
	}
	yandexConnectionmanagerConnectionParamsClickhouseClusterHostsRes := make([]*connectionmanager.ClickHouseCluster_Host, 0, len(yandexConnectionmanagerConnectionParamsClickhouseClusterHostsState.Elements()))
	yandexConnectionmanagerConnectionParamsClickhouseClusterHostsType := make([]yandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModel, 0, len(yandexConnectionmanagerConnectionParamsClickhouseClusterHostsState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseClusterHostsState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsClickhouseClusterHostsType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsClickhouseClusterHostsType {
		yandexConnectionmanagerConnectionParamsClickhouseClusterHostsRes = append(yandexConnectionmanagerConnectionParamsClickhouseClusterHostsRes, expandYandexConnectionmanagerConnectionParamsClickhouseClusterHostStructModel(ctx, elem, diags))
	}
	return yandexConnectionmanagerConnectionParamsClickhouseClusterHostsRes
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseClusterShardGroups(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroups []*connectionmanager.ClickHouseCluster_ShardGroup, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroups == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModelType)
	}
	if listState.IsNull() {
		listState = types.ListNull(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModelType)
	}
	stateVals := make([]yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModel, 0)
	diags.Append(listState.ElementsAs(ctx, &stateVals, false)...)
	var yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsValues []attr.Value
	for i, elem := range yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroups {
		state := yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModel{}
		if len(stateVals) > i {
			state = stateVals[i]
		}
		val := flattenYandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStruct(ctx, elem, state, diags)
		yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsValues = append(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsValues, val)
	}

	value, diag := types.ListValue(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModelType, yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseClusterShardGroups(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsState types.List, diags *diag.Diagnostics) []*connectionmanager.ClickHouseCluster_ShardGroup {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsState.Elements()) == 0 {
		return []*connectionmanager.ClickHouseCluster_ShardGroup{}
	}
	yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsRes := make([]*connectionmanager.ClickHouseCluster_ShardGroup, 0, len(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsState.Elements()))
	yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsType := make([]yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModel, 0, len(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsType {
		yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsRes = append(yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsRes, expandYandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupStructModel(ctx, elem, diags))
	}
	return yandexConnectionmanagerConnectionParamsClickhouseClusterShardGroupsRes
}

type yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsModel struct {
	Disabled types.Object `tfsdk:"disabled"`
	Tls      types.Object `tfsdk:"tls"`
}

var yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"disabled": yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledModelType,
		"tls":      yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParams(ctx context.Context,
	yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParams *connectionmanager.TLSParams,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParams == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsModel{
		Disabled: flattenYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParams.GetDisabled(), diags),
		Tls:      flattenYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParams.GetTls(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParams(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParams yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsModel
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParams, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsModel(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParams, diags)
}

func expandYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsModel, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	value := &connectionmanager.TLSParams{}
	if !(yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState.Disabled.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState.Disabled.IsUnknown() || yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState.Disabled.Equal(types.Object{})) {
		value.SetDisabled(expandYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState.Disabled, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState.Tls.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState.Tls.IsUnknown() || yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState.Tls.Equal(types.Object{})) {
		value.SetTls(expandYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsState.Tls, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledModel struct {
}

var yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{},
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabled(ctx context.Context,
	yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabled *emptypb.Empty,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabled == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledModelType.AttrTypes, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledModel{})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabled(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledState types.Object, diags *diag.Diagnostics) *emptypb.Empty {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabled yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledModel
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledState.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabled, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledModel(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabled, diags)
}

func expandYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledModel(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledState yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsDisabledModel, diags *diag.Diagnostics) *emptypb.Empty {
	value := &emptypb.Empty{}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsModel struct {
	CaCertificate types.String `tfsdk:"ca_certificate"`
}

var yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"ca_certificate": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTls(ctx context.Context,
	yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTls *connectionmanager.TLSConfig,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTls == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsModel{
		CaCertificate: types.StringValue(yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTls.GetCaCertificate()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTls(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	if yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTls yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsModel
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsState.As(ctx, &yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTls, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsModel(ctx, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTls, diags)
}

func expandYandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsState yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsModel, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	value := &connectionmanager.TLSConfig{}
	value.SetCaCertificate(yandexConnectionmanagerConnectionParamsClickhouseClusterTlsParamsTlsState.CaCertificate.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsClickhouseDatabases(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseDatabases []string, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsClickhouseDatabases == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(types.StringType)
	}
	var yandexConnectionmanagerConnectionParamsClickhouseDatabasesValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsClickhouseDatabases {
		val := types.StringValue(elem)
		yandexConnectionmanagerConnectionParamsClickhouseDatabasesValues = append(yandexConnectionmanagerConnectionParamsClickhouseDatabasesValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexConnectionmanagerConnectionParamsClickhouseDatabasesValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsClickhouseDatabases(ctx context.Context, yandexConnectionmanagerConnectionParamsClickhouseDatabasesState types.List, diags *diag.Diagnostics) []string {
	if yandexConnectionmanagerConnectionParamsClickhouseDatabasesState.IsNull() || yandexConnectionmanagerConnectionParamsClickhouseDatabasesState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsClickhouseDatabasesState.Elements()) == 0 {
		return []string{}
	}
	yandexConnectionmanagerConnectionParamsClickhouseDatabasesRes := make([]string, 0, len(yandexConnectionmanagerConnectionParamsClickhouseDatabasesState.Elements()))
	yandexConnectionmanagerConnectionParamsClickhouseDatabasesType := make([]types.String, 0, len(yandexConnectionmanagerConnectionParamsClickhouseDatabasesState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsClickhouseDatabasesState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsClickhouseDatabasesType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsClickhouseDatabasesType {
		yandexConnectionmanagerConnectionParamsClickhouseDatabasesRes = append(yandexConnectionmanagerConnectionParamsClickhouseDatabasesRes, elem.ValueString())
	}
	return yandexConnectionmanagerConnectionParamsClickhouseDatabasesRes
}

type yandexConnectionmanagerConnectionParamsGreenplumModel struct {
	Auth             types.Object `tfsdk:"auth"`
	Cluster          types.Object `tfsdk:"cluster"`
	Databases        types.List   `tfsdk:"databases"`
	ManagedClusterId types.String `tfsdk:"managed_cluster_id"`
}

var yandexConnectionmanagerConnectionParamsGreenplumModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"auth":               yandexConnectionmanagerConnectionParamsGreenplumAuthModelType,
		"cluster":            yandexConnectionmanagerConnectionParamsGreenplumClusterModelType,
		"databases":          types.ListType{ElemType: types.StringType},
		"managed_cluster_id": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsGreenplum(ctx context.Context,
	yandexConnectionmanagerConnectionParamsGreenplum *connectionmanager.GreenplumConnection,
	state yandexConnectionmanagerConnectionParamsGreenplumModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsGreenplum == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsGreenplumModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsGreenplumModelType.AttrTypes, yandexConnectionmanagerConnectionParamsGreenplumModel{
		Auth:             flattenYandexConnectionmanagerConnectionParamsGreenplumAuth(ctx, yandexConnectionmanagerConnectionParamsGreenplum.GetAuth(), converter.ExpandObject(ctx, state.Auth, yandexConnectionmanagerConnectionParamsGreenplumAuthModel{}, diags).(yandexConnectionmanagerConnectionParamsGreenplumAuthModel), diags),
		Cluster:          flattenYandexConnectionmanagerConnectionParamsGreenplumCluster(ctx, yandexConnectionmanagerConnectionParamsGreenplum.GetCluster(), converter.ExpandObject(ctx, state.Cluster, yandexConnectionmanagerConnectionParamsGreenplumClusterModel{}, diags).(yandexConnectionmanagerConnectionParamsGreenplumClusterModel), diags),
		Databases:        flattenYandexConnectionmanagerConnectionParamsGreenplumDatabases(ctx, yandexConnectionmanagerConnectionParamsGreenplum.GetDatabases(), state.Databases, diags),
		ManagedClusterId: types.StringValue(yandexConnectionmanagerConnectionParamsGreenplum.GetManagedClusterId()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsGreenplum(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumState types.Object, diags *diag.Diagnostics) *connectionmanager.GreenplumConnection {
	if yandexConnectionmanagerConnectionParamsGreenplumState.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsGreenplum yandexConnectionmanagerConnectionParamsGreenplumModel
	diags.Append(yandexConnectionmanagerConnectionParamsGreenplumState.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplum, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsGreenplumModel(ctx, yandexConnectionmanagerConnectionParamsGreenplum, diags)
}

func expandYandexConnectionmanagerConnectionParamsGreenplumModel(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumState yandexConnectionmanagerConnectionParamsGreenplumModel, diags *diag.Diagnostics) *connectionmanager.GreenplumConnection {
	value := &connectionmanager.GreenplumConnection{}
	value.SetAuth(expandYandexConnectionmanagerConnectionParamsGreenplumAuth(ctx, yandexConnectionmanagerConnectionParamsGreenplumState.Auth, diags))
	value.SetCluster(expandYandexConnectionmanagerConnectionParamsGreenplumCluster(ctx, yandexConnectionmanagerConnectionParamsGreenplumState.Cluster, diags))
	value.SetDatabases(expandYandexConnectionmanagerConnectionParamsGreenplumDatabases(ctx, yandexConnectionmanagerConnectionParamsGreenplumState.Databases, diags))
	value.SetManagedClusterId(yandexConnectionmanagerConnectionParamsGreenplumState.ManagedClusterId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsGreenplumAuthModel struct {
	UserPassword types.Object `tfsdk:"user_password"`
}

var yandexConnectionmanagerConnectionParamsGreenplumAuthModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"user_password": yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsGreenplumAuth(ctx context.Context,
	yandexConnectionmanagerConnectionParamsGreenplumAuth *connectionmanager.GreenplumAuth,
	state yandexConnectionmanagerConnectionParamsGreenplumAuthModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsGreenplumAuth == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsGreenplumAuthModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthModelType.AttrTypes, yandexConnectionmanagerConnectionParamsGreenplumAuthModel{
		UserPassword: flattenYandexConnectionmanagerConnectionParamsGreenplumAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuth.GetUserPassword(), converter.ExpandObject(ctx, state.UserPassword, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordModel), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsGreenplumAuth(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumAuthState types.Object, diags *diag.Diagnostics) *connectionmanager.GreenplumAuth {
	if yandexConnectionmanagerConnectionParamsGreenplumAuthState.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumAuthState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsGreenplumAuth yandexConnectionmanagerConnectionParamsGreenplumAuthModel
	diags.Append(yandexConnectionmanagerConnectionParamsGreenplumAuthState.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuth, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsGreenplumAuthModel(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuth, diags)
}

func expandYandexConnectionmanagerConnectionParamsGreenplumAuthModel(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumAuthState yandexConnectionmanagerConnectionParamsGreenplumAuthModel, diags *diag.Diagnostics) *connectionmanager.GreenplumAuth {
	value := &connectionmanager.GreenplumAuth{}
	if !(yandexConnectionmanagerConnectionParamsGreenplumAuthState.UserPassword.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumAuthState.UserPassword.IsUnknown() || yandexConnectionmanagerConnectionParamsGreenplumAuthState.UserPassword.Equal(types.Object{})) {
		value.SetUserPassword(expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthState.UserPassword, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordModel struct {
	Password types.Object `tfsdk:"password"`
	User     types.String `tfsdk:"user"`
}

var yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"password": yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordModelType,
		"user":     types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsGreenplumAuthUserPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsGreenplumAuthUserPassword *connectionmanager.UserPasswordAuth,
	state yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsGreenplumAuthUserPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordModel{
		Password: flattenYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPassword.GetPassword(), converter.ExpandObject(ctx, state.Password, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordModel), diags),
		User:     types.StringValue(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPassword.GetUser()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.UserPasswordAuth {
	if yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsGreenplumAuthUserPassword yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuthUserPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordModel(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordState yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordModel, diags *diag.Diagnostics) *connectionmanager.UserPasswordAuth {
	value := &connectionmanager.UserPasswordAuth{}
	value.SetPassword(expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordState.Password, diags))
	value.SetUser(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordState.User.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordModel struct {
	LockboxSecretKey          types.String `tfsdk:"lockbox_secret_key"`
	PasswordGenerationOptions types.Object `tfsdk:"password_generation_options"`
	Raw                       types.String `tfsdk:"raw"`
}

var yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"lockbox_secret_key":          types.StringType,
		"password_generation_options": yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsModelType,
		"raw":                         types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPassword *connectionmanager.Password,
	state yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordModel{
		LockboxSecretKey:          types.StringValue(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPassword.GetLockboxSecretKey()),
		PasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPassword.GetPasswordGenerationOptions(), diags),
		Raw:                       state.Raw,
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.Password {
	if yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPassword yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordModel(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordModel, diags *diag.Diagnostics) *connectionmanager.Password {
	value := &connectionmanager.Password{}
	if !(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState.LockboxSecretKey.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState.LockboxSecretKey.IsUnknown() || yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState.LockboxSecretKey.Equal(types.StringValue(""))) {
		value.SetLockboxSecretKey(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState.LockboxSecretKey.ValueString())
	}
	value.SetPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState.PasswordGenerationOptions, diags))
	value.SetRaw(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordState.Raw.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsModel struct {
	Cookie                           types.String `tfsdk:"cookie"`
	LockboxPasswordGenerationOptions types.Object `tfsdk:"lockbox_password_generation_options"`
}

var yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cookie":                              types.StringType,
		"lockbox_password_generation_options": yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptions *connectionmanager.PasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsModel{
		Cookie:                           types.StringValue(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptions.GetCookie()),
		LockboxPasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptions.GetLockboxPasswordGenerationOptions(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptions yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	value := &connectionmanager.PasswordGenerationOptions{}
	value.SetCookie(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie.ValueString())
	if !(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsUnknown() || yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.Equal(types.Object{})) {
		value.SetLockboxPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel struct {
	ExcludedPunctuation types.String `tfsdk:"excluded_punctuation"`
	IncludeDigits       types.Bool   `tfsdk:"include_digits"`
	IncludeLowercase    types.Bool   `tfsdk:"include_lowercase"`
	IncludePunctuation  types.Bool   `tfsdk:"include_punctuation"`
	IncludeUppercase    types.Bool   `tfsdk:"include_uppercase"`
	IncludedPunctuation types.String `tfsdk:"included_punctuation"`
	Length              types.Int64  `tfsdk:"length"`
}

var yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"excluded_punctuation": types.StringType,
		"include_digits":       types.BoolType,
		"include_lowercase":    types.BoolType,
		"include_punctuation":  types.BoolType,
		"include_uppercase":    types.BoolType,
		"included_punctuation": types.StringType,
		"length":               types.Int64Type,
	},
}

func flattenYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions *connectionmanager.LockboxPasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel{
		ExcludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetExcludedPunctuation()),
		IncludeDigits:       types.BoolValue(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeDigits().GetValue()),
		IncludeLowercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeLowercase().GetValue()),
		IncludePunctuation:  types.BoolValue(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludePunctuation().GetValue()),
		IncludeUppercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeUppercase().GetValue()),
		IncludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludedPunctuation()),
		Length:              types.Int64Value(int64(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetLength())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	value := &connectionmanager.LockboxPasswordGenerationOptions{}
	value.SetExcludedPunctuation(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation.ValueString())
	value.SetIncludeDigits(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits.ValueBool()))
	value.SetIncludeLowercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase.ValueBool()))
	value.SetIncludePunctuation(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation.ValueBool()))
	value.SetIncludeUppercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase.ValueBool()))
	value.SetIncludedPunctuation(yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation.ValueString())
	value.SetLength((yandexConnectionmanagerConnectionParamsGreenplumAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsGreenplumClusterModel struct {
	CoordinatorHosts types.List   `tfsdk:"coordinator_hosts"`
	TlsParams        types.Object `tfsdk:"tls_params"`
}

var yandexConnectionmanagerConnectionParamsGreenplumClusterModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"coordinator_hosts": types.ListType{ElemType: yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModelType},
		"tls_params":        yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsGreenplumCluster(ctx context.Context,
	yandexConnectionmanagerConnectionParamsGreenplumCluster *connectionmanager.GreenplumCluster,
	state yandexConnectionmanagerConnectionParamsGreenplumClusterModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsGreenplumCluster == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsGreenplumClusterModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterModelType.AttrTypes, yandexConnectionmanagerConnectionParamsGreenplumClusterModel{
		CoordinatorHosts: flattenYandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHosts(ctx, yandexConnectionmanagerConnectionParamsGreenplumCluster.GetCoordinatorHosts(), state.CoordinatorHosts, diags),
		TlsParams:        flattenYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsGreenplumCluster.GetTlsParams(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsGreenplumCluster(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumClusterState types.Object, diags *diag.Diagnostics) *connectionmanager.GreenplumCluster {
	if yandexConnectionmanagerConnectionParamsGreenplumClusterState.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumClusterState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsGreenplumCluster yandexConnectionmanagerConnectionParamsGreenplumClusterModel
	diags.Append(yandexConnectionmanagerConnectionParamsGreenplumClusterState.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumCluster, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsGreenplumClusterModel(ctx, yandexConnectionmanagerConnectionParamsGreenplumCluster, diags)
}

func expandYandexConnectionmanagerConnectionParamsGreenplumClusterModel(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumClusterState yandexConnectionmanagerConnectionParamsGreenplumClusterModel, diags *diag.Diagnostics) *connectionmanager.GreenplumCluster {
	value := &connectionmanager.GreenplumCluster{}
	value.SetCoordinatorHosts(expandYandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHosts(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterState.CoordinatorHosts, diags))
	value.SetTlsParams(expandYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterState.TlsParams, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHosts []*connectionmanager.GreenplumCluster_Host, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHosts == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModelType)
	}
	var yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHosts {
		val := flattenYandexConnectionmanagerConnectionParamsGreenplumClusterHostStruct(ctx, elem, diags)
		yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsValues = append(yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsValues, val)
	}

	value, diag := types.ListValue(yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModelType, yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsState types.List, diags *diag.Diagnostics) []*connectionmanager.GreenplumCluster_Host {
	if yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsState.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsState.Elements()) == 0 {
		return []*connectionmanager.GreenplumCluster_Host{}
	}
	yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsRes := make([]*connectionmanager.GreenplumCluster_Host, 0, len(yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsState.Elements()))
	yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsType := make([]yandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModel, 0, len(yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsType {
		yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsRes = append(yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsRes, expandYandexConnectionmanagerConnectionParamsGreenplumClusterHostStructModel(ctx, elem, diags))
	}
	return yandexConnectionmanagerConnectionParamsGreenplumClusterCoordinatorHostsRes
}

type yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsModel struct {
	Disabled types.Object `tfsdk:"disabled"`
	Tls      types.Object `tfsdk:"tls"`
}

var yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"disabled": yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledModelType,
		"tls":      yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParams(ctx context.Context,
	yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParams *connectionmanager.TLSParams,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParams == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsModel{
		Disabled: flattenYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParams.GetDisabled(), diags),
		Tls:      flattenYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParams.GetTls(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParams(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	if yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParams yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsModel
	diags.Append(yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParams, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsModel(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParams, diags)
}

func expandYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsModel, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	value := &connectionmanager.TLSParams{}
	if !(yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState.Disabled.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState.Disabled.IsUnknown() || yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState.Disabled.Equal(types.Object{})) {
		value.SetDisabled(expandYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState.Disabled, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState.Tls.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState.Tls.IsUnknown() || yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState.Tls.Equal(types.Object{})) {
		value.SetTls(expandYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsState.Tls, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledModel struct {
}

var yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{},
}

func flattenYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabled(ctx context.Context,
	yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabled *emptypb.Empty,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabled == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledModelType.AttrTypes, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledModel{})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabled(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledState types.Object, diags *diag.Diagnostics) *emptypb.Empty {
	if yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledState.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabled yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledModel
	diags.Append(yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledState.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabled, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledModel(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabled, diags)
}

func expandYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledModel(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledState yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsDisabledModel, diags *diag.Diagnostics) *emptypb.Empty {
	value := &emptypb.Empty{}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsModel struct {
	CaCertificate types.String `tfsdk:"ca_certificate"`
}

var yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"ca_certificate": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTls(ctx context.Context,
	yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTls *connectionmanager.TLSConfig,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTls == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsModel{
		CaCertificate: types.StringValue(yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTls.GetCaCertificate()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTls(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	if yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsState.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTls yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsModel
	diags.Append(yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsState.As(ctx, &yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTls, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsModel(ctx, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTls, diags)
}

func expandYandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsState yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsModel, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	value := &connectionmanager.TLSConfig{}
	value.SetCaCertificate(yandexConnectionmanagerConnectionParamsGreenplumClusterTlsParamsTlsState.CaCertificate.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsGreenplumDatabases(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumDatabases []string, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsGreenplumDatabases == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(types.StringType)
	}
	var yandexConnectionmanagerConnectionParamsGreenplumDatabasesValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsGreenplumDatabases {
		val := types.StringValue(elem)
		yandexConnectionmanagerConnectionParamsGreenplumDatabasesValues = append(yandexConnectionmanagerConnectionParamsGreenplumDatabasesValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexConnectionmanagerConnectionParamsGreenplumDatabasesValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsGreenplumDatabases(ctx context.Context, yandexConnectionmanagerConnectionParamsGreenplumDatabasesState types.List, diags *diag.Diagnostics) []string {
	if yandexConnectionmanagerConnectionParamsGreenplumDatabasesState.IsNull() || yandexConnectionmanagerConnectionParamsGreenplumDatabasesState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsGreenplumDatabasesState.Elements()) == 0 {
		return []string{}
	}
	yandexConnectionmanagerConnectionParamsGreenplumDatabasesRes := make([]string, 0, len(yandexConnectionmanagerConnectionParamsGreenplumDatabasesState.Elements()))
	yandexConnectionmanagerConnectionParamsGreenplumDatabasesType := make([]types.String, 0, len(yandexConnectionmanagerConnectionParamsGreenplumDatabasesState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsGreenplumDatabasesState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsGreenplumDatabasesType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsGreenplumDatabasesType {
		yandexConnectionmanagerConnectionParamsGreenplumDatabasesRes = append(yandexConnectionmanagerConnectionParamsGreenplumDatabasesRes, elem.ValueString())
	}
	return yandexConnectionmanagerConnectionParamsGreenplumDatabasesRes
}

type yandexConnectionmanagerConnectionParamsKafkaModel struct {
	Auth             types.Object `tfsdk:"auth"`
	Cluster          types.Object `tfsdk:"cluster"`
	ManagedClusterId types.String `tfsdk:"managed_cluster_id"`
}

var yandexConnectionmanagerConnectionParamsKafkaModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"auth":               yandexConnectionmanagerConnectionParamsKafkaAuthModelType,
		"cluster":            yandexConnectionmanagerConnectionParamsKafkaClusterModelType,
		"managed_cluster_id": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsKafka(ctx context.Context,
	yandexConnectionmanagerConnectionParamsKafka *connectionmanager.KafkaConnection,
	state yandexConnectionmanagerConnectionParamsKafkaModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsKafka == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsKafkaModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsKafkaModelType.AttrTypes, yandexConnectionmanagerConnectionParamsKafkaModel{
		Auth:             flattenYandexConnectionmanagerConnectionParamsKafkaAuth(ctx, yandexConnectionmanagerConnectionParamsKafka.GetAuth(), converter.ExpandObject(ctx, state.Auth, yandexConnectionmanagerConnectionParamsKafkaAuthModel{}, diags).(yandexConnectionmanagerConnectionParamsKafkaAuthModel), diags),
		Cluster:          flattenYandexConnectionmanagerConnectionParamsKafkaCluster(ctx, yandexConnectionmanagerConnectionParamsKafka.GetCluster(), converter.ExpandObject(ctx, state.Cluster, yandexConnectionmanagerConnectionParamsKafkaClusterModel{}, diags).(yandexConnectionmanagerConnectionParamsKafkaClusterModel), diags),
		ManagedClusterId: types.StringValue(yandexConnectionmanagerConnectionParamsKafka.GetManagedClusterId()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsKafka(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaState types.Object, diags *diag.Diagnostics) *connectionmanager.KafkaConnection {
	if yandexConnectionmanagerConnectionParamsKafkaState.IsNull() || yandexConnectionmanagerConnectionParamsKafkaState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsKafka yandexConnectionmanagerConnectionParamsKafkaModel
	diags.Append(yandexConnectionmanagerConnectionParamsKafkaState.As(ctx, &yandexConnectionmanagerConnectionParamsKafka, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsKafkaModel(ctx, yandexConnectionmanagerConnectionParamsKafka, diags)
}

func expandYandexConnectionmanagerConnectionParamsKafkaModel(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaState yandexConnectionmanagerConnectionParamsKafkaModel, diags *diag.Diagnostics) *connectionmanager.KafkaConnection {
	value := &connectionmanager.KafkaConnection{}
	value.SetAuth(expandYandexConnectionmanagerConnectionParamsKafkaAuth(ctx, yandexConnectionmanagerConnectionParamsKafkaState.Auth, diags))
	value.SetCluster(expandYandexConnectionmanagerConnectionParamsKafkaCluster(ctx, yandexConnectionmanagerConnectionParamsKafkaState.Cluster, diags))
	value.SetManagedClusterId(yandexConnectionmanagerConnectionParamsKafkaState.ManagedClusterId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsKafkaAuthModel struct {
	Disabled types.Object `tfsdk:"disabled"`
	Sasl     types.Object `tfsdk:"sasl"`
}

var yandexConnectionmanagerConnectionParamsKafkaAuthModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"disabled": yandexConnectionmanagerConnectionParamsKafkaAuthDisabledModelType,
		"sasl":     yandexConnectionmanagerConnectionParamsKafkaAuthSaslModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsKafkaAuth(ctx context.Context,
	yandexConnectionmanagerConnectionParamsKafkaAuth *connectionmanager.KafkaAuth,
	state yandexConnectionmanagerConnectionParamsKafkaAuthModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsKafkaAuth == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsKafkaAuthModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthModelType.AttrTypes, yandexConnectionmanagerConnectionParamsKafkaAuthModel{
		Disabled: flattenYandexConnectionmanagerConnectionParamsKafkaAuthDisabled(ctx, yandexConnectionmanagerConnectionParamsKafkaAuth.GetDisabled(), diags),
		Sasl:     flattenYandexConnectionmanagerConnectionParamsKafkaAuthSasl(ctx, yandexConnectionmanagerConnectionParamsKafkaAuth.GetSasl(), converter.ExpandObject(ctx, state.Sasl, yandexConnectionmanagerConnectionParamsKafkaAuthSaslModel{}, diags).(yandexConnectionmanagerConnectionParamsKafkaAuthSaslModel), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsKafkaAuth(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaAuthState types.Object, diags *diag.Diagnostics) *connectionmanager.KafkaAuth {
	if yandexConnectionmanagerConnectionParamsKafkaAuthState.IsNull() || yandexConnectionmanagerConnectionParamsKafkaAuthState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsKafkaAuth yandexConnectionmanagerConnectionParamsKafkaAuthModel
	diags.Append(yandexConnectionmanagerConnectionParamsKafkaAuthState.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuth, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsKafkaAuthModel(ctx, yandexConnectionmanagerConnectionParamsKafkaAuth, diags)
}

func expandYandexConnectionmanagerConnectionParamsKafkaAuthModel(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaAuthState yandexConnectionmanagerConnectionParamsKafkaAuthModel, diags *diag.Diagnostics) *connectionmanager.KafkaAuth {
	value := &connectionmanager.KafkaAuth{}
	if !(yandexConnectionmanagerConnectionParamsKafkaAuthState.Disabled.IsNull() || yandexConnectionmanagerConnectionParamsKafkaAuthState.Disabled.IsUnknown() || yandexConnectionmanagerConnectionParamsKafkaAuthState.Disabled.Equal(types.Object{})) {
		value.SetDisabled(expandYandexConnectionmanagerConnectionParamsKafkaAuthDisabled(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthState.Disabled, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsKafkaAuthState.Sasl.IsNull() || yandexConnectionmanagerConnectionParamsKafkaAuthState.Sasl.IsUnknown() || yandexConnectionmanagerConnectionParamsKafkaAuthState.Sasl.Equal(types.Object{})) {
		value.SetSasl(expandYandexConnectionmanagerConnectionParamsKafkaAuthSasl(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthState.Sasl, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsKafkaAuthDisabledModel struct {
}

var yandexConnectionmanagerConnectionParamsKafkaAuthDisabledModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{},
}

func flattenYandexConnectionmanagerConnectionParamsKafkaAuthDisabled(ctx context.Context,
	yandexConnectionmanagerConnectionParamsKafkaAuthDisabled *emptypb.Empty,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsKafkaAuthDisabled == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsKafkaAuthDisabledModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthDisabledModelType.AttrTypes, yandexConnectionmanagerConnectionParamsKafkaAuthDisabledModel{})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsKafkaAuthDisabled(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaAuthDisabledState types.Object, diags *diag.Diagnostics) *emptypb.Empty {
	if yandexConnectionmanagerConnectionParamsKafkaAuthDisabledState.IsNull() || yandexConnectionmanagerConnectionParamsKafkaAuthDisabledState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsKafkaAuthDisabled yandexConnectionmanagerConnectionParamsKafkaAuthDisabledModel
	diags.Append(yandexConnectionmanagerConnectionParamsKafkaAuthDisabledState.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthDisabled, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsKafkaAuthDisabledModel(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthDisabled, diags)
}

func expandYandexConnectionmanagerConnectionParamsKafkaAuthDisabledModel(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaAuthDisabledState yandexConnectionmanagerConnectionParamsKafkaAuthDisabledModel, diags *diag.Diagnostics) *emptypb.Empty {
	value := &emptypb.Empty{}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsKafkaAuthSaslModel struct {
	Password            types.Object `tfsdk:"password"`
	SupportedMechanisms types.List   `tfsdk:"supported_mechanisms"`
	User                types.String `tfsdk:"user"`
}

var yandexConnectionmanagerConnectionParamsKafkaAuthSaslModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"password":             yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordModelType,
		"supported_mechanisms": types.ListType{ElemType: types.StringType},
		"user":                 types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsKafkaAuthSasl(ctx context.Context,
	yandexConnectionmanagerConnectionParamsKafkaAuthSasl *connectionmanager.KafkaSaslSecurity,
	state yandexConnectionmanagerConnectionParamsKafkaAuthSaslModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsKafkaAuthSasl == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsKafkaAuthSaslModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSaslModelType.AttrTypes, yandexConnectionmanagerConnectionParamsKafkaAuthSaslModel{
		Password:            flattenYandexConnectionmanagerConnectionParamsKafkaAuthSaslPassword(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSasl.GetPassword(), converter.ExpandObject(ctx, state.Password, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordModel), diags),
		SupportedMechanisms: flattenYandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanisms(ctx, converter.EnumSliceToStrSlice(yandexConnectionmanagerConnectionParamsKafkaAuthSasl.GetSupportedMechanisms()), state.SupportedMechanisms, diags),
		User:                types.StringValue(yandexConnectionmanagerConnectionParamsKafkaAuthSasl.GetUser()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsKafkaAuthSasl(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaAuthSaslState types.Object, diags *diag.Diagnostics) *connectionmanager.KafkaSaslSecurity {
	if yandexConnectionmanagerConnectionParamsKafkaAuthSaslState.IsNull() || yandexConnectionmanagerConnectionParamsKafkaAuthSaslState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsKafkaAuthSasl yandexConnectionmanagerConnectionParamsKafkaAuthSaslModel
	diags.Append(yandexConnectionmanagerConnectionParamsKafkaAuthSaslState.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthSasl, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslModel(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSasl, diags)
}

func expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslModel(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaAuthSaslState yandexConnectionmanagerConnectionParamsKafkaAuthSaslModel, diags *diag.Diagnostics) *connectionmanager.KafkaSaslSecurity {
	value := &connectionmanager.KafkaSaslSecurity{}
	value.SetPassword(expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslPassword(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSaslState.Password, diags))
	value.SetSupportedMechanisms(converter.StrSliceToEnumSlice[connectionmanager.KafkaSaslSecurity_Mechanism](connectionmanager.KafkaSaslSecurity_Mechanism_value, expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanisms(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSaslState.SupportedMechanisms, diags)))
	value.SetUser(yandexConnectionmanagerConnectionParamsKafkaAuthSaslState.User.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordModel struct {
	LockboxSecretKey          types.String `tfsdk:"lockbox_secret_key"`
	PasswordGenerationOptions types.Object `tfsdk:"password_generation_options"`
	Raw                       types.String `tfsdk:"raw"`
}

var yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"lockbox_secret_key":          types.StringType,
		"password_generation_options": yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsModelType,
		"raw":                         types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsKafkaAuthSaslPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsKafkaAuthSaslPassword *connectionmanager.Password,
	state yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsKafkaAuthSaslPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordModel{
		LockboxSecretKey:          types.StringValue(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPassword.GetLockboxSecretKey()),
		PasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPassword.GetPasswordGenerationOptions(), diags),
		Raw:                       state.Raw,
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.Password {
	if yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsKafkaAuthSaslPassword yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthSaslPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordModel(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordModel, diags *diag.Diagnostics) *connectionmanager.Password {
	value := &connectionmanager.Password{}
	if !(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState.LockboxSecretKey.IsNull() || yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState.LockboxSecretKey.IsUnknown() || yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState.LockboxSecretKey.Equal(types.StringValue(""))) {
		value.SetLockboxSecretKey(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState.LockboxSecretKey.ValueString())
	}
	value.SetPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState.PasswordGenerationOptions, diags))
	value.SetRaw(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordState.Raw.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsModel struct {
	Cookie                           types.String `tfsdk:"cookie"`
	LockboxPasswordGenerationOptions types.Object `tfsdk:"lockbox_password_generation_options"`
}

var yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cookie":                              types.StringType,
		"lockbox_password_generation_options": yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptions *connectionmanager.PasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsModel{
		Cookie:                           types.StringValue(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptions.GetCookie()),
		LockboxPasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptions.GetLockboxPasswordGenerationOptions(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptions yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	value := &connectionmanager.PasswordGenerationOptions{}
	value.SetCookie(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsState.Cookie.ValueString())
	if !(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsNull() || yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsUnknown() || yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.Equal(types.Object{})) {
		value.SetLockboxPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel struct {
	ExcludedPunctuation types.String `tfsdk:"excluded_punctuation"`
	IncludeDigits       types.Bool   `tfsdk:"include_digits"`
	IncludeLowercase    types.Bool   `tfsdk:"include_lowercase"`
	IncludePunctuation  types.Bool   `tfsdk:"include_punctuation"`
	IncludeUppercase    types.Bool   `tfsdk:"include_uppercase"`
	IncludedPunctuation types.String `tfsdk:"included_punctuation"`
	Length              types.Int64  `tfsdk:"length"`
}

var yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"excluded_punctuation": types.StringType,
		"include_digits":       types.BoolType,
		"include_lowercase":    types.BoolType,
		"include_punctuation":  types.BoolType,
		"include_uppercase":    types.BoolType,
		"included_punctuation": types.StringType,
		"length":               types.Int64Type,
	},
}

func flattenYandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions *connectionmanager.LockboxPasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel{
		ExcludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetExcludedPunctuation()),
		IncludeDigits:       types.BoolValue(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeDigits().GetValue()),
		IncludeLowercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeLowercase().GetValue()),
		IncludePunctuation:  types.BoolValue(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludePunctuation().GetValue()),
		IncludeUppercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeUppercase().GetValue()),
		IncludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludedPunctuation()),
		Length:              types.Int64Value(int64(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetLength())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	value := &connectionmanager.LockboxPasswordGenerationOptions{}
	value.SetExcludedPunctuation(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation.ValueString())
	value.SetIncludeDigits(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits.ValueBool()))
	value.SetIncludeLowercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase.ValueBool()))
	value.SetIncludePunctuation(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation.ValueBool()))
	value.SetIncludeUppercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase.ValueBool()))
	value.SetIncludedPunctuation(yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation.ValueString())
	value.SetLength((yandexConnectionmanagerConnectionParamsKafkaAuthSaslPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanisms(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanisms []string, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanisms == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(types.StringType)
	}
	var yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanisms {
		val := types.StringValue(elem)
		yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsValues = append(yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanisms(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsState types.List, diags *diag.Diagnostics) []string {
	if yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsState.IsNull() || yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsState.Elements()) == 0 {
		return []string{}
	}
	yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsRes := make([]string, 0, len(yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsState.Elements()))
	yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsType := make([]types.String, 0, len(yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsType {
		yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsRes = append(yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsRes, elem.ValueString())
	}
	return yandexConnectionmanagerConnectionParamsKafkaAuthSaslSupportedMechanismsRes
}

type yandexConnectionmanagerConnectionParamsKafkaClusterModel struct {
	Hosts     types.List   `tfsdk:"hosts"`
	TlsParams types.Object `tfsdk:"tls_params"`
}

var yandexConnectionmanagerConnectionParamsKafkaClusterModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"hosts":      types.ListType{ElemType: yandexConnectionmanagerConnectionParamsKafkaClusterHostStructModelType},
		"tls_params": yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsKafkaCluster(ctx context.Context,
	yandexConnectionmanagerConnectionParamsKafkaCluster *connectionmanager.KafkaCluster,
	state yandexConnectionmanagerConnectionParamsKafkaClusterModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsKafkaCluster == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsKafkaClusterModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterModelType.AttrTypes, yandexConnectionmanagerConnectionParamsKafkaClusterModel{
		Hosts:     flattenYandexConnectionmanagerConnectionParamsKafkaClusterHosts(ctx, yandexConnectionmanagerConnectionParamsKafkaCluster.GetHosts(), state.Hosts, diags),
		TlsParams: flattenYandexConnectionmanagerConnectionParamsKafkaClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsKafkaCluster.GetTlsParams(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsKafkaCluster(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaClusterState types.Object, diags *diag.Diagnostics) *connectionmanager.KafkaCluster {
	if yandexConnectionmanagerConnectionParamsKafkaClusterState.IsNull() || yandexConnectionmanagerConnectionParamsKafkaClusterState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsKafkaCluster yandexConnectionmanagerConnectionParamsKafkaClusterModel
	diags.Append(yandexConnectionmanagerConnectionParamsKafkaClusterState.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaCluster, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsKafkaClusterModel(ctx, yandexConnectionmanagerConnectionParamsKafkaCluster, diags)
}

func expandYandexConnectionmanagerConnectionParamsKafkaClusterModel(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaClusterState yandexConnectionmanagerConnectionParamsKafkaClusterModel, diags *diag.Diagnostics) *connectionmanager.KafkaCluster {
	value := &connectionmanager.KafkaCluster{}
	value.SetHosts(expandYandexConnectionmanagerConnectionParamsKafkaClusterHosts(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterState.Hosts, diags))
	value.SetTlsParams(expandYandexConnectionmanagerConnectionParamsKafkaClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterState.TlsParams, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsKafkaClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaClusterHosts []*connectionmanager.KafkaCluster_Host, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsKafkaClusterHosts == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(yandexConnectionmanagerConnectionParamsKafkaClusterHostStructModelType)
	}
	var yandexConnectionmanagerConnectionParamsKafkaClusterHostsValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsKafkaClusterHosts {
		val := flattenYandexConnectionmanagerConnectionParamsKafkaClusterHostStruct(ctx, elem, diags)
		yandexConnectionmanagerConnectionParamsKafkaClusterHostsValues = append(yandexConnectionmanagerConnectionParamsKafkaClusterHostsValues, val)
	}

	value, diag := types.ListValue(yandexConnectionmanagerConnectionParamsKafkaClusterHostStructModelType, yandexConnectionmanagerConnectionParamsKafkaClusterHostsValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsKafkaClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaClusterHostsState types.List, diags *diag.Diagnostics) []*connectionmanager.KafkaCluster_Host {
	if yandexConnectionmanagerConnectionParamsKafkaClusterHostsState.IsNull() || yandexConnectionmanagerConnectionParamsKafkaClusterHostsState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsKafkaClusterHostsState.Elements()) == 0 {
		return []*connectionmanager.KafkaCluster_Host{}
	}
	yandexConnectionmanagerConnectionParamsKafkaClusterHostsRes := make([]*connectionmanager.KafkaCluster_Host, 0, len(yandexConnectionmanagerConnectionParamsKafkaClusterHostsState.Elements()))
	yandexConnectionmanagerConnectionParamsKafkaClusterHostsType := make([]yandexConnectionmanagerConnectionParamsKafkaClusterHostStructModel, 0, len(yandexConnectionmanagerConnectionParamsKafkaClusterHostsState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsKafkaClusterHostsState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsKafkaClusterHostsType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsKafkaClusterHostsType {
		yandexConnectionmanagerConnectionParamsKafkaClusterHostsRes = append(yandexConnectionmanagerConnectionParamsKafkaClusterHostsRes, expandYandexConnectionmanagerConnectionParamsKafkaClusterHostStructModel(ctx, elem, diags))
	}
	return yandexConnectionmanagerConnectionParamsKafkaClusterHostsRes
}

type yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsModel struct {
	Disabled types.Object `tfsdk:"disabled"`
	Tls      types.Object `tfsdk:"tls"`
}

var yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"disabled": yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledModelType,
		"tls":      yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsKafkaClusterTlsParams(ctx context.Context,
	yandexConnectionmanagerConnectionParamsKafkaClusterTlsParams *connectionmanager.TLSParams,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsKafkaClusterTlsParams == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsModel{
		Disabled: flattenYandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParams.GetDisabled(), diags),
		Tls:      flattenYandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParams.GetTls(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsKafkaClusterTlsParams(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	if yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState.IsNull() || yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsKafkaClusterTlsParams yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsModel
	diags.Append(yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaClusterTlsParams, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsModel(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParams, diags)
}

func expandYandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsModel, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	value := &connectionmanager.TLSParams{}
	if !(yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState.Disabled.IsNull() || yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState.Disabled.IsUnknown() || yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState.Disabled.Equal(types.Object{})) {
		value.SetDisabled(expandYandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState.Disabled, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState.Tls.IsNull() || yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState.Tls.IsUnknown() || yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState.Tls.Equal(types.Object{})) {
		value.SetTls(expandYandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsState.Tls, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledModel struct {
}

var yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{},
}

func flattenYandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabled(ctx context.Context,
	yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabled *emptypb.Empty,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabled == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledModelType.AttrTypes, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledModel{})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabled(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledState types.Object, diags *diag.Diagnostics) *emptypb.Empty {
	if yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledState.IsNull() || yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabled yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledModel
	diags.Append(yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledState.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabled, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledModel(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabled, diags)
}

func expandYandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledModel(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledState yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsDisabledModel, diags *diag.Diagnostics) *emptypb.Empty {
	value := &emptypb.Empty{}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsModel struct {
	CaCertificate types.String `tfsdk:"ca_certificate"`
}

var yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"ca_certificate": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTls(ctx context.Context,
	yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTls *connectionmanager.TLSConfig,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTls == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsModel{
		CaCertificate: types.StringValue(yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTls.GetCaCertificate()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTls(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	if yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsState.IsNull() || yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTls yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsModel
	diags.Append(yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsState.As(ctx, &yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTls, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsModel(ctx, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTls, diags)
}

func expandYandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsState yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsModel, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	value := &connectionmanager.TLSConfig{}
	value.SetCaCertificate(yandexConnectionmanagerConnectionParamsKafkaClusterTlsParamsTlsState.CaCertificate.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMongodbModel struct {
	Auth             types.Object `tfsdk:"auth"`
	Cluster          types.Object `tfsdk:"cluster"`
	Databases        types.List   `tfsdk:"databases"`
	ManagedClusterId types.String `tfsdk:"managed_cluster_id"`
}

var yandexConnectionmanagerConnectionParamsMongodbModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"auth":               yandexConnectionmanagerConnectionParamsMongodbAuthModelType,
		"cluster":            yandexConnectionmanagerConnectionParamsMongodbClusterModelType,
		"databases":          types.ListType{ElemType: types.StringType},
		"managed_cluster_id": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMongodb(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMongodb *connectionmanager.MongoDBConnection,
	state yandexConnectionmanagerConnectionParamsMongodbModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMongodb == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMongodbModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMongodbModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMongodbModel{
		Auth:             flattenYandexConnectionmanagerConnectionParamsMongodbAuth(ctx, yandexConnectionmanagerConnectionParamsMongodb.GetAuth(), converter.ExpandObject(ctx, state.Auth, yandexConnectionmanagerConnectionParamsMongodbAuthModel{}, diags).(yandexConnectionmanagerConnectionParamsMongodbAuthModel), diags),
		Cluster:          flattenYandexConnectionmanagerConnectionParamsMongodbCluster(ctx, yandexConnectionmanagerConnectionParamsMongodb.GetCluster(), converter.ExpandObject(ctx, state.Cluster, yandexConnectionmanagerConnectionParamsMongodbClusterModel{}, diags).(yandexConnectionmanagerConnectionParamsMongodbClusterModel), diags),
		Databases:        flattenYandexConnectionmanagerConnectionParamsMongodbDatabases(ctx, yandexConnectionmanagerConnectionParamsMongodb.GetDatabases(), state.Databases, diags),
		ManagedClusterId: types.StringValue(yandexConnectionmanagerConnectionParamsMongodb.GetManagedClusterId()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMongodb(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbState types.Object, diags *diag.Diagnostics) *connectionmanager.MongoDBConnection {
	if yandexConnectionmanagerConnectionParamsMongodbState.IsNull() || yandexConnectionmanagerConnectionParamsMongodbState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMongodb yandexConnectionmanagerConnectionParamsMongodbModel
	diags.Append(yandexConnectionmanagerConnectionParamsMongodbState.As(ctx, &yandexConnectionmanagerConnectionParamsMongodb, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMongodbModel(ctx, yandexConnectionmanagerConnectionParamsMongodb, diags)
}

func expandYandexConnectionmanagerConnectionParamsMongodbModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbState yandexConnectionmanagerConnectionParamsMongodbModel, diags *diag.Diagnostics) *connectionmanager.MongoDBConnection {
	value := &connectionmanager.MongoDBConnection{}
	value.SetAuth(expandYandexConnectionmanagerConnectionParamsMongodbAuth(ctx, yandexConnectionmanagerConnectionParamsMongodbState.Auth, diags))
	value.SetCluster(expandYandexConnectionmanagerConnectionParamsMongodbCluster(ctx, yandexConnectionmanagerConnectionParamsMongodbState.Cluster, diags))
	value.SetDatabases(expandYandexConnectionmanagerConnectionParamsMongodbDatabases(ctx, yandexConnectionmanagerConnectionParamsMongodbState.Databases, diags))
	value.SetManagedClusterId(yandexConnectionmanagerConnectionParamsMongodbState.ManagedClusterId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMongodbAuthModel struct {
	AuthSource   types.String `tfsdk:"auth_source"`
	UserPassword types.Object `tfsdk:"user_password"`
}

var yandexConnectionmanagerConnectionParamsMongodbAuthModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"auth_source":   types.StringType,
		"user_password": yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMongodbAuth(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMongodbAuth *connectionmanager.MongoDBAuth,
	state yandexConnectionmanagerConnectionParamsMongodbAuthModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMongodbAuth == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMongodbAuthModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMongodbAuthModel{
		AuthSource:   types.StringValue(yandexConnectionmanagerConnectionParamsMongodbAuth.GetAuthSource()),
		UserPassword: flattenYandexConnectionmanagerConnectionParamsMongodbAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsMongodbAuth.GetUserPassword(), converter.ExpandObject(ctx, state.UserPassword, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordModel), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMongodbAuth(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbAuthState types.Object, diags *diag.Diagnostics) *connectionmanager.MongoDBAuth {
	if yandexConnectionmanagerConnectionParamsMongodbAuthState.IsNull() || yandexConnectionmanagerConnectionParamsMongodbAuthState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMongodbAuth yandexConnectionmanagerConnectionParamsMongodbAuthModel
	diags.Append(yandexConnectionmanagerConnectionParamsMongodbAuthState.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuth, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMongodbAuthModel(ctx, yandexConnectionmanagerConnectionParamsMongodbAuth, diags)
}

func expandYandexConnectionmanagerConnectionParamsMongodbAuthModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbAuthState yandexConnectionmanagerConnectionParamsMongodbAuthModel, diags *diag.Diagnostics) *connectionmanager.MongoDBAuth {
	value := &connectionmanager.MongoDBAuth{}
	value.SetAuthSource(yandexConnectionmanagerConnectionParamsMongodbAuthState.AuthSource.ValueString())
	if !(yandexConnectionmanagerConnectionParamsMongodbAuthState.UserPassword.IsNull() || yandexConnectionmanagerConnectionParamsMongodbAuthState.UserPassword.IsUnknown() || yandexConnectionmanagerConnectionParamsMongodbAuthState.UserPassword.Equal(types.Object{})) {
		value.SetUserPassword(expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthState.UserPassword, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordModel struct {
	Password types.Object `tfsdk:"password"`
	User     types.String `tfsdk:"user"`
}

var yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"password": yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordModelType,
		"user":     types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMongodbAuthUserPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMongodbAuthUserPassword *connectionmanager.UserPasswordAuth,
	state yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMongodbAuthUserPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordModel{
		Password: flattenYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthUserPassword.GetPassword(), converter.ExpandObject(ctx, state.Password, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordModel), diags),
		User:     types.StringValue(yandexConnectionmanagerConnectionParamsMongodbAuthUserPassword.GetUser()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.UserPasswordAuth {
	if yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMongodbAuthUserPassword yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuthUserPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordModel(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthUserPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordState yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordModel, diags *diag.Diagnostics) *connectionmanager.UserPasswordAuth {
	value := &connectionmanager.UserPasswordAuth{}
	value.SetPassword(expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordState.Password, diags))
	value.SetUser(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordState.User.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordModel struct {
	LockboxSecretKey          types.String `tfsdk:"lockbox_secret_key"`
	PasswordGenerationOptions types.Object `tfsdk:"password_generation_options"`
	Raw                       types.String `tfsdk:"raw"`
}

var yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"lockbox_secret_key":          types.StringType,
		"password_generation_options": yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsModelType,
		"raw":                         types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPassword *connectionmanager.Password,
	state yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordModel{
		LockboxSecretKey:          types.StringValue(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPassword.GetLockboxSecretKey()),
		PasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPassword.GetPasswordGenerationOptions(), diags),
		Raw:                       state.Raw,
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.Password {
	if yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPassword yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordModel(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordModel, diags *diag.Diagnostics) *connectionmanager.Password {
	value := &connectionmanager.Password{}
	if !(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState.LockboxSecretKey.IsNull() || yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState.LockboxSecretKey.IsUnknown() || yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState.LockboxSecretKey.Equal(types.StringValue(""))) {
		value.SetLockboxSecretKey(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState.LockboxSecretKey.ValueString())
	}
	value.SetPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState.PasswordGenerationOptions, diags))
	value.SetRaw(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordState.Raw.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsModel struct {
	Cookie                           types.String `tfsdk:"cookie"`
	LockboxPasswordGenerationOptions types.Object `tfsdk:"lockbox_password_generation_options"`
}

var yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cookie":                              types.StringType,
		"lockbox_password_generation_options": yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptions *connectionmanager.PasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsModel{
		Cookie:                           types.StringValue(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptions.GetCookie()),
		LockboxPasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptions.GetLockboxPasswordGenerationOptions(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptions yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	value := &connectionmanager.PasswordGenerationOptions{}
	value.SetCookie(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie.ValueString())
	if !(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsNull() || yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsUnknown() || yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.Equal(types.Object{})) {
		value.SetLockboxPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel struct {
	ExcludedPunctuation types.String `tfsdk:"excluded_punctuation"`
	IncludeDigits       types.Bool   `tfsdk:"include_digits"`
	IncludeLowercase    types.Bool   `tfsdk:"include_lowercase"`
	IncludePunctuation  types.Bool   `tfsdk:"include_punctuation"`
	IncludeUppercase    types.Bool   `tfsdk:"include_uppercase"`
	IncludedPunctuation types.String `tfsdk:"included_punctuation"`
	Length              types.Int64  `tfsdk:"length"`
}

var yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"excluded_punctuation": types.StringType,
		"include_digits":       types.BoolType,
		"include_lowercase":    types.BoolType,
		"include_punctuation":  types.BoolType,
		"include_uppercase":    types.BoolType,
		"included_punctuation": types.StringType,
		"length":               types.Int64Type,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions *connectionmanager.LockboxPasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel{
		ExcludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetExcludedPunctuation()),
		IncludeDigits:       types.BoolValue(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeDigits().GetValue()),
		IncludeLowercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeLowercase().GetValue()),
		IncludePunctuation:  types.BoolValue(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludePunctuation().GetValue()),
		IncludeUppercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeUppercase().GetValue()),
		IncludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludedPunctuation()),
		Length:              types.Int64Value(int64(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetLength())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	value := &connectionmanager.LockboxPasswordGenerationOptions{}
	value.SetExcludedPunctuation(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation.ValueString())
	value.SetIncludeDigits(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits.ValueBool()))
	value.SetIncludeLowercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase.ValueBool()))
	value.SetIncludePunctuation(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation.ValueBool()))
	value.SetIncludeUppercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase.ValueBool()))
	value.SetIncludedPunctuation(yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation.ValueString())
	value.SetLength((yandexConnectionmanagerConnectionParamsMongodbAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMongodbClusterModel struct {
	Hosts     types.List   `tfsdk:"hosts"`
	TlsParams types.Object `tfsdk:"tls_params"`
}

var yandexConnectionmanagerConnectionParamsMongodbClusterModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"hosts":      types.ListType{ElemType: yandexConnectionmanagerConnectionParamsMongodbClusterHostStructModelType},
		"tls_params": yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMongodbCluster(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMongodbCluster *connectionmanager.MongoDBCluster,
	state yandexConnectionmanagerConnectionParamsMongodbClusterModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMongodbCluster == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMongodbClusterModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMongodbClusterModel{
		Hosts:     flattenYandexConnectionmanagerConnectionParamsMongodbClusterHosts(ctx, yandexConnectionmanagerConnectionParamsMongodbCluster.GetHosts(), state.Hosts, diags),
		TlsParams: flattenYandexConnectionmanagerConnectionParamsMongodbClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsMongodbCluster.GetTlsParams(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMongodbCluster(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbClusterState types.Object, diags *diag.Diagnostics) *connectionmanager.MongoDBCluster {
	if yandexConnectionmanagerConnectionParamsMongodbClusterState.IsNull() || yandexConnectionmanagerConnectionParamsMongodbClusterState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMongodbCluster yandexConnectionmanagerConnectionParamsMongodbClusterModel
	diags.Append(yandexConnectionmanagerConnectionParamsMongodbClusterState.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbCluster, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMongodbClusterModel(ctx, yandexConnectionmanagerConnectionParamsMongodbCluster, diags)
}

func expandYandexConnectionmanagerConnectionParamsMongodbClusterModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbClusterState yandexConnectionmanagerConnectionParamsMongodbClusterModel, diags *diag.Diagnostics) *connectionmanager.MongoDBCluster {
	value := &connectionmanager.MongoDBCluster{}
	value.SetHosts(expandYandexConnectionmanagerConnectionParamsMongodbClusterHosts(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterState.Hosts, diags))
	value.SetTlsParams(expandYandexConnectionmanagerConnectionParamsMongodbClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterState.TlsParams, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsMongodbClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbClusterHosts []*connectionmanager.MongoDBCluster_Host, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsMongodbClusterHosts == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(yandexConnectionmanagerConnectionParamsMongodbClusterHostStructModelType)
	}
	var yandexConnectionmanagerConnectionParamsMongodbClusterHostsValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsMongodbClusterHosts {
		val := flattenYandexConnectionmanagerConnectionParamsMongodbClusterHostStruct(ctx, elem, diags)
		yandexConnectionmanagerConnectionParamsMongodbClusterHostsValues = append(yandexConnectionmanagerConnectionParamsMongodbClusterHostsValues, val)
	}

	value, diag := types.ListValue(yandexConnectionmanagerConnectionParamsMongodbClusterHostStructModelType, yandexConnectionmanagerConnectionParamsMongodbClusterHostsValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMongodbClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbClusterHostsState types.List, diags *diag.Diagnostics) []*connectionmanager.MongoDBCluster_Host {
	if yandexConnectionmanagerConnectionParamsMongodbClusterHostsState.IsNull() || yandexConnectionmanagerConnectionParamsMongodbClusterHostsState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsMongodbClusterHostsState.Elements()) == 0 {
		return []*connectionmanager.MongoDBCluster_Host{}
	}
	yandexConnectionmanagerConnectionParamsMongodbClusterHostsRes := make([]*connectionmanager.MongoDBCluster_Host, 0, len(yandexConnectionmanagerConnectionParamsMongodbClusterHostsState.Elements()))
	yandexConnectionmanagerConnectionParamsMongodbClusterHostsType := make([]yandexConnectionmanagerConnectionParamsMongodbClusterHostStructModel, 0, len(yandexConnectionmanagerConnectionParamsMongodbClusterHostsState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsMongodbClusterHostsState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsMongodbClusterHostsType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsMongodbClusterHostsType {
		yandexConnectionmanagerConnectionParamsMongodbClusterHostsRes = append(yandexConnectionmanagerConnectionParamsMongodbClusterHostsRes, expandYandexConnectionmanagerConnectionParamsMongodbClusterHostStructModel(ctx, elem, diags))
	}
	return yandexConnectionmanagerConnectionParamsMongodbClusterHostsRes
}

type yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsModel struct {
	Disabled types.Object `tfsdk:"disabled"`
	Tls      types.Object `tfsdk:"tls"`
}

var yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"disabled": yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledModelType,
		"tls":      yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMongodbClusterTlsParams(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMongodbClusterTlsParams *connectionmanager.TLSParams,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMongodbClusterTlsParams == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsModel{
		Disabled: flattenYandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParams.GetDisabled(), diags),
		Tls:      flattenYandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParams.GetTls(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMongodbClusterTlsParams(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	if yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState.IsNull() || yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMongodbClusterTlsParams yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsModel
	diags.Append(yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbClusterTlsParams, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsModel(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParams, diags)
}

func expandYandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsModel, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	value := &connectionmanager.TLSParams{}
	if !(yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState.Disabled.IsNull() || yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState.Disabled.IsUnknown() || yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState.Disabled.Equal(types.Object{})) {
		value.SetDisabled(expandYandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState.Disabled, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState.Tls.IsNull() || yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState.Tls.IsUnknown() || yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState.Tls.Equal(types.Object{})) {
		value.SetTls(expandYandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsState.Tls, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledModel struct {
}

var yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{},
}

func flattenYandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabled(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabled *emptypb.Empty,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabled == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledModel{})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabled(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledState types.Object, diags *diag.Diagnostics) *emptypb.Empty {
	if yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledState.IsNull() || yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabled yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledModel
	diags.Append(yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledState.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabled, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledModel(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabled, diags)
}

func expandYandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledState yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsDisabledModel, diags *diag.Diagnostics) *emptypb.Empty {
	value := &emptypb.Empty{}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsModel struct {
	CaCertificate types.String `tfsdk:"ca_certificate"`
}

var yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"ca_certificate": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTls(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTls *connectionmanager.TLSConfig,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTls == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsModel{
		CaCertificate: types.StringValue(yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTls.GetCaCertificate()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTls(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	if yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsState.IsNull() || yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTls yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsModel
	diags.Append(yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsState.As(ctx, &yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTls, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsModel(ctx, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTls, diags)
}

func expandYandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsState yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsModel, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	value := &connectionmanager.TLSConfig{}
	value.SetCaCertificate(yandexConnectionmanagerConnectionParamsMongodbClusterTlsParamsTlsState.CaCertificate.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsMongodbDatabases(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbDatabases []string, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsMongodbDatabases == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(types.StringType)
	}
	var yandexConnectionmanagerConnectionParamsMongodbDatabasesValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsMongodbDatabases {
		val := types.StringValue(elem)
		yandexConnectionmanagerConnectionParamsMongodbDatabasesValues = append(yandexConnectionmanagerConnectionParamsMongodbDatabasesValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexConnectionmanagerConnectionParamsMongodbDatabasesValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMongodbDatabases(ctx context.Context, yandexConnectionmanagerConnectionParamsMongodbDatabasesState types.List, diags *diag.Diagnostics) []string {
	if yandexConnectionmanagerConnectionParamsMongodbDatabasesState.IsNull() || yandexConnectionmanagerConnectionParamsMongodbDatabasesState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsMongodbDatabasesState.Elements()) == 0 {
		return []string{}
	}
	yandexConnectionmanagerConnectionParamsMongodbDatabasesRes := make([]string, 0, len(yandexConnectionmanagerConnectionParamsMongodbDatabasesState.Elements()))
	yandexConnectionmanagerConnectionParamsMongodbDatabasesType := make([]types.String, 0, len(yandexConnectionmanagerConnectionParamsMongodbDatabasesState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsMongodbDatabasesState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsMongodbDatabasesType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsMongodbDatabasesType {
		yandexConnectionmanagerConnectionParamsMongodbDatabasesRes = append(yandexConnectionmanagerConnectionParamsMongodbDatabasesRes, elem.ValueString())
	}
	return yandexConnectionmanagerConnectionParamsMongodbDatabasesRes
}

type yandexConnectionmanagerConnectionParamsMysqlModel struct {
	Auth             types.Object `tfsdk:"auth"`
	Cluster          types.Object `tfsdk:"cluster"`
	Databases        types.List   `tfsdk:"databases"`
	ManagedClusterId types.String `tfsdk:"managed_cluster_id"`
}

var yandexConnectionmanagerConnectionParamsMysqlModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"auth":               yandexConnectionmanagerConnectionParamsMysqlAuthModelType,
		"cluster":            yandexConnectionmanagerConnectionParamsMysqlClusterModelType,
		"databases":          types.ListType{ElemType: types.StringType},
		"managed_cluster_id": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMysql(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMysql *connectionmanager.MySQLConnection,
	state yandexConnectionmanagerConnectionParamsMysqlModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMysql == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMysqlModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMysqlModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMysqlModel{
		Auth:             flattenYandexConnectionmanagerConnectionParamsMysqlAuth(ctx, yandexConnectionmanagerConnectionParamsMysql.GetAuth(), converter.ExpandObject(ctx, state.Auth, yandexConnectionmanagerConnectionParamsMysqlAuthModel{}, diags).(yandexConnectionmanagerConnectionParamsMysqlAuthModel), diags),
		Cluster:          flattenYandexConnectionmanagerConnectionParamsMysqlCluster(ctx, yandexConnectionmanagerConnectionParamsMysql.GetCluster(), converter.ExpandObject(ctx, state.Cluster, yandexConnectionmanagerConnectionParamsMysqlClusterModel{}, diags).(yandexConnectionmanagerConnectionParamsMysqlClusterModel), diags),
		Databases:        flattenYandexConnectionmanagerConnectionParamsMysqlDatabases(ctx, yandexConnectionmanagerConnectionParamsMysql.GetDatabases(), state.Databases, diags),
		ManagedClusterId: types.StringValue(yandexConnectionmanagerConnectionParamsMysql.GetManagedClusterId()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMysql(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlState types.Object, diags *diag.Diagnostics) *connectionmanager.MySQLConnection {
	if yandexConnectionmanagerConnectionParamsMysqlState.IsNull() || yandexConnectionmanagerConnectionParamsMysqlState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMysql yandexConnectionmanagerConnectionParamsMysqlModel
	diags.Append(yandexConnectionmanagerConnectionParamsMysqlState.As(ctx, &yandexConnectionmanagerConnectionParamsMysql, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMysqlModel(ctx, yandexConnectionmanagerConnectionParamsMysql, diags)
}

func expandYandexConnectionmanagerConnectionParamsMysqlModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlState yandexConnectionmanagerConnectionParamsMysqlModel, diags *diag.Diagnostics) *connectionmanager.MySQLConnection {
	value := &connectionmanager.MySQLConnection{}
	value.SetAuth(expandYandexConnectionmanagerConnectionParamsMysqlAuth(ctx, yandexConnectionmanagerConnectionParamsMysqlState.Auth, diags))
	value.SetCluster(expandYandexConnectionmanagerConnectionParamsMysqlCluster(ctx, yandexConnectionmanagerConnectionParamsMysqlState.Cluster, diags))
	value.SetDatabases(expandYandexConnectionmanagerConnectionParamsMysqlDatabases(ctx, yandexConnectionmanagerConnectionParamsMysqlState.Databases, diags))
	value.SetManagedClusterId(yandexConnectionmanagerConnectionParamsMysqlState.ManagedClusterId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMysqlAuthModel struct {
	UserPassword types.Object `tfsdk:"user_password"`
}

var yandexConnectionmanagerConnectionParamsMysqlAuthModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"user_password": yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMysqlAuth(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMysqlAuth *connectionmanager.MySQLAuth,
	state yandexConnectionmanagerConnectionParamsMysqlAuthModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMysqlAuth == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMysqlAuthModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMysqlAuthModel{
		UserPassword: flattenYandexConnectionmanagerConnectionParamsMysqlAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsMysqlAuth.GetUserPassword(), converter.ExpandObject(ctx, state.UserPassword, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordModel), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMysqlAuth(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlAuthState types.Object, diags *diag.Diagnostics) *connectionmanager.MySQLAuth {
	if yandexConnectionmanagerConnectionParamsMysqlAuthState.IsNull() || yandexConnectionmanagerConnectionParamsMysqlAuthState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMysqlAuth yandexConnectionmanagerConnectionParamsMysqlAuthModel
	diags.Append(yandexConnectionmanagerConnectionParamsMysqlAuthState.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuth, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMysqlAuthModel(ctx, yandexConnectionmanagerConnectionParamsMysqlAuth, diags)
}

func expandYandexConnectionmanagerConnectionParamsMysqlAuthModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlAuthState yandexConnectionmanagerConnectionParamsMysqlAuthModel, diags *diag.Diagnostics) *connectionmanager.MySQLAuth {
	value := &connectionmanager.MySQLAuth{}
	if !(yandexConnectionmanagerConnectionParamsMysqlAuthState.UserPassword.IsNull() || yandexConnectionmanagerConnectionParamsMysqlAuthState.UserPassword.IsUnknown() || yandexConnectionmanagerConnectionParamsMysqlAuthState.UserPassword.Equal(types.Object{})) {
		value.SetUserPassword(expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthState.UserPassword, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordModel struct {
	Password types.Object `tfsdk:"password"`
	User     types.String `tfsdk:"user"`
}

var yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"password": yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordModelType,
		"user":     types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMysqlAuthUserPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMysqlAuthUserPassword *connectionmanager.UserPasswordAuth,
	state yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMysqlAuthUserPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordModel{
		Password: flattenYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthUserPassword.GetPassword(), converter.ExpandObject(ctx, state.Password, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordModel), diags),
		User:     types.StringValue(yandexConnectionmanagerConnectionParamsMysqlAuthUserPassword.GetUser()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.UserPasswordAuth {
	if yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMysqlAuthUserPassword yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuthUserPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordModel(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthUserPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordState yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordModel, diags *diag.Diagnostics) *connectionmanager.UserPasswordAuth {
	value := &connectionmanager.UserPasswordAuth{}
	value.SetPassword(expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordState.Password, diags))
	value.SetUser(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordState.User.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordModel struct {
	LockboxSecretKey          types.String `tfsdk:"lockbox_secret_key"`
	PasswordGenerationOptions types.Object `tfsdk:"password_generation_options"`
	Raw                       types.String `tfsdk:"raw"`
}

var yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"lockbox_secret_key":          types.StringType,
		"password_generation_options": yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsModelType,
		"raw":                         types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPassword *connectionmanager.Password,
	state yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordModel{
		LockboxSecretKey:          types.StringValue(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPassword.GetLockboxSecretKey()),
		PasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPassword.GetPasswordGenerationOptions(), diags),
		Raw:                       state.Raw,
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.Password {
	if yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPassword yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordModel(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordModel, diags *diag.Diagnostics) *connectionmanager.Password {
	value := &connectionmanager.Password{}
	if !(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState.LockboxSecretKey.IsNull() || yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState.LockboxSecretKey.IsUnknown() || yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState.LockboxSecretKey.Equal(types.StringValue(""))) {
		value.SetLockboxSecretKey(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState.LockboxSecretKey.ValueString())
	}
	value.SetPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState.PasswordGenerationOptions, diags))
	value.SetRaw(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordState.Raw.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsModel struct {
	Cookie                           types.String `tfsdk:"cookie"`
	LockboxPasswordGenerationOptions types.Object `tfsdk:"lockbox_password_generation_options"`
}

var yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cookie":                              types.StringType,
		"lockbox_password_generation_options": yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptions *connectionmanager.PasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsModel{
		Cookie:                           types.StringValue(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptions.GetCookie()),
		LockboxPasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptions.GetLockboxPasswordGenerationOptions(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptions yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	value := &connectionmanager.PasswordGenerationOptions{}
	value.SetCookie(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie.ValueString())
	if !(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsNull() || yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsUnknown() || yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.Equal(types.Object{})) {
		value.SetLockboxPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel struct {
	ExcludedPunctuation types.String `tfsdk:"excluded_punctuation"`
	IncludeDigits       types.Bool   `tfsdk:"include_digits"`
	IncludeLowercase    types.Bool   `tfsdk:"include_lowercase"`
	IncludePunctuation  types.Bool   `tfsdk:"include_punctuation"`
	IncludeUppercase    types.Bool   `tfsdk:"include_uppercase"`
	IncludedPunctuation types.String `tfsdk:"included_punctuation"`
	Length              types.Int64  `tfsdk:"length"`
}

var yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"excluded_punctuation": types.StringType,
		"include_digits":       types.BoolType,
		"include_lowercase":    types.BoolType,
		"include_punctuation":  types.BoolType,
		"include_uppercase":    types.BoolType,
		"included_punctuation": types.StringType,
		"length":               types.Int64Type,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions *connectionmanager.LockboxPasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel{
		ExcludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetExcludedPunctuation()),
		IncludeDigits:       types.BoolValue(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeDigits().GetValue()),
		IncludeLowercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeLowercase().GetValue()),
		IncludePunctuation:  types.BoolValue(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludePunctuation().GetValue()),
		IncludeUppercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeUppercase().GetValue()),
		IncludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludedPunctuation()),
		Length:              types.Int64Value(int64(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetLength())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	value := &connectionmanager.LockboxPasswordGenerationOptions{}
	value.SetExcludedPunctuation(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation.ValueString())
	value.SetIncludeDigits(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits.ValueBool()))
	value.SetIncludeLowercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase.ValueBool()))
	value.SetIncludePunctuation(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation.ValueBool()))
	value.SetIncludeUppercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase.ValueBool()))
	value.SetIncludedPunctuation(yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation.ValueString())
	value.SetLength((yandexConnectionmanagerConnectionParamsMysqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMysqlClusterModel struct {
	Hosts     types.List   `tfsdk:"hosts"`
	TlsParams types.Object `tfsdk:"tls_params"`
}

var yandexConnectionmanagerConnectionParamsMysqlClusterModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"hosts":      types.ListType{ElemType: yandexConnectionmanagerConnectionParamsMysqlClusterHostStructModelType},
		"tls_params": yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMysqlCluster(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMysqlCluster *connectionmanager.MySQLCluster,
	state yandexConnectionmanagerConnectionParamsMysqlClusterModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMysqlCluster == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMysqlClusterModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMysqlClusterModel{
		Hosts:     flattenYandexConnectionmanagerConnectionParamsMysqlClusterHosts(ctx, yandexConnectionmanagerConnectionParamsMysqlCluster.GetHosts(), state.Hosts, diags),
		TlsParams: flattenYandexConnectionmanagerConnectionParamsMysqlClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsMysqlCluster.GetTlsParams(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMysqlCluster(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlClusterState types.Object, diags *diag.Diagnostics) *connectionmanager.MySQLCluster {
	if yandexConnectionmanagerConnectionParamsMysqlClusterState.IsNull() || yandexConnectionmanagerConnectionParamsMysqlClusterState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMysqlCluster yandexConnectionmanagerConnectionParamsMysqlClusterModel
	diags.Append(yandexConnectionmanagerConnectionParamsMysqlClusterState.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlCluster, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMysqlClusterModel(ctx, yandexConnectionmanagerConnectionParamsMysqlCluster, diags)
}

func expandYandexConnectionmanagerConnectionParamsMysqlClusterModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlClusterState yandexConnectionmanagerConnectionParamsMysqlClusterModel, diags *diag.Diagnostics) *connectionmanager.MySQLCluster {
	value := &connectionmanager.MySQLCluster{}
	value.SetHosts(expandYandexConnectionmanagerConnectionParamsMysqlClusterHosts(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterState.Hosts, diags))
	value.SetTlsParams(expandYandexConnectionmanagerConnectionParamsMysqlClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterState.TlsParams, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsMysqlClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlClusterHosts []*connectionmanager.MySQLCluster_Host, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsMysqlClusterHosts == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(yandexConnectionmanagerConnectionParamsMysqlClusterHostStructModelType)
	}
	var yandexConnectionmanagerConnectionParamsMysqlClusterHostsValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsMysqlClusterHosts {
		val := flattenYandexConnectionmanagerConnectionParamsMysqlClusterHostStruct(ctx, elem, diags)
		yandexConnectionmanagerConnectionParamsMysqlClusterHostsValues = append(yandexConnectionmanagerConnectionParamsMysqlClusterHostsValues, val)
	}

	value, diag := types.ListValue(yandexConnectionmanagerConnectionParamsMysqlClusterHostStructModelType, yandexConnectionmanagerConnectionParamsMysqlClusterHostsValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMysqlClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlClusterHostsState types.List, diags *diag.Diagnostics) []*connectionmanager.MySQLCluster_Host {
	if yandexConnectionmanagerConnectionParamsMysqlClusterHostsState.IsNull() || yandexConnectionmanagerConnectionParamsMysqlClusterHostsState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsMysqlClusterHostsState.Elements()) == 0 {
		return []*connectionmanager.MySQLCluster_Host{}
	}
	yandexConnectionmanagerConnectionParamsMysqlClusterHostsRes := make([]*connectionmanager.MySQLCluster_Host, 0, len(yandexConnectionmanagerConnectionParamsMysqlClusterHostsState.Elements()))
	yandexConnectionmanagerConnectionParamsMysqlClusterHostsType := make([]yandexConnectionmanagerConnectionParamsMysqlClusterHostStructModel, 0, len(yandexConnectionmanagerConnectionParamsMysqlClusterHostsState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsMysqlClusterHostsState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsMysqlClusterHostsType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsMysqlClusterHostsType {
		yandexConnectionmanagerConnectionParamsMysqlClusterHostsRes = append(yandexConnectionmanagerConnectionParamsMysqlClusterHostsRes, expandYandexConnectionmanagerConnectionParamsMysqlClusterHostStructModel(ctx, elem, diags))
	}
	return yandexConnectionmanagerConnectionParamsMysqlClusterHostsRes
}

type yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsModel struct {
	Disabled types.Object `tfsdk:"disabled"`
	Tls      types.Object `tfsdk:"tls"`
}

var yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"disabled": yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledModelType,
		"tls":      yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMysqlClusterTlsParams(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMysqlClusterTlsParams *connectionmanager.TLSParams,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMysqlClusterTlsParams == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsModel{
		Disabled: flattenYandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParams.GetDisabled(), diags),
		Tls:      flattenYandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParams.GetTls(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMysqlClusterTlsParams(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	if yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState.IsNull() || yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMysqlClusterTlsParams yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsModel
	diags.Append(yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlClusterTlsParams, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsModel(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParams, diags)
}

func expandYandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsModel, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	value := &connectionmanager.TLSParams{}
	if !(yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState.Disabled.IsNull() || yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState.Disabled.IsUnknown() || yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState.Disabled.Equal(types.Object{})) {
		value.SetDisabled(expandYandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState.Disabled, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState.Tls.IsNull() || yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState.Tls.IsUnknown() || yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState.Tls.Equal(types.Object{})) {
		value.SetTls(expandYandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsState.Tls, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledModel struct {
}

var yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{},
}

func flattenYandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabled(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabled *emptypb.Empty,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabled == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledModel{})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabled(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledState types.Object, diags *diag.Diagnostics) *emptypb.Empty {
	if yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledState.IsNull() || yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabled yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledModel
	diags.Append(yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledState.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabled, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledModel(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabled, diags)
}

func expandYandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledState yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsDisabledModel, diags *diag.Diagnostics) *emptypb.Empty {
	value := &emptypb.Empty{}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsModel struct {
	CaCertificate types.String `tfsdk:"ca_certificate"`
}

var yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"ca_certificate": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTls(ctx context.Context,
	yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTls *connectionmanager.TLSConfig,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTls == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsModel{
		CaCertificate: types.StringValue(yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTls.GetCaCertificate()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTls(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	if yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsState.IsNull() || yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTls yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsModel
	diags.Append(yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsState.As(ctx, &yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTls, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsModel(ctx, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTls, diags)
}

func expandYandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsState yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsModel, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	value := &connectionmanager.TLSConfig{}
	value.SetCaCertificate(yandexConnectionmanagerConnectionParamsMysqlClusterTlsParamsTlsState.CaCertificate.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsMysqlDatabases(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlDatabases []string, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsMysqlDatabases == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(types.StringType)
	}
	var yandexConnectionmanagerConnectionParamsMysqlDatabasesValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsMysqlDatabases {
		val := types.StringValue(elem)
		yandexConnectionmanagerConnectionParamsMysqlDatabasesValues = append(yandexConnectionmanagerConnectionParamsMysqlDatabasesValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexConnectionmanagerConnectionParamsMysqlDatabasesValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsMysqlDatabases(ctx context.Context, yandexConnectionmanagerConnectionParamsMysqlDatabasesState types.List, diags *diag.Diagnostics) []string {
	if yandexConnectionmanagerConnectionParamsMysqlDatabasesState.IsNull() || yandexConnectionmanagerConnectionParamsMysqlDatabasesState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsMysqlDatabasesState.Elements()) == 0 {
		return []string{}
	}
	yandexConnectionmanagerConnectionParamsMysqlDatabasesRes := make([]string, 0, len(yandexConnectionmanagerConnectionParamsMysqlDatabasesState.Elements()))
	yandexConnectionmanagerConnectionParamsMysqlDatabasesType := make([]types.String, 0, len(yandexConnectionmanagerConnectionParamsMysqlDatabasesState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsMysqlDatabasesState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsMysqlDatabasesType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsMysqlDatabasesType {
		yandexConnectionmanagerConnectionParamsMysqlDatabasesRes = append(yandexConnectionmanagerConnectionParamsMysqlDatabasesRes, elem.ValueString())
	}
	return yandexConnectionmanagerConnectionParamsMysqlDatabasesRes
}

type yandexConnectionmanagerConnectionParamsOpensearchModel struct {
	Auth             types.Object `tfsdk:"auth"`
	Cluster          types.Object `tfsdk:"cluster"`
	ManagedClusterId types.String `tfsdk:"managed_cluster_id"`
}

var yandexConnectionmanagerConnectionParamsOpensearchModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"auth":               yandexConnectionmanagerConnectionParamsOpensearchAuthModelType,
		"cluster":            yandexConnectionmanagerConnectionParamsOpensearchClusterModelType,
		"managed_cluster_id": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsOpensearch(ctx context.Context,
	yandexConnectionmanagerConnectionParamsOpensearch *connectionmanager.OpenSearchConnection,
	state yandexConnectionmanagerConnectionParamsOpensearchModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsOpensearch == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsOpensearchModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsOpensearchModelType.AttrTypes, yandexConnectionmanagerConnectionParamsOpensearchModel{
		Auth:             flattenYandexConnectionmanagerConnectionParamsOpensearchAuth(ctx, yandexConnectionmanagerConnectionParamsOpensearch.GetAuth(), converter.ExpandObject(ctx, state.Auth, yandexConnectionmanagerConnectionParamsOpensearchAuthModel{}, diags).(yandexConnectionmanagerConnectionParamsOpensearchAuthModel), diags),
		Cluster:          flattenYandexConnectionmanagerConnectionParamsOpensearchCluster(ctx, yandexConnectionmanagerConnectionParamsOpensearch.GetCluster(), converter.ExpandObject(ctx, state.Cluster, yandexConnectionmanagerConnectionParamsOpensearchClusterModel{}, diags).(yandexConnectionmanagerConnectionParamsOpensearchClusterModel), diags),
		ManagedClusterId: types.StringValue(yandexConnectionmanagerConnectionParamsOpensearch.GetManagedClusterId()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsOpensearch(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchState types.Object, diags *diag.Diagnostics) *connectionmanager.OpenSearchConnection {
	if yandexConnectionmanagerConnectionParamsOpensearchState.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsOpensearch yandexConnectionmanagerConnectionParamsOpensearchModel
	diags.Append(yandexConnectionmanagerConnectionParamsOpensearchState.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearch, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsOpensearchModel(ctx, yandexConnectionmanagerConnectionParamsOpensearch, diags)
}

func expandYandexConnectionmanagerConnectionParamsOpensearchModel(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchState yandexConnectionmanagerConnectionParamsOpensearchModel, diags *diag.Diagnostics) *connectionmanager.OpenSearchConnection {
	value := &connectionmanager.OpenSearchConnection{}
	value.SetAuth(expandYandexConnectionmanagerConnectionParamsOpensearchAuth(ctx, yandexConnectionmanagerConnectionParamsOpensearchState.Auth, diags))
	value.SetCluster(expandYandexConnectionmanagerConnectionParamsOpensearchCluster(ctx, yandexConnectionmanagerConnectionParamsOpensearchState.Cluster, diags))
	value.SetManagedClusterId(yandexConnectionmanagerConnectionParamsOpensearchState.ManagedClusterId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsOpensearchAuthModel struct {
	UserPassword types.Object `tfsdk:"user_password"`
}

var yandexConnectionmanagerConnectionParamsOpensearchAuthModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"user_password": yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsOpensearchAuth(ctx context.Context,
	yandexConnectionmanagerConnectionParamsOpensearchAuth *connectionmanager.OpenSearchAuth,
	state yandexConnectionmanagerConnectionParamsOpensearchAuthModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsOpensearchAuth == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsOpensearchAuthModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthModelType.AttrTypes, yandexConnectionmanagerConnectionParamsOpensearchAuthModel{
		UserPassword: flattenYandexConnectionmanagerConnectionParamsOpensearchAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuth.GetUserPassword(), converter.ExpandObject(ctx, state.UserPassword, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordModel), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsOpensearchAuth(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchAuthState types.Object, diags *diag.Diagnostics) *connectionmanager.OpenSearchAuth {
	if yandexConnectionmanagerConnectionParamsOpensearchAuthState.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchAuthState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsOpensearchAuth yandexConnectionmanagerConnectionParamsOpensearchAuthModel
	diags.Append(yandexConnectionmanagerConnectionParamsOpensearchAuthState.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuth, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsOpensearchAuthModel(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuth, diags)
}

func expandYandexConnectionmanagerConnectionParamsOpensearchAuthModel(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchAuthState yandexConnectionmanagerConnectionParamsOpensearchAuthModel, diags *diag.Diagnostics) *connectionmanager.OpenSearchAuth {
	value := &connectionmanager.OpenSearchAuth{}
	if !(yandexConnectionmanagerConnectionParamsOpensearchAuthState.UserPassword.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchAuthState.UserPassword.IsUnknown() || yandexConnectionmanagerConnectionParamsOpensearchAuthState.UserPassword.Equal(types.Object{})) {
		value.SetUserPassword(expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthState.UserPassword, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordModel struct {
	Password types.Object `tfsdk:"password"`
	User     types.String `tfsdk:"user"`
}

var yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"password": yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordModelType,
		"user":     types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsOpensearchAuthUserPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsOpensearchAuthUserPassword *connectionmanager.UserPasswordAuth,
	state yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsOpensearchAuthUserPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordModel{
		Password: flattenYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPassword.GetPassword(), converter.ExpandObject(ctx, state.Password, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordModel), diags),
		User:     types.StringValue(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPassword.GetUser()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.UserPasswordAuth {
	if yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsOpensearchAuthUserPassword yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuthUserPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordModel(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordState yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordModel, diags *diag.Diagnostics) *connectionmanager.UserPasswordAuth {
	value := &connectionmanager.UserPasswordAuth{}
	value.SetPassword(expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordState.Password, diags))
	value.SetUser(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordState.User.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordModel struct {
	LockboxSecretKey          types.String `tfsdk:"lockbox_secret_key"`
	PasswordGenerationOptions types.Object `tfsdk:"password_generation_options"`
	Raw                       types.String `tfsdk:"raw"`
}

var yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"lockbox_secret_key":          types.StringType,
		"password_generation_options": yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsModelType,
		"raw":                         types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPassword *connectionmanager.Password,
	state yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordModel{
		LockboxSecretKey:          types.StringValue(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPassword.GetLockboxSecretKey()),
		PasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPassword.GetPasswordGenerationOptions(), diags),
		Raw:                       state.Raw,
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.Password {
	if yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPassword yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordModel(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordModel, diags *diag.Diagnostics) *connectionmanager.Password {
	value := &connectionmanager.Password{}
	if !(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState.LockboxSecretKey.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState.LockboxSecretKey.IsUnknown() || yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState.LockboxSecretKey.Equal(types.StringValue(""))) {
		value.SetLockboxSecretKey(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState.LockboxSecretKey.ValueString())
	}
	value.SetPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState.PasswordGenerationOptions, diags))
	value.SetRaw(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordState.Raw.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsModel struct {
	Cookie                           types.String `tfsdk:"cookie"`
	LockboxPasswordGenerationOptions types.Object `tfsdk:"lockbox_password_generation_options"`
}

var yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cookie":                              types.StringType,
		"lockbox_password_generation_options": yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptions *connectionmanager.PasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsModel{
		Cookie:                           types.StringValue(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptions.GetCookie()),
		LockboxPasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptions.GetLockboxPasswordGenerationOptions(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptions yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	value := &connectionmanager.PasswordGenerationOptions{}
	value.SetCookie(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie.ValueString())
	if !(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsUnknown() || yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.Equal(types.Object{})) {
		value.SetLockboxPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel struct {
	ExcludedPunctuation types.String `tfsdk:"excluded_punctuation"`
	IncludeDigits       types.Bool   `tfsdk:"include_digits"`
	IncludeLowercase    types.Bool   `tfsdk:"include_lowercase"`
	IncludePunctuation  types.Bool   `tfsdk:"include_punctuation"`
	IncludeUppercase    types.Bool   `tfsdk:"include_uppercase"`
	IncludedPunctuation types.String `tfsdk:"included_punctuation"`
	Length              types.Int64  `tfsdk:"length"`
}

var yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"excluded_punctuation": types.StringType,
		"include_digits":       types.BoolType,
		"include_lowercase":    types.BoolType,
		"include_punctuation":  types.BoolType,
		"include_uppercase":    types.BoolType,
		"included_punctuation": types.StringType,
		"length":               types.Int64Type,
	},
}

func flattenYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions *connectionmanager.LockboxPasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel{
		ExcludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetExcludedPunctuation()),
		IncludeDigits:       types.BoolValue(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeDigits().GetValue()),
		IncludeLowercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeLowercase().GetValue()),
		IncludePunctuation:  types.BoolValue(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludePunctuation().GetValue()),
		IncludeUppercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeUppercase().GetValue()),
		IncludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludedPunctuation()),
		Length:              types.Int64Value(int64(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetLength())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	value := &connectionmanager.LockboxPasswordGenerationOptions{}
	value.SetExcludedPunctuation(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation.ValueString())
	value.SetIncludeDigits(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits.ValueBool()))
	value.SetIncludeLowercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase.ValueBool()))
	value.SetIncludePunctuation(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation.ValueBool()))
	value.SetIncludeUppercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase.ValueBool()))
	value.SetIncludedPunctuation(yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation.ValueString())
	value.SetLength((yandexConnectionmanagerConnectionParamsOpensearchAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsOpensearchClusterModel struct {
	Hosts     types.List   `tfsdk:"hosts"`
	TlsParams types.Object `tfsdk:"tls_params"`
}

var yandexConnectionmanagerConnectionParamsOpensearchClusterModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"hosts":      types.ListType{ElemType: yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModelType},
		"tls_params": yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsOpensearchCluster(ctx context.Context,
	yandexConnectionmanagerConnectionParamsOpensearchCluster *connectionmanager.OpenSearchCluster,
	state yandexConnectionmanagerConnectionParamsOpensearchClusterModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsOpensearchCluster == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsOpensearchClusterModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterModelType.AttrTypes, yandexConnectionmanagerConnectionParamsOpensearchClusterModel{
		Hosts:     flattenYandexConnectionmanagerConnectionParamsOpensearchClusterHosts(ctx, yandexConnectionmanagerConnectionParamsOpensearchCluster.GetHosts(), state.Hosts, diags),
		TlsParams: flattenYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsOpensearchCluster.GetTlsParams(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsOpensearchCluster(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchClusterState types.Object, diags *diag.Diagnostics) *connectionmanager.OpenSearchCluster {
	if yandexConnectionmanagerConnectionParamsOpensearchClusterState.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchClusterState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsOpensearchCluster yandexConnectionmanagerConnectionParamsOpensearchClusterModel
	diags.Append(yandexConnectionmanagerConnectionParamsOpensearchClusterState.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchCluster, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsOpensearchClusterModel(ctx, yandexConnectionmanagerConnectionParamsOpensearchCluster, diags)
}

func expandYandexConnectionmanagerConnectionParamsOpensearchClusterModel(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchClusterState yandexConnectionmanagerConnectionParamsOpensearchClusterModel, diags *diag.Diagnostics) *connectionmanager.OpenSearchCluster {
	value := &connectionmanager.OpenSearchCluster{}
	value.SetHosts(expandYandexConnectionmanagerConnectionParamsOpensearchClusterHosts(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterState.Hosts, diags))
	value.SetTlsParams(expandYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterState.TlsParams, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsOpensearchClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchClusterHosts []*connectionmanager.OpenSearchCluster_Host, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsOpensearchClusterHosts == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModelType)
	}
	if listState.IsNull() {
		listState = types.ListNull(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModelType)
	}
	stateVals := make([]yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModel, 0)
	diags.Append(listState.ElementsAs(ctx, &stateVals, false)...)
	var yandexConnectionmanagerConnectionParamsOpensearchClusterHostsValues []attr.Value
	for i, elem := range yandexConnectionmanagerConnectionParamsOpensearchClusterHosts {
		state := yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModel{}
		if len(stateVals) > i {
			state = stateVals[i]
		}
		val := flattenYandexConnectionmanagerConnectionParamsOpensearchClusterHostStruct(ctx, elem, state, diags)
		yandexConnectionmanagerConnectionParamsOpensearchClusterHostsValues = append(yandexConnectionmanagerConnectionParamsOpensearchClusterHostsValues, val)
	}

	value, diag := types.ListValue(yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModelType, yandexConnectionmanagerConnectionParamsOpensearchClusterHostsValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsOpensearchClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchClusterHostsState types.List, diags *diag.Diagnostics) []*connectionmanager.OpenSearchCluster_Host {
	if yandexConnectionmanagerConnectionParamsOpensearchClusterHostsState.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchClusterHostsState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsOpensearchClusterHostsState.Elements()) == 0 {
		return []*connectionmanager.OpenSearchCluster_Host{}
	}
	yandexConnectionmanagerConnectionParamsOpensearchClusterHostsRes := make([]*connectionmanager.OpenSearchCluster_Host, 0, len(yandexConnectionmanagerConnectionParamsOpensearchClusterHostsState.Elements()))
	yandexConnectionmanagerConnectionParamsOpensearchClusterHostsType := make([]yandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModel, 0, len(yandexConnectionmanagerConnectionParamsOpensearchClusterHostsState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsOpensearchClusterHostsState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsOpensearchClusterHostsType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsOpensearchClusterHostsType {
		yandexConnectionmanagerConnectionParamsOpensearchClusterHostsRes = append(yandexConnectionmanagerConnectionParamsOpensearchClusterHostsRes, expandYandexConnectionmanagerConnectionParamsOpensearchClusterHostStructModel(ctx, elem, diags))
	}
	return yandexConnectionmanagerConnectionParamsOpensearchClusterHostsRes
}

type yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsModel struct {
	Disabled types.Object `tfsdk:"disabled"`
	Tls      types.Object `tfsdk:"tls"`
}

var yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"disabled": yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledModelType,
		"tls":      yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParams(ctx context.Context,
	yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParams *connectionmanager.TLSParams,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParams == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsModel{
		Disabled: flattenYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParams.GetDisabled(), diags),
		Tls:      flattenYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParams.GetTls(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParams(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	if yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParams yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsModel
	diags.Append(yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParams, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsModel(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParams, diags)
}

func expandYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsModel, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	value := &connectionmanager.TLSParams{}
	if !(yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState.Disabled.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState.Disabled.IsUnknown() || yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState.Disabled.Equal(types.Object{})) {
		value.SetDisabled(expandYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState.Disabled, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState.Tls.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState.Tls.IsUnknown() || yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState.Tls.Equal(types.Object{})) {
		value.SetTls(expandYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsState.Tls, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledModel struct {
}

var yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{},
}

func flattenYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabled(ctx context.Context,
	yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabled *emptypb.Empty,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabled == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledModelType.AttrTypes, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledModel{})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabled(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledState types.Object, diags *diag.Diagnostics) *emptypb.Empty {
	if yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledState.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabled yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledModel
	diags.Append(yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledState.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabled, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledModel(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabled, diags)
}

func expandYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledModel(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledState yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsDisabledModel, diags *diag.Diagnostics) *emptypb.Empty {
	value := &emptypb.Empty{}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsModel struct {
	CaCertificate types.String `tfsdk:"ca_certificate"`
}

var yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"ca_certificate": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTls(ctx context.Context,
	yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTls *connectionmanager.TLSConfig,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTls == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsModel{
		CaCertificate: types.StringValue(yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTls.GetCaCertificate()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTls(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	if yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsState.IsNull() || yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTls yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsModel
	diags.Append(yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsState.As(ctx, &yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTls, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsModel(ctx, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTls, diags)
}

func expandYandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsState yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsModel, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	value := &connectionmanager.TLSConfig{}
	value.SetCaCertificate(yandexConnectionmanagerConnectionParamsOpensearchClusterTlsParamsTlsState.CaCertificate.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsPostgresqlModel struct {
	Auth             types.Object `tfsdk:"auth"`
	Cluster          types.Object `tfsdk:"cluster"`
	Databases        types.List   `tfsdk:"databases"`
	ManagedClusterId types.String `tfsdk:"managed_cluster_id"`
}

var yandexConnectionmanagerConnectionParamsPostgresqlModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"auth":               yandexConnectionmanagerConnectionParamsPostgresqlAuthModelType,
		"cluster":            yandexConnectionmanagerConnectionParamsPostgresqlClusterModelType,
		"databases":          types.ListType{ElemType: types.StringType},
		"managed_cluster_id": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsPostgresql(ctx context.Context,
	yandexConnectionmanagerConnectionParamsPostgresql *connectionmanager.PostgreSQLConnection,
	state yandexConnectionmanagerConnectionParamsPostgresqlModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsPostgresql == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsPostgresqlModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsPostgresqlModelType.AttrTypes, yandexConnectionmanagerConnectionParamsPostgresqlModel{
		Auth:             flattenYandexConnectionmanagerConnectionParamsPostgresqlAuth(ctx, yandexConnectionmanagerConnectionParamsPostgresql.GetAuth(), converter.ExpandObject(ctx, state.Auth, yandexConnectionmanagerConnectionParamsPostgresqlAuthModel{}, diags).(yandexConnectionmanagerConnectionParamsPostgresqlAuthModel), diags),
		Cluster:          flattenYandexConnectionmanagerConnectionParamsPostgresqlCluster(ctx, yandexConnectionmanagerConnectionParamsPostgresql.GetCluster(), converter.ExpandObject(ctx, state.Cluster, yandexConnectionmanagerConnectionParamsPostgresqlClusterModel{}, diags).(yandexConnectionmanagerConnectionParamsPostgresqlClusterModel), diags),
		Databases:        flattenYandexConnectionmanagerConnectionParamsPostgresqlDatabases(ctx, yandexConnectionmanagerConnectionParamsPostgresql.GetDatabases(), state.Databases, diags),
		ManagedClusterId: types.StringValue(yandexConnectionmanagerConnectionParamsPostgresql.GetManagedClusterId()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsPostgresql(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlState types.Object, diags *diag.Diagnostics) *connectionmanager.PostgreSQLConnection {
	if yandexConnectionmanagerConnectionParamsPostgresqlState.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsPostgresql yandexConnectionmanagerConnectionParamsPostgresqlModel
	diags.Append(yandexConnectionmanagerConnectionParamsPostgresqlState.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresql, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsPostgresqlModel(ctx, yandexConnectionmanagerConnectionParamsPostgresql, diags)
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlModel(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlState yandexConnectionmanagerConnectionParamsPostgresqlModel, diags *diag.Diagnostics) *connectionmanager.PostgreSQLConnection {
	value := &connectionmanager.PostgreSQLConnection{}
	value.SetAuth(expandYandexConnectionmanagerConnectionParamsPostgresqlAuth(ctx, yandexConnectionmanagerConnectionParamsPostgresqlState.Auth, diags))
	value.SetCluster(expandYandexConnectionmanagerConnectionParamsPostgresqlCluster(ctx, yandexConnectionmanagerConnectionParamsPostgresqlState.Cluster, diags))
	value.SetDatabases(expandYandexConnectionmanagerConnectionParamsPostgresqlDatabases(ctx, yandexConnectionmanagerConnectionParamsPostgresqlState.Databases, diags))
	value.SetManagedClusterId(yandexConnectionmanagerConnectionParamsPostgresqlState.ManagedClusterId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsPostgresqlAuthModel struct {
	UserPassword types.Object `tfsdk:"user_password"`
}

var yandexConnectionmanagerConnectionParamsPostgresqlAuthModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"user_password": yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsPostgresqlAuth(ctx context.Context,
	yandexConnectionmanagerConnectionParamsPostgresqlAuth *connectionmanager.PostgreSQLAuth,
	state yandexConnectionmanagerConnectionParamsPostgresqlAuthModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsPostgresqlAuth == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsPostgresqlAuthModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthModelType.AttrTypes, yandexConnectionmanagerConnectionParamsPostgresqlAuthModel{
		UserPassword: flattenYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuth.GetUserPassword(), converter.ExpandObject(ctx, state.UserPassword, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordModel), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlAuth(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlAuthState types.Object, diags *diag.Diagnostics) *connectionmanager.PostgreSQLAuth {
	if yandexConnectionmanagerConnectionParamsPostgresqlAuthState.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlAuthState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsPostgresqlAuth yandexConnectionmanagerConnectionParamsPostgresqlAuthModel
	diags.Append(yandexConnectionmanagerConnectionParamsPostgresqlAuthState.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuth, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsPostgresqlAuthModel(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuth, diags)
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlAuthModel(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlAuthState yandexConnectionmanagerConnectionParamsPostgresqlAuthModel, diags *diag.Diagnostics) *connectionmanager.PostgreSQLAuth {
	value := &connectionmanager.PostgreSQLAuth{}
	if !(yandexConnectionmanagerConnectionParamsPostgresqlAuthState.UserPassword.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlAuthState.UserPassword.IsUnknown() || yandexConnectionmanagerConnectionParamsPostgresqlAuthState.UserPassword.Equal(types.Object{})) {
		value.SetUserPassword(expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthState.UserPassword, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordModel struct {
	Password types.Object `tfsdk:"password"`
	User     types.String `tfsdk:"user"`
}

var yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"password": yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordModelType,
		"user":     types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPassword *connectionmanager.UserPasswordAuth,
	state yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordModel{
		Password: flattenYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPassword.GetPassword(), converter.ExpandObject(ctx, state.Password, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordModel), diags),
		User:     types.StringValue(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPassword.GetUser()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.UserPasswordAuth {
	if yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPassword yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordModel(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordState yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordModel, diags *diag.Diagnostics) *connectionmanager.UserPasswordAuth {
	value := &connectionmanager.UserPasswordAuth{}
	value.SetPassword(expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordState.Password, diags))
	value.SetUser(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordState.User.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordModel struct {
	LockboxSecretKey          types.String `tfsdk:"lockbox_secret_key"`
	PasswordGenerationOptions types.Object `tfsdk:"password_generation_options"`
	Raw                       types.String `tfsdk:"raw"`
}

var yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"lockbox_secret_key":          types.StringType,
		"password_generation_options": yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsModelType,
		"raw":                         types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPassword *connectionmanager.Password,
	state yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordModel{
		LockboxSecretKey:          types.StringValue(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPassword.GetLockboxSecretKey()),
		PasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPassword.GetPasswordGenerationOptions(), diags),
		Raw:                       state.Raw,
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.Password {
	if yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPassword yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordModel(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordModel, diags *diag.Diagnostics) *connectionmanager.Password {
	value := &connectionmanager.Password{}
	if !(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState.LockboxSecretKey.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState.LockboxSecretKey.IsUnknown() || yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState.LockboxSecretKey.Equal(types.StringValue(""))) {
		value.SetLockboxSecretKey(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState.LockboxSecretKey.ValueString())
	}
	value.SetPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState.PasswordGenerationOptions, diags))
	value.SetRaw(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordState.Raw.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsModel struct {
	Cookie                           types.String `tfsdk:"cookie"`
	LockboxPasswordGenerationOptions types.Object `tfsdk:"lockbox_password_generation_options"`
}

var yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cookie":                              types.StringType,
		"lockbox_password_generation_options": yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptions *connectionmanager.PasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsModel{
		Cookie:                           types.StringValue(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptions.GetCookie()),
		LockboxPasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptions.GetLockboxPasswordGenerationOptions(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptions yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	value := &connectionmanager.PasswordGenerationOptions{}
	value.SetCookie(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie.ValueString())
	if !(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsUnknown() || yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.Equal(types.Object{})) {
		value.SetLockboxPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel struct {
	ExcludedPunctuation types.String `tfsdk:"excluded_punctuation"`
	IncludeDigits       types.Bool   `tfsdk:"include_digits"`
	IncludeLowercase    types.Bool   `tfsdk:"include_lowercase"`
	IncludePunctuation  types.Bool   `tfsdk:"include_punctuation"`
	IncludeUppercase    types.Bool   `tfsdk:"include_uppercase"`
	IncludedPunctuation types.String `tfsdk:"included_punctuation"`
	Length              types.Int64  `tfsdk:"length"`
}

var yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"excluded_punctuation": types.StringType,
		"include_digits":       types.BoolType,
		"include_lowercase":    types.BoolType,
		"include_punctuation":  types.BoolType,
		"include_uppercase":    types.BoolType,
		"included_punctuation": types.StringType,
		"length":               types.Int64Type,
	},
}

func flattenYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions *connectionmanager.LockboxPasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel{
		ExcludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetExcludedPunctuation()),
		IncludeDigits:       types.BoolValue(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeDigits().GetValue()),
		IncludeLowercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeLowercase().GetValue()),
		IncludePunctuation:  types.BoolValue(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludePunctuation().GetValue()),
		IncludeUppercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeUppercase().GetValue()),
		IncludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludedPunctuation()),
		Length:              types.Int64Value(int64(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetLength())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	value := &connectionmanager.LockboxPasswordGenerationOptions{}
	value.SetExcludedPunctuation(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation.ValueString())
	value.SetIncludeDigits(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits.ValueBool()))
	value.SetIncludeLowercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase.ValueBool()))
	value.SetIncludePunctuation(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation.ValueBool()))
	value.SetIncludeUppercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase.ValueBool()))
	value.SetIncludedPunctuation(yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation.ValueString())
	value.SetLength((yandexConnectionmanagerConnectionParamsPostgresqlAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsPostgresqlClusterModel struct {
	Hosts     types.List   `tfsdk:"hosts"`
	TlsParams types.Object `tfsdk:"tls_params"`
}

var yandexConnectionmanagerConnectionParamsPostgresqlClusterModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"hosts":      types.ListType{ElemType: yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModelType},
		"tls_params": yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsPostgresqlCluster(ctx context.Context,
	yandexConnectionmanagerConnectionParamsPostgresqlCluster *connectionmanager.PostgreSQLCluster,
	state yandexConnectionmanagerConnectionParamsPostgresqlClusterModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsPostgresqlCluster == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsPostgresqlClusterModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterModelType.AttrTypes, yandexConnectionmanagerConnectionParamsPostgresqlClusterModel{
		Hosts:     flattenYandexConnectionmanagerConnectionParamsPostgresqlClusterHosts(ctx, yandexConnectionmanagerConnectionParamsPostgresqlCluster.GetHosts(), state.Hosts, diags),
		TlsParams: flattenYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsPostgresqlCluster.GetTlsParams(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlCluster(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlClusterState types.Object, diags *diag.Diagnostics) *connectionmanager.PostgreSQLCluster {
	if yandexConnectionmanagerConnectionParamsPostgresqlClusterState.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlClusterState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsPostgresqlCluster yandexConnectionmanagerConnectionParamsPostgresqlClusterModel
	diags.Append(yandexConnectionmanagerConnectionParamsPostgresqlClusterState.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlCluster, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsPostgresqlClusterModel(ctx, yandexConnectionmanagerConnectionParamsPostgresqlCluster, diags)
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlClusterModel(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlClusterState yandexConnectionmanagerConnectionParamsPostgresqlClusterModel, diags *diag.Diagnostics) *connectionmanager.PostgreSQLCluster {
	value := &connectionmanager.PostgreSQLCluster{}
	value.SetHosts(expandYandexConnectionmanagerConnectionParamsPostgresqlClusterHosts(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterState.Hosts, diags))
	value.SetTlsParams(expandYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterState.TlsParams, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsPostgresqlClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlClusterHosts []*connectionmanager.PostgreSQLCluster_Host, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsPostgresqlClusterHosts == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModelType)
	}
	var yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsPostgresqlClusterHosts {
		val := flattenYandexConnectionmanagerConnectionParamsPostgresqlClusterHostStruct(ctx, elem, diags)
		yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsValues = append(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsValues, val)
	}

	value, diag := types.ListValue(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModelType, yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsState types.List, diags *diag.Diagnostics) []*connectionmanager.PostgreSQLCluster_Host {
	if yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsState.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsState.Elements()) == 0 {
		return []*connectionmanager.PostgreSQLCluster_Host{}
	}
	yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsRes := make([]*connectionmanager.PostgreSQLCluster_Host, 0, len(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsState.Elements()))
	yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsType := make([]yandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModel, 0, len(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsType {
		yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsRes = append(yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsRes, expandYandexConnectionmanagerConnectionParamsPostgresqlClusterHostStructModel(ctx, elem, diags))
	}
	return yandexConnectionmanagerConnectionParamsPostgresqlClusterHostsRes
}

type yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsModel struct {
	Disabled types.Object `tfsdk:"disabled"`
	Tls      types.Object `tfsdk:"tls"`
}

var yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"disabled": yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledModelType,
		"tls":      yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParams(ctx context.Context,
	yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParams *connectionmanager.TLSParams,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParams == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsModel{
		Disabled: flattenYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParams.GetDisabled(), diags),
		Tls:      flattenYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParams.GetTls(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParams(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	if yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParams yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsModel
	diags.Append(yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParams, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsModel(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParams, diags)
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsModel, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	value := &connectionmanager.TLSParams{}
	if !(yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState.Disabled.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState.Disabled.IsUnknown() || yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState.Disabled.Equal(types.Object{})) {
		value.SetDisabled(expandYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState.Disabled, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState.Tls.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState.Tls.IsUnknown() || yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState.Tls.Equal(types.Object{})) {
		value.SetTls(expandYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsState.Tls, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledModel struct {
}

var yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{},
}

func flattenYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabled(ctx context.Context,
	yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabled *emptypb.Empty,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabled == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledModelType.AttrTypes, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledModel{})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabled(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledState types.Object, diags *diag.Diagnostics) *emptypb.Empty {
	if yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledState.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabled yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledModel
	diags.Append(yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledState.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabled, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledModel(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabled, diags)
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledModel(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledState yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsDisabledModel, diags *diag.Diagnostics) *emptypb.Empty {
	value := &emptypb.Empty{}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsModel struct {
	CaCertificate types.String `tfsdk:"ca_certificate"`
}

var yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"ca_certificate": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTls(ctx context.Context,
	yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTls *connectionmanager.TLSConfig,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTls == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsModel{
		CaCertificate: types.StringValue(yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTls.GetCaCertificate()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTls(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	if yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsState.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTls yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsModel
	diags.Append(yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsState.As(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTls, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsModel(ctx, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTls, diags)
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsState yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsModel, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	value := &connectionmanager.TLSConfig{}
	value.SetCaCertificate(yandexConnectionmanagerConnectionParamsPostgresqlClusterTlsParamsTlsState.CaCertificate.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsPostgresqlDatabases(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlDatabases []string, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsPostgresqlDatabases == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(types.StringType)
	}
	var yandexConnectionmanagerConnectionParamsPostgresqlDatabasesValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsPostgresqlDatabases {
		val := types.StringValue(elem)
		yandexConnectionmanagerConnectionParamsPostgresqlDatabasesValues = append(yandexConnectionmanagerConnectionParamsPostgresqlDatabasesValues, val)
	}

	value, diag := types.ListValue(types.StringType, yandexConnectionmanagerConnectionParamsPostgresqlDatabasesValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsPostgresqlDatabases(ctx context.Context, yandexConnectionmanagerConnectionParamsPostgresqlDatabasesState types.List, diags *diag.Diagnostics) []string {
	if yandexConnectionmanagerConnectionParamsPostgresqlDatabasesState.IsNull() || yandexConnectionmanagerConnectionParamsPostgresqlDatabasesState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsPostgresqlDatabasesState.Elements()) == 0 {
		return []string{}
	}
	yandexConnectionmanagerConnectionParamsPostgresqlDatabasesRes := make([]string, 0, len(yandexConnectionmanagerConnectionParamsPostgresqlDatabasesState.Elements()))
	yandexConnectionmanagerConnectionParamsPostgresqlDatabasesType := make([]types.String, 0, len(yandexConnectionmanagerConnectionParamsPostgresqlDatabasesState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsPostgresqlDatabasesState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsPostgresqlDatabasesType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsPostgresqlDatabasesType {
		yandexConnectionmanagerConnectionParamsPostgresqlDatabasesRes = append(yandexConnectionmanagerConnectionParamsPostgresqlDatabasesRes, elem.ValueString())
	}
	return yandexConnectionmanagerConnectionParamsPostgresqlDatabasesRes
}

type yandexConnectionmanagerConnectionParamsRedisModel struct {
	Auth      types.Object `tfsdk:"auth"`
	Cluster   types.Object `tfsdk:"cluster"`
	Databases types.List   `tfsdk:"databases"`
}

var yandexConnectionmanagerConnectionParamsRedisModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"auth":      yandexConnectionmanagerConnectionParamsRedisAuthModelType,
		"cluster":   yandexConnectionmanagerConnectionParamsRedisClusterModelType,
		"databases": types.ListType{ElemType: types.Int64Type},
	},
}

func flattenYandexConnectionmanagerConnectionParamsRedis(ctx context.Context,
	yandexConnectionmanagerConnectionParamsRedis *connectionmanager.RedisConnection,
	state yandexConnectionmanagerConnectionParamsRedisModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsRedis == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsRedisModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsRedisModelType.AttrTypes, yandexConnectionmanagerConnectionParamsRedisModel{
		Auth:      flattenYandexConnectionmanagerConnectionParamsRedisAuth(ctx, yandexConnectionmanagerConnectionParamsRedis.GetAuth(), converter.ExpandObject(ctx, state.Auth, yandexConnectionmanagerConnectionParamsRedisAuthModel{}, diags).(yandexConnectionmanagerConnectionParamsRedisAuthModel), diags),
		Cluster:   flattenYandexConnectionmanagerConnectionParamsRedisCluster(ctx, yandexConnectionmanagerConnectionParamsRedis.GetCluster(), converter.ExpandObject(ctx, state.Cluster, yandexConnectionmanagerConnectionParamsRedisClusterModel{}, diags).(yandexConnectionmanagerConnectionParamsRedisClusterModel), diags),
		Databases: flattenYandexConnectionmanagerConnectionParamsRedisDatabases(ctx, yandexConnectionmanagerConnectionParamsRedis.GetDatabases(), state.Databases, diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsRedis(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisState types.Object, diags *diag.Diagnostics) *connectionmanager.RedisConnection {
	if yandexConnectionmanagerConnectionParamsRedisState.IsNull() || yandexConnectionmanagerConnectionParamsRedisState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsRedis yandexConnectionmanagerConnectionParamsRedisModel
	diags.Append(yandexConnectionmanagerConnectionParamsRedisState.As(ctx, &yandexConnectionmanagerConnectionParamsRedis, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsRedisModel(ctx, yandexConnectionmanagerConnectionParamsRedis, diags)
}

func expandYandexConnectionmanagerConnectionParamsRedisModel(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisState yandexConnectionmanagerConnectionParamsRedisModel, diags *diag.Diagnostics) *connectionmanager.RedisConnection {
	value := &connectionmanager.RedisConnection{}
	value.SetAuth(expandYandexConnectionmanagerConnectionParamsRedisAuth(ctx, yandexConnectionmanagerConnectionParamsRedisState.Auth, diags))
	value.SetCluster(expandYandexConnectionmanagerConnectionParamsRedisCluster(ctx, yandexConnectionmanagerConnectionParamsRedisState.Cluster, diags))
	value.SetDatabases(expandYandexConnectionmanagerConnectionParamsRedisDatabases(ctx, yandexConnectionmanagerConnectionParamsRedisState.Databases, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsRedisAuthModel struct {
	UserPassword types.Object `tfsdk:"user_password"`
}

var yandexConnectionmanagerConnectionParamsRedisAuthModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"user_password": yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsRedisAuth(ctx context.Context,
	yandexConnectionmanagerConnectionParamsRedisAuth *connectionmanager.RedisAuth,
	state yandexConnectionmanagerConnectionParamsRedisAuthModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsRedisAuth == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsRedisAuthModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsRedisAuthModelType.AttrTypes, yandexConnectionmanagerConnectionParamsRedisAuthModel{
		UserPassword: flattenYandexConnectionmanagerConnectionParamsRedisAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsRedisAuth.GetUserPassword(), converter.ExpandObject(ctx, state.UserPassword, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordModel), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsRedisAuth(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisAuthState types.Object, diags *diag.Diagnostics) *connectionmanager.RedisAuth {
	if yandexConnectionmanagerConnectionParamsRedisAuthState.IsNull() || yandexConnectionmanagerConnectionParamsRedisAuthState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsRedisAuth yandexConnectionmanagerConnectionParamsRedisAuthModel
	diags.Append(yandexConnectionmanagerConnectionParamsRedisAuthState.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuth, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsRedisAuthModel(ctx, yandexConnectionmanagerConnectionParamsRedisAuth, diags)
}

func expandYandexConnectionmanagerConnectionParamsRedisAuthModel(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisAuthState yandexConnectionmanagerConnectionParamsRedisAuthModel, diags *diag.Diagnostics) *connectionmanager.RedisAuth {
	value := &connectionmanager.RedisAuth{}
	if !(yandexConnectionmanagerConnectionParamsRedisAuthState.UserPassword.IsNull() || yandexConnectionmanagerConnectionParamsRedisAuthState.UserPassword.IsUnknown() || yandexConnectionmanagerConnectionParamsRedisAuthState.UserPassword.Equal(types.Object{})) {
		value.SetUserPassword(expandYandexConnectionmanagerConnectionParamsRedisAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsRedisAuthState.UserPassword, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordModel struct {
	Password types.Object `tfsdk:"password"`
	User     types.String `tfsdk:"user"`
}

var yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"password": yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordModelType,
		"user":     types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsRedisAuthUserPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsRedisAuthUserPassword *connectionmanager.RedisAuth_UserPasswordAuth,
	state yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsRedisAuthUserPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordModel{
		Password: flattenYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsRedisAuthUserPassword.GetPassword(), converter.ExpandObject(ctx, state.Password, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordModel), diags),
		User:     types.StringValue(yandexConnectionmanagerConnectionParamsRedisAuthUserPassword.GetUser()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsRedisAuthUserPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.RedisAuth_UserPasswordAuth {
	if yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsRedisAuthUserPassword yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuthUserPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordModel(ctx, yandexConnectionmanagerConnectionParamsRedisAuthUserPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordState yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordModel, diags *diag.Diagnostics) *connectionmanager.RedisAuth_UserPasswordAuth {
	value := &connectionmanager.RedisAuth_UserPasswordAuth{}
	value.SetPassword(expandYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordState.Password, diags))
	value.SetUser(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordState.User.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordModel struct {
	LockboxSecretKey          types.String `tfsdk:"lockbox_secret_key"`
	PasswordGenerationOptions types.Object `tfsdk:"password_generation_options"`
	Raw                       types.String `tfsdk:"raw"`
}

var yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"lockbox_secret_key":          types.StringType,
		"password_generation_options": yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsModelType,
		"raw":                         types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPassword *connectionmanager.Password,
	state yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordModel{
		LockboxSecretKey:          types.StringValue(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPassword.GetLockboxSecretKey()),
		PasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPassword.GetPasswordGenerationOptions(), diags),
		Raw:                       state.Raw,
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.Password {
	if yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPassword yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordModel(ctx, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordModel, diags *diag.Diagnostics) *connectionmanager.Password {
	value := &connectionmanager.Password{}
	if !(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState.LockboxSecretKey.IsNull() || yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState.LockboxSecretKey.IsUnknown() || yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState.LockboxSecretKey.Equal(types.StringValue(""))) {
		value.SetLockboxSecretKey(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState.LockboxSecretKey.ValueString())
	}
	value.SetPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState.PasswordGenerationOptions, diags))
	value.SetRaw(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordState.Raw.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsModel struct {
	Cookie                           types.String `tfsdk:"cookie"`
	LockboxPasswordGenerationOptions types.Object `tfsdk:"lockbox_password_generation_options"`
}

var yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cookie":                              types.StringType,
		"lockbox_password_generation_options": yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptions *connectionmanager.PasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsModel{
		Cookie:                           types.StringValue(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptions.GetCookie()),
		LockboxPasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptions.GetLockboxPasswordGenerationOptions(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptions yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	value := &connectionmanager.PasswordGenerationOptions{}
	value.SetCookie(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie.ValueString())
	if !(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsNull() || yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsUnknown() || yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.Equal(types.Object{})) {
		value.SetLockboxPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel struct {
	ExcludedPunctuation types.String `tfsdk:"excluded_punctuation"`
	IncludeDigits       types.Bool   `tfsdk:"include_digits"`
	IncludeLowercase    types.Bool   `tfsdk:"include_lowercase"`
	IncludePunctuation  types.Bool   `tfsdk:"include_punctuation"`
	IncludeUppercase    types.Bool   `tfsdk:"include_uppercase"`
	IncludedPunctuation types.String `tfsdk:"included_punctuation"`
	Length              types.Int64  `tfsdk:"length"`
}

var yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"excluded_punctuation": types.StringType,
		"include_digits":       types.BoolType,
		"include_lowercase":    types.BoolType,
		"include_punctuation":  types.BoolType,
		"include_uppercase":    types.BoolType,
		"included_punctuation": types.StringType,
		"length":               types.Int64Type,
	},
}

func flattenYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions *connectionmanager.LockboxPasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel{
		ExcludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetExcludedPunctuation()),
		IncludeDigits:       types.BoolValue(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeDigits().GetValue()),
		IncludeLowercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeLowercase().GetValue()),
		IncludePunctuation:  types.BoolValue(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludePunctuation().GetValue()),
		IncludeUppercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeUppercase().GetValue()),
		IncludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludedPunctuation()),
		Length:              types.Int64Value(int64(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetLength())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	value := &connectionmanager.LockboxPasswordGenerationOptions{}
	value.SetExcludedPunctuation(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation.ValueString())
	value.SetIncludeDigits(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits.ValueBool()))
	value.SetIncludeLowercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase.ValueBool()))
	value.SetIncludePunctuation(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation.ValueBool()))
	value.SetIncludeUppercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase.ValueBool()))
	value.SetIncludedPunctuation(yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation.ValueString())
	value.SetLength((yandexConnectionmanagerConnectionParamsRedisAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsRedisClusterModel struct {
	Hosts        types.List   `tfsdk:"hosts"`
	SentinelPort types.Int64  `tfsdk:"sentinel_port"`
	TlsParams    types.Object `tfsdk:"tls_params"`
}

var yandexConnectionmanagerConnectionParamsRedisClusterModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"hosts":         types.ListType{ElemType: yandexConnectionmanagerConnectionParamsRedisClusterHostStructModelType},
		"sentinel_port": types.Int64Type,
		"tls_params":    yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsRedisCluster(ctx context.Context,
	yandexConnectionmanagerConnectionParamsRedisCluster *connectionmanager.RedisCluster,
	state yandexConnectionmanagerConnectionParamsRedisClusterModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsRedisCluster == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsRedisClusterModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsRedisClusterModelType.AttrTypes, yandexConnectionmanagerConnectionParamsRedisClusterModel{
		Hosts:        flattenYandexConnectionmanagerConnectionParamsRedisClusterHosts(ctx, yandexConnectionmanagerConnectionParamsRedisCluster.GetHosts(), state.Hosts, diags),
		SentinelPort: types.Int64Value(int64(yandexConnectionmanagerConnectionParamsRedisCluster.GetSentinelPort())),
		TlsParams:    flattenYandexConnectionmanagerConnectionParamsRedisClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsRedisCluster.GetTlsParams(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsRedisCluster(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisClusterState types.Object, diags *diag.Diagnostics) *connectionmanager.RedisCluster {
	if yandexConnectionmanagerConnectionParamsRedisClusterState.IsNull() || yandexConnectionmanagerConnectionParamsRedisClusterState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsRedisCluster yandexConnectionmanagerConnectionParamsRedisClusterModel
	diags.Append(yandexConnectionmanagerConnectionParamsRedisClusterState.As(ctx, &yandexConnectionmanagerConnectionParamsRedisCluster, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsRedisClusterModel(ctx, yandexConnectionmanagerConnectionParamsRedisCluster, diags)
}

func expandYandexConnectionmanagerConnectionParamsRedisClusterModel(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisClusterState yandexConnectionmanagerConnectionParamsRedisClusterModel, diags *diag.Diagnostics) *connectionmanager.RedisCluster {
	value := &connectionmanager.RedisCluster{}
	value.SetHosts(expandYandexConnectionmanagerConnectionParamsRedisClusterHosts(ctx, yandexConnectionmanagerConnectionParamsRedisClusterState.Hosts, diags))
	value.SetSentinelPort((yandexConnectionmanagerConnectionParamsRedisClusterState.SentinelPort.ValueInt64()))
	value.SetTlsParams(expandYandexConnectionmanagerConnectionParamsRedisClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsRedisClusterState.TlsParams, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsRedisClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisClusterHosts []*connectionmanager.RedisCluster_Host, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsRedisClusterHosts == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(yandexConnectionmanagerConnectionParamsRedisClusterHostStructModelType)
	}
	var yandexConnectionmanagerConnectionParamsRedisClusterHostsValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsRedisClusterHosts {
		val := flattenYandexConnectionmanagerConnectionParamsRedisClusterHostStruct(ctx, elem, diags)
		yandexConnectionmanagerConnectionParamsRedisClusterHostsValues = append(yandexConnectionmanagerConnectionParamsRedisClusterHostsValues, val)
	}

	value, diag := types.ListValue(yandexConnectionmanagerConnectionParamsRedisClusterHostStructModelType, yandexConnectionmanagerConnectionParamsRedisClusterHostsValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsRedisClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisClusterHostsState types.List, diags *diag.Diagnostics) []*connectionmanager.RedisCluster_Host {
	if yandexConnectionmanagerConnectionParamsRedisClusterHostsState.IsNull() || yandexConnectionmanagerConnectionParamsRedisClusterHostsState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsRedisClusterHostsState.Elements()) == 0 {
		return []*connectionmanager.RedisCluster_Host{}
	}
	yandexConnectionmanagerConnectionParamsRedisClusterHostsRes := make([]*connectionmanager.RedisCluster_Host, 0, len(yandexConnectionmanagerConnectionParamsRedisClusterHostsState.Elements()))
	yandexConnectionmanagerConnectionParamsRedisClusterHostsType := make([]yandexConnectionmanagerConnectionParamsRedisClusterHostStructModel, 0, len(yandexConnectionmanagerConnectionParamsRedisClusterHostsState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsRedisClusterHostsState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsRedisClusterHostsType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsRedisClusterHostsType {
		yandexConnectionmanagerConnectionParamsRedisClusterHostsRes = append(yandexConnectionmanagerConnectionParamsRedisClusterHostsRes, expandYandexConnectionmanagerConnectionParamsRedisClusterHostStructModel(ctx, elem, diags))
	}
	return yandexConnectionmanagerConnectionParamsRedisClusterHostsRes
}

type yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsModel struct {
	Disabled types.Object `tfsdk:"disabled"`
	Tls      types.Object `tfsdk:"tls"`
}

var yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"disabled": yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledModelType,
		"tls":      yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsRedisClusterTlsParams(ctx context.Context,
	yandexConnectionmanagerConnectionParamsRedisClusterTlsParams *connectionmanager.TLSParams,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsRedisClusterTlsParams == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsModel{
		Disabled: flattenYandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsRedisClusterTlsParams.GetDisabled(), diags),
		Tls:      flattenYandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsRedisClusterTlsParams.GetTls(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsRedisClusterTlsParams(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	if yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState.IsNull() || yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsRedisClusterTlsParams yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsModel
	diags.Append(yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState.As(ctx, &yandexConnectionmanagerConnectionParamsRedisClusterTlsParams, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsRedisClusterTlsParamsModel(ctx, yandexConnectionmanagerConnectionParamsRedisClusterTlsParams, diags)
}

func expandYandexConnectionmanagerConnectionParamsRedisClusterTlsParamsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsModel, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	value := &connectionmanager.TLSParams{}
	if !(yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState.Disabled.IsNull() || yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState.Disabled.IsUnknown() || yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState.Disabled.Equal(types.Object{})) {
		value.SetDisabled(expandYandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState.Disabled, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState.Tls.IsNull() || yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState.Tls.IsUnknown() || yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState.Tls.Equal(types.Object{})) {
		value.SetTls(expandYandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsState.Tls, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledModel struct {
}

var yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{},
}

func flattenYandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabled(ctx context.Context,
	yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabled *emptypb.Empty,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabled == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledModelType.AttrTypes, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledModel{})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabled(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledState types.Object, diags *diag.Diagnostics) *emptypb.Empty {
	if yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledState.IsNull() || yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabled yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledModel
	diags.Append(yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledState.As(ctx, &yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabled, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledModel(ctx, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabled, diags)
}

func expandYandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledModel(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledState yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsDisabledModel, diags *diag.Diagnostics) *emptypb.Empty {
	value := &emptypb.Empty{}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsModel struct {
	CaCertificate types.String `tfsdk:"ca_certificate"`
}

var yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"ca_certificate": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTls(ctx context.Context,
	yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTls *connectionmanager.TLSConfig,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTls == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsModel{
		CaCertificate: types.StringValue(yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTls.GetCaCertificate()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTls(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	if yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsState.IsNull() || yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTls yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsModel
	diags.Append(yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsState.As(ctx, &yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTls, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsModel(ctx, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTls, diags)
}

func expandYandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsState yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsModel, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	value := &connectionmanager.TLSConfig{}
	value.SetCaCertificate(yandexConnectionmanagerConnectionParamsRedisClusterTlsParamsTlsState.CaCertificate.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsRedisDatabases(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisDatabases []int64, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsRedisDatabases == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(types.Int64Type)
	}
	var yandexConnectionmanagerConnectionParamsRedisDatabasesValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsRedisDatabases {
		val := types.Int64Value(int64(elem))
		yandexConnectionmanagerConnectionParamsRedisDatabasesValues = append(yandexConnectionmanagerConnectionParamsRedisDatabasesValues, val)
	}

	value, diag := types.ListValue(types.Int64Type, yandexConnectionmanagerConnectionParamsRedisDatabasesValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsRedisDatabases(ctx context.Context, yandexConnectionmanagerConnectionParamsRedisDatabasesState types.List, diags *diag.Diagnostics) []int64 {
	if yandexConnectionmanagerConnectionParamsRedisDatabasesState.IsNull() || yandexConnectionmanagerConnectionParamsRedisDatabasesState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsRedisDatabasesState.Elements()) == 0 {
		return []int64{}
	}
	yandexConnectionmanagerConnectionParamsRedisDatabasesRes := make([]int64, 0, len(yandexConnectionmanagerConnectionParamsRedisDatabasesState.Elements()))
	yandexConnectionmanagerConnectionParamsRedisDatabasesType := make([]types.Int64, 0, len(yandexConnectionmanagerConnectionParamsRedisDatabasesState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsRedisDatabasesState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsRedisDatabasesType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsRedisDatabasesType {
		yandexConnectionmanagerConnectionParamsRedisDatabasesRes = append(yandexConnectionmanagerConnectionParamsRedisDatabasesRes, int64(elem.ValueInt64()))
	}
	return yandexConnectionmanagerConnectionParamsRedisDatabasesRes
}

type yandexConnectionmanagerConnectionParamsTrinoModel struct {
	Auth    types.Object `tfsdk:"auth"`
	Cluster types.Object `tfsdk:"cluster"`
}

var yandexConnectionmanagerConnectionParamsTrinoModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"auth":    yandexConnectionmanagerConnectionParamsTrinoAuthModelType,
		"cluster": yandexConnectionmanagerConnectionParamsTrinoClusterModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsTrino(ctx context.Context,
	yandexConnectionmanagerConnectionParamsTrino *connectionmanager.TrinoConnection,
	state yandexConnectionmanagerConnectionParamsTrinoModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsTrino == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsTrinoModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsTrinoModelType.AttrTypes, yandexConnectionmanagerConnectionParamsTrinoModel{
		Auth:    flattenYandexConnectionmanagerConnectionParamsTrinoAuth(ctx, yandexConnectionmanagerConnectionParamsTrino.GetAuth(), converter.ExpandObject(ctx, state.Auth, yandexConnectionmanagerConnectionParamsTrinoAuthModel{}, diags).(yandexConnectionmanagerConnectionParamsTrinoAuthModel), diags),
		Cluster: flattenYandexConnectionmanagerConnectionParamsTrinoCluster(ctx, yandexConnectionmanagerConnectionParamsTrino.GetCluster(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsTrino(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoState types.Object, diags *diag.Diagnostics) *connectionmanager.TrinoConnection {
	if yandexConnectionmanagerConnectionParamsTrinoState.IsNull() || yandexConnectionmanagerConnectionParamsTrinoState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsTrino yandexConnectionmanagerConnectionParamsTrinoModel
	diags.Append(yandexConnectionmanagerConnectionParamsTrinoState.As(ctx, &yandexConnectionmanagerConnectionParamsTrino, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsTrinoModel(ctx, yandexConnectionmanagerConnectionParamsTrino, diags)
}

func expandYandexConnectionmanagerConnectionParamsTrinoModel(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoState yandexConnectionmanagerConnectionParamsTrinoModel, diags *diag.Diagnostics) *connectionmanager.TrinoConnection {
	value := &connectionmanager.TrinoConnection{}
	value.SetAuth(expandYandexConnectionmanagerConnectionParamsTrinoAuth(ctx, yandexConnectionmanagerConnectionParamsTrinoState.Auth, diags))
	value.SetCluster(expandYandexConnectionmanagerConnectionParamsTrinoCluster(ctx, yandexConnectionmanagerConnectionParamsTrinoState.Cluster, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsTrinoAuthModel struct {
	UserPassword types.Object `tfsdk:"user_password"`
}

var yandexConnectionmanagerConnectionParamsTrinoAuthModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"user_password": yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsTrinoAuth(ctx context.Context,
	yandexConnectionmanagerConnectionParamsTrinoAuth *connectionmanager.TrinoAuth,
	state yandexConnectionmanagerConnectionParamsTrinoAuthModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsTrinoAuth == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsTrinoAuthModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthModelType.AttrTypes, yandexConnectionmanagerConnectionParamsTrinoAuthModel{
		UserPassword: flattenYandexConnectionmanagerConnectionParamsTrinoAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsTrinoAuth.GetUserPassword(), converter.ExpandObject(ctx, state.UserPassword, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordModel), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsTrinoAuth(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoAuthState types.Object, diags *diag.Diagnostics) *connectionmanager.TrinoAuth {
	if yandexConnectionmanagerConnectionParamsTrinoAuthState.IsNull() || yandexConnectionmanagerConnectionParamsTrinoAuthState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsTrinoAuth yandexConnectionmanagerConnectionParamsTrinoAuthModel
	diags.Append(yandexConnectionmanagerConnectionParamsTrinoAuthState.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuth, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsTrinoAuthModel(ctx, yandexConnectionmanagerConnectionParamsTrinoAuth, diags)
}

func expandYandexConnectionmanagerConnectionParamsTrinoAuthModel(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoAuthState yandexConnectionmanagerConnectionParamsTrinoAuthModel, diags *diag.Diagnostics) *connectionmanager.TrinoAuth {
	value := &connectionmanager.TrinoAuth{}
	if !(yandexConnectionmanagerConnectionParamsTrinoAuthState.UserPassword.IsNull() || yandexConnectionmanagerConnectionParamsTrinoAuthState.UserPassword.IsUnknown() || yandexConnectionmanagerConnectionParamsTrinoAuthState.UserPassword.Equal(types.Object{})) {
		value.SetUserPassword(expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthState.UserPassword, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordModel struct {
	Password types.Object `tfsdk:"password"`
	User     types.String `tfsdk:"user"`
}

var yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"password": yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordModelType,
		"user":     types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsTrinoAuthUserPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsTrinoAuthUserPassword *connectionmanager.UserPasswordAuth,
	state yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsTrinoAuthUserPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordModel{
		Password: flattenYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthUserPassword.GetPassword(), converter.ExpandObject(ctx, state.Password, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordModel), diags),
		User:     types.StringValue(yandexConnectionmanagerConnectionParamsTrinoAuthUserPassword.GetUser()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.UserPasswordAuth {
	if yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsTrinoAuthUserPassword yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuthUserPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordModel(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthUserPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordState yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordModel, diags *diag.Diagnostics) *connectionmanager.UserPasswordAuth {
	value := &connectionmanager.UserPasswordAuth{}
	value.SetPassword(expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordState.Password, diags))
	value.SetUser(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordState.User.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordModel struct {
	LockboxSecretKey          types.String `tfsdk:"lockbox_secret_key"`
	PasswordGenerationOptions types.Object `tfsdk:"password_generation_options"`
	Raw                       types.String `tfsdk:"raw"`
}

var yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"lockbox_secret_key":          types.StringType,
		"password_generation_options": yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsModelType,
		"raw":                         types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPassword *connectionmanager.Password,
	state yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordModel{
		LockboxSecretKey:          types.StringValue(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPassword.GetLockboxSecretKey()),
		PasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPassword.GetPasswordGenerationOptions(), diags),
		Raw:                       state.Raw,
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.Password {
	if yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPassword yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordModel(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordModel, diags *diag.Diagnostics) *connectionmanager.Password {
	value := &connectionmanager.Password{}
	if !(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState.LockboxSecretKey.IsNull() || yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState.LockboxSecretKey.IsUnknown() || yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState.LockboxSecretKey.Equal(types.StringValue(""))) {
		value.SetLockboxSecretKey(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState.LockboxSecretKey.ValueString())
	}
	value.SetPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState.PasswordGenerationOptions, diags))
	value.SetRaw(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordState.Raw.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsModel struct {
	Cookie                           types.String `tfsdk:"cookie"`
	LockboxPasswordGenerationOptions types.Object `tfsdk:"lockbox_password_generation_options"`
}

var yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cookie":                              types.StringType,
		"lockbox_password_generation_options": yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptions *connectionmanager.PasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsModel{
		Cookie:                           types.StringValue(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptions.GetCookie()),
		LockboxPasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptions.GetLockboxPasswordGenerationOptions(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptions yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	value := &connectionmanager.PasswordGenerationOptions{}
	value.SetCookie(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie.ValueString())
	if !(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsNull() || yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsUnknown() || yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.Equal(types.Object{})) {
		value.SetLockboxPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel struct {
	ExcludedPunctuation types.String `tfsdk:"excluded_punctuation"`
	IncludeDigits       types.Bool   `tfsdk:"include_digits"`
	IncludeLowercase    types.Bool   `tfsdk:"include_lowercase"`
	IncludePunctuation  types.Bool   `tfsdk:"include_punctuation"`
	IncludeUppercase    types.Bool   `tfsdk:"include_uppercase"`
	IncludedPunctuation types.String `tfsdk:"included_punctuation"`
	Length              types.Int64  `tfsdk:"length"`
}

var yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"excluded_punctuation": types.StringType,
		"include_digits":       types.BoolType,
		"include_lowercase":    types.BoolType,
		"include_punctuation":  types.BoolType,
		"include_uppercase":    types.BoolType,
		"included_punctuation": types.StringType,
		"length":               types.Int64Type,
	},
}

func flattenYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions *connectionmanager.LockboxPasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel{
		ExcludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetExcludedPunctuation()),
		IncludeDigits:       types.BoolValue(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeDigits().GetValue()),
		IncludeLowercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeLowercase().GetValue()),
		IncludePunctuation:  types.BoolValue(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludePunctuation().GetValue()),
		IncludeUppercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeUppercase().GetValue()),
		IncludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludedPunctuation()),
		Length:              types.Int64Value(int64(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetLength())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	value := &connectionmanager.LockboxPasswordGenerationOptions{}
	value.SetExcludedPunctuation(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation.ValueString())
	value.SetIncludeDigits(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits.ValueBool()))
	value.SetIncludeLowercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase.ValueBool()))
	value.SetIncludePunctuation(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation.ValueBool()))
	value.SetIncludeUppercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase.ValueBool()))
	value.SetIncludedPunctuation(yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation.ValueString())
	value.SetLength((yandexConnectionmanagerConnectionParamsTrinoAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsTrinoClusterModel struct {
	Coordinator types.Object `tfsdk:"coordinator"`
	TlsParams   types.Object `tfsdk:"tls_params"`
}

var yandexConnectionmanagerConnectionParamsTrinoClusterModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"coordinator": yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorModelType,
		"tls_params":  yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsTrinoCluster(ctx context.Context,
	yandexConnectionmanagerConnectionParamsTrinoCluster *connectionmanager.TrinoCluster,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsTrinoCluster == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsTrinoClusterModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterModelType.AttrTypes, yandexConnectionmanagerConnectionParamsTrinoClusterModel{
		Coordinator: flattenYandexConnectionmanagerConnectionParamsTrinoClusterCoordinator(ctx, yandexConnectionmanagerConnectionParamsTrinoCluster.GetCoordinator(), diags),
		TlsParams:   flattenYandexConnectionmanagerConnectionParamsTrinoClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsTrinoCluster.GetTlsParams(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsTrinoCluster(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoClusterState types.Object, diags *diag.Diagnostics) *connectionmanager.TrinoCluster {
	if yandexConnectionmanagerConnectionParamsTrinoClusterState.IsNull() || yandexConnectionmanagerConnectionParamsTrinoClusterState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsTrinoCluster yandexConnectionmanagerConnectionParamsTrinoClusterModel
	diags.Append(yandexConnectionmanagerConnectionParamsTrinoClusterState.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoCluster, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsTrinoClusterModel(ctx, yandexConnectionmanagerConnectionParamsTrinoCluster, diags)
}

func expandYandexConnectionmanagerConnectionParamsTrinoClusterModel(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoClusterState yandexConnectionmanagerConnectionParamsTrinoClusterModel, diags *diag.Diagnostics) *connectionmanager.TrinoCluster {
	value := &connectionmanager.TrinoCluster{}
	value.SetCoordinator(expandYandexConnectionmanagerConnectionParamsTrinoClusterCoordinator(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterState.Coordinator, diags))
	value.SetTlsParams(expandYandexConnectionmanagerConnectionParamsTrinoClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterState.TlsParams, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorModel struct {
	Host types.String `tfsdk:"host"`
	Port types.Int64  `tfsdk:"port"`
}

var yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"host": types.StringType,
		"port": types.Int64Type,
	},
}

func flattenYandexConnectionmanagerConnectionParamsTrinoClusterCoordinator(ctx context.Context,
	yandexConnectionmanagerConnectionParamsTrinoClusterCoordinator *connectionmanager.TrinoCluster_Coordinator,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsTrinoClusterCoordinator == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorModelType.AttrTypes, yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorModel{
		Host: types.StringValue(yandexConnectionmanagerConnectionParamsTrinoClusterCoordinator.GetHost()),
		Port: types.Int64Value(int64(yandexConnectionmanagerConnectionParamsTrinoClusterCoordinator.GetPort())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsTrinoClusterCoordinator(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorState types.Object, diags *diag.Diagnostics) *connectionmanager.TrinoCluster_Coordinator {
	if yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorState.IsNull() || yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsTrinoClusterCoordinator yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorModel
	diags.Append(yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorState.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoClusterCoordinator, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorModel(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterCoordinator, diags)
}

func expandYandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorModel(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorState yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorModel, diags *diag.Diagnostics) *connectionmanager.TrinoCluster_Coordinator {
	value := &connectionmanager.TrinoCluster_Coordinator{}
	value.SetHost(yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorState.Host.ValueString())
	value.SetPort((yandexConnectionmanagerConnectionParamsTrinoClusterCoordinatorState.Port.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsModel struct {
	Disabled types.Object `tfsdk:"disabled"`
	Tls      types.Object `tfsdk:"tls"`
}

var yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"disabled": yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledModelType,
		"tls":      yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsTrinoClusterTlsParams(ctx context.Context,
	yandexConnectionmanagerConnectionParamsTrinoClusterTlsParams *connectionmanager.TLSParams,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsTrinoClusterTlsParams == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsModel{
		Disabled: flattenYandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParams.GetDisabled(), diags),
		Tls:      flattenYandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParams.GetTls(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsTrinoClusterTlsParams(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	if yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState.IsNull() || yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsTrinoClusterTlsParams yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsModel
	diags.Append(yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoClusterTlsParams, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsModel(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParams, diags)
}

func expandYandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsModel, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	value := &connectionmanager.TLSParams{}
	if !(yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState.Disabled.IsNull() || yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState.Disabled.IsUnknown() || yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState.Disabled.Equal(types.Object{})) {
		value.SetDisabled(expandYandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState.Disabled, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState.Tls.IsNull() || yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState.Tls.IsUnknown() || yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState.Tls.Equal(types.Object{})) {
		value.SetTls(expandYandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsState.Tls, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledModel struct {
}

var yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{},
}

func flattenYandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabled(ctx context.Context,
	yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabled *emptypb.Empty,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabled == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledModelType.AttrTypes, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledModel{})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabled(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledState types.Object, diags *diag.Diagnostics) *emptypb.Empty {
	if yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledState.IsNull() || yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabled yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledModel
	diags.Append(yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledState.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabled, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledModel(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabled, diags)
}

func expandYandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledModel(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledState yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsDisabledModel, diags *diag.Diagnostics) *emptypb.Empty {
	value := &emptypb.Empty{}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsModel struct {
	CaCertificate types.String `tfsdk:"ca_certificate"`
}

var yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"ca_certificate": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTls(ctx context.Context,
	yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTls *connectionmanager.TLSConfig,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTls == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsModel{
		CaCertificate: types.StringValue(yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTls.GetCaCertificate()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTls(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	if yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsState.IsNull() || yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTls yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsModel
	diags.Append(yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsState.As(ctx, &yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTls, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsModel(ctx, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTls, diags)
}

func expandYandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsState yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsModel, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	value := &connectionmanager.TLSConfig{}
	value.SetCaCertificate(yandexConnectionmanagerConnectionParamsTrinoClusterTlsParamsTlsState.CaCertificate.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsValkeyModel struct {
	Auth             types.Object `tfsdk:"auth"`
	Cluster          types.Object `tfsdk:"cluster"`
	Databases        types.List   `tfsdk:"databases"`
	ManagedClusterId types.String `tfsdk:"managed_cluster_id"`
}

var yandexConnectionmanagerConnectionParamsValkeyModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"auth":               yandexConnectionmanagerConnectionParamsValkeyAuthModelType,
		"cluster":            yandexConnectionmanagerConnectionParamsValkeyClusterModelType,
		"databases":          types.ListType{ElemType: types.Int64Type},
		"managed_cluster_id": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsValkey(ctx context.Context,
	yandexConnectionmanagerConnectionParamsValkey *connectionmanager.ValkeyConnection,
	state yandexConnectionmanagerConnectionParamsValkeyModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsValkey == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsValkeyModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsValkeyModelType.AttrTypes, yandexConnectionmanagerConnectionParamsValkeyModel{
		Auth:             flattenYandexConnectionmanagerConnectionParamsValkeyAuth(ctx, yandexConnectionmanagerConnectionParamsValkey.GetAuth(), converter.ExpandObject(ctx, state.Auth, yandexConnectionmanagerConnectionParamsValkeyAuthModel{}, diags).(yandexConnectionmanagerConnectionParamsValkeyAuthModel), diags),
		Cluster:          flattenYandexConnectionmanagerConnectionParamsValkeyCluster(ctx, yandexConnectionmanagerConnectionParamsValkey.GetCluster(), converter.ExpandObject(ctx, state.Cluster, yandexConnectionmanagerConnectionParamsValkeyClusterModel{}, diags).(yandexConnectionmanagerConnectionParamsValkeyClusterModel), diags),
		Databases:        flattenYandexConnectionmanagerConnectionParamsValkeyDatabases(ctx, yandexConnectionmanagerConnectionParamsValkey.GetDatabases(), state.Databases, diags),
		ManagedClusterId: types.StringValue(yandexConnectionmanagerConnectionParamsValkey.GetManagedClusterId()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsValkey(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyState types.Object, diags *diag.Diagnostics) *connectionmanager.ValkeyConnection {
	if yandexConnectionmanagerConnectionParamsValkeyState.IsNull() || yandexConnectionmanagerConnectionParamsValkeyState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsValkey yandexConnectionmanagerConnectionParamsValkeyModel
	diags.Append(yandexConnectionmanagerConnectionParamsValkeyState.As(ctx, &yandexConnectionmanagerConnectionParamsValkey, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsValkeyModel(ctx, yandexConnectionmanagerConnectionParamsValkey, diags)
}

func expandYandexConnectionmanagerConnectionParamsValkeyModel(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyState yandexConnectionmanagerConnectionParamsValkeyModel, diags *diag.Diagnostics) *connectionmanager.ValkeyConnection {
	value := &connectionmanager.ValkeyConnection{}
	value.SetAuth(expandYandexConnectionmanagerConnectionParamsValkeyAuth(ctx, yandexConnectionmanagerConnectionParamsValkeyState.Auth, diags))
	value.SetCluster(expandYandexConnectionmanagerConnectionParamsValkeyCluster(ctx, yandexConnectionmanagerConnectionParamsValkeyState.Cluster, diags))
	value.SetDatabases(expandYandexConnectionmanagerConnectionParamsValkeyDatabases(ctx, yandexConnectionmanagerConnectionParamsValkeyState.Databases, diags))
	value.SetManagedClusterId(yandexConnectionmanagerConnectionParamsValkeyState.ManagedClusterId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsValkeyAuthModel struct {
	UserPassword types.Object `tfsdk:"user_password"`
}

var yandexConnectionmanagerConnectionParamsValkeyAuthModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"user_password": yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsValkeyAuth(ctx context.Context,
	yandexConnectionmanagerConnectionParamsValkeyAuth *connectionmanager.ValkeyAuth,
	state yandexConnectionmanagerConnectionParamsValkeyAuthModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsValkeyAuth == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsValkeyAuthModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthModelType.AttrTypes, yandexConnectionmanagerConnectionParamsValkeyAuthModel{
		UserPassword: flattenYandexConnectionmanagerConnectionParamsValkeyAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsValkeyAuth.GetUserPassword(), converter.ExpandObject(ctx, state.UserPassword, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordModel), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsValkeyAuth(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyAuthState types.Object, diags *diag.Diagnostics) *connectionmanager.ValkeyAuth {
	if yandexConnectionmanagerConnectionParamsValkeyAuthState.IsNull() || yandexConnectionmanagerConnectionParamsValkeyAuthState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsValkeyAuth yandexConnectionmanagerConnectionParamsValkeyAuthModel
	diags.Append(yandexConnectionmanagerConnectionParamsValkeyAuthState.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuth, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsValkeyAuthModel(ctx, yandexConnectionmanagerConnectionParamsValkeyAuth, diags)
}

func expandYandexConnectionmanagerConnectionParamsValkeyAuthModel(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyAuthState yandexConnectionmanagerConnectionParamsValkeyAuthModel, diags *diag.Diagnostics) *connectionmanager.ValkeyAuth {
	value := &connectionmanager.ValkeyAuth{}
	if !(yandexConnectionmanagerConnectionParamsValkeyAuthState.UserPassword.IsNull() || yandexConnectionmanagerConnectionParamsValkeyAuthState.UserPassword.IsUnknown() || yandexConnectionmanagerConnectionParamsValkeyAuthState.UserPassword.Equal(types.Object{})) {
		value.SetUserPassword(expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPassword(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthState.UserPassword, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordModel struct {
	Password types.Object `tfsdk:"password"`
	User     types.String `tfsdk:"user"`
}

var yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"password": yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordModelType,
		"user":     types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsValkeyAuthUserPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsValkeyAuthUserPassword *connectionmanager.ValkeyAuth_UserPasswordAuth,
	state yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsValkeyAuthUserPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordModel{
		Password: flattenYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthUserPassword.GetPassword(), converter.ExpandObject(ctx, state.Password, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordModel{}, diags).(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordModel), diags),
		User:     types.StringValue(yandexConnectionmanagerConnectionParamsValkeyAuthUserPassword.GetUser()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.ValkeyAuth_UserPasswordAuth {
	if yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsValkeyAuthUserPassword yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuthUserPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordModel(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthUserPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordState yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordModel, diags *diag.Diagnostics) *connectionmanager.ValkeyAuth_UserPasswordAuth {
	value := &connectionmanager.ValkeyAuth_UserPasswordAuth{}
	value.SetPassword(expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPassword(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordState.Password, diags))
	value.SetUser(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordState.User.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordModel struct {
	LockboxSecretKey          types.String `tfsdk:"lockbox_secret_key"`
	PasswordGenerationOptions types.Object `tfsdk:"password_generation_options"`
	Raw                       types.String `tfsdk:"raw"`
}

var yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"lockbox_secret_key":          types.StringType,
		"password_generation_options": yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsModelType,
		"raw":                         types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPassword(ctx context.Context,
	yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPassword *connectionmanager.Password,
	state yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPassword == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordModelType.AttrTypes, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordModel{
		LockboxSecretKey:          types.StringValue(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPassword.GetLockboxSecretKey()),
		PasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPassword.GetPasswordGenerationOptions(), diags),
		Raw:                       state.Raw,
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPassword(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState types.Object, diags *diag.Diagnostics) *connectionmanager.Password {
	if yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState.IsNull() || yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPassword yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordModel
	diags.Append(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPassword, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordModel(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPassword, diags)
}

func expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordModel(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordModel, diags *diag.Diagnostics) *connectionmanager.Password {
	value := &connectionmanager.Password{}
	if !(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState.LockboxSecretKey.IsNull() || yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState.LockboxSecretKey.IsUnknown() || yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState.LockboxSecretKey.Equal(types.StringValue(""))) {
		value.SetLockboxSecretKey(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState.LockboxSecretKey.ValueString())
	}
	value.SetPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState.PasswordGenerationOptions, diags))
	value.SetRaw(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordState.Raw.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsModel struct {
	Cookie                           types.String `tfsdk:"cookie"`
	LockboxPasswordGenerationOptions types.Object `tfsdk:"lockbox_password_generation_options"`
}

var yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cookie":                              types.StringType,
		"lockbox_password_generation_options": yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptions *connectionmanager.PasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsModel{
		Cookie:                           types.StringValue(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptions.GetCookie()),
		LockboxPasswordGenerationOptions: flattenYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptions.GetLockboxPasswordGenerationOptions(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptions yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.PasswordGenerationOptions {
	value := &connectionmanager.PasswordGenerationOptions{}
	value.SetCookie(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsState.Cookie.ValueString())
	if !(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsNull() || yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.IsUnknown() || yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions.Equal(types.Object{})) {
		value.SetLockboxPasswordGenerationOptions(expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsState.LockboxPasswordGenerationOptions, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel struct {
	ExcludedPunctuation types.String `tfsdk:"excluded_punctuation"`
	IncludeDigits       types.Bool   `tfsdk:"include_digits"`
	IncludeLowercase    types.Bool   `tfsdk:"include_lowercase"`
	IncludePunctuation  types.Bool   `tfsdk:"include_punctuation"`
	IncludeUppercase    types.Bool   `tfsdk:"include_uppercase"`
	IncludedPunctuation types.String `tfsdk:"included_punctuation"`
	Length              types.Int64  `tfsdk:"length"`
}

var yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"excluded_punctuation": types.StringType,
		"include_digits":       types.BoolType,
		"include_lowercase":    types.BoolType,
		"include_punctuation":  types.BoolType,
		"include_uppercase":    types.BoolType,
		"included_punctuation": types.StringType,
		"length":               types.Int64Type,
	},
}

func flattenYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context,
	yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions *connectionmanager.LockboxPasswordGenerationOptions,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel{
		ExcludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetExcludedPunctuation()),
		IncludeDigits:       types.BoolValue(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeDigits().GetValue()),
		IncludeLowercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeLowercase().GetValue()),
		IncludePunctuation:  types.BoolValue(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludePunctuation().GetValue()),
		IncludeUppercase:    types.BoolValue(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludeUppercase().GetValue()),
		IncludedPunctuation: types.StringValue(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetIncludedPunctuation()),
		Length:              types.Int64Value(int64(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions.GetLength())),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState types.Object, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	if yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsNull() || yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel
	diags.Append(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptions, diags)
}

func expandYandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsModel, diags *diag.Diagnostics) *connectionmanager.LockboxPasswordGenerationOptions {
	value := &connectionmanager.LockboxPasswordGenerationOptions{}
	value.SetExcludedPunctuation(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.ExcludedPunctuation.ValueString())
	value.SetIncludeDigits(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeDigits.ValueBool()))
	value.SetIncludeLowercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeLowercase.ValueBool()))
	value.SetIncludePunctuation(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludePunctuation.ValueBool()))
	value.SetIncludeUppercase(wrapperspb.Bool(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludeUppercase.ValueBool()))
	value.SetIncludedPunctuation(yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.IncludedPunctuation.ValueString())
	value.SetLength((yandexConnectionmanagerConnectionParamsValkeyAuthUserPasswordPasswordPasswordGenerationOptionsLockboxPasswordGenerationOptionsState.Length.ValueInt64()))
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsValkeyClusterModel struct {
	Hosts        types.List   `tfsdk:"hosts"`
	SentinelPort types.Int64  `tfsdk:"sentinel_port"`
	TlsParams    types.Object `tfsdk:"tls_params"`
}

var yandexConnectionmanagerConnectionParamsValkeyClusterModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"hosts":         types.ListType{ElemType: yandexConnectionmanagerConnectionParamsValkeyClusterHostStructModelType},
		"sentinel_port": types.Int64Type,
		"tls_params":    yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsValkeyCluster(ctx context.Context,
	yandexConnectionmanagerConnectionParamsValkeyCluster *connectionmanager.ValkeyCluster,
	state yandexConnectionmanagerConnectionParamsValkeyClusterModel,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsValkeyCluster == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsValkeyClusterModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterModelType.AttrTypes, yandexConnectionmanagerConnectionParamsValkeyClusterModel{
		Hosts:        flattenYandexConnectionmanagerConnectionParamsValkeyClusterHosts(ctx, yandexConnectionmanagerConnectionParamsValkeyCluster.GetHosts(), state.Hosts, diags),
		SentinelPort: types.Int64Value(int64(yandexConnectionmanagerConnectionParamsValkeyCluster.GetSentinelPort())),
		TlsParams:    flattenYandexConnectionmanagerConnectionParamsValkeyClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsValkeyCluster.GetTlsParams(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsValkeyCluster(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyClusterState types.Object, diags *diag.Diagnostics) *connectionmanager.ValkeyCluster {
	if yandexConnectionmanagerConnectionParamsValkeyClusterState.IsNull() || yandexConnectionmanagerConnectionParamsValkeyClusterState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsValkeyCluster yandexConnectionmanagerConnectionParamsValkeyClusterModel
	diags.Append(yandexConnectionmanagerConnectionParamsValkeyClusterState.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyCluster, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsValkeyClusterModel(ctx, yandexConnectionmanagerConnectionParamsValkeyCluster, diags)
}

func expandYandexConnectionmanagerConnectionParamsValkeyClusterModel(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyClusterState yandexConnectionmanagerConnectionParamsValkeyClusterModel, diags *diag.Diagnostics) *connectionmanager.ValkeyCluster {
	value := &connectionmanager.ValkeyCluster{}
	value.SetHosts(expandYandexConnectionmanagerConnectionParamsValkeyClusterHosts(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterState.Hosts, diags))
	value.SetSentinelPort((yandexConnectionmanagerConnectionParamsValkeyClusterState.SentinelPort.ValueInt64()))
	value.SetTlsParams(expandYandexConnectionmanagerConnectionParamsValkeyClusterTlsParams(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterState.TlsParams, diags))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsValkeyClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyClusterHosts []*connectionmanager.ValkeyCluster_Host, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsValkeyClusterHosts == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(yandexConnectionmanagerConnectionParamsValkeyClusterHostStructModelType)
	}
	var yandexConnectionmanagerConnectionParamsValkeyClusterHostsValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsValkeyClusterHosts {
		val := flattenYandexConnectionmanagerConnectionParamsValkeyClusterHostStruct(ctx, elem, diags)
		yandexConnectionmanagerConnectionParamsValkeyClusterHostsValues = append(yandexConnectionmanagerConnectionParamsValkeyClusterHostsValues, val)
	}

	value, diag := types.ListValue(yandexConnectionmanagerConnectionParamsValkeyClusterHostStructModelType, yandexConnectionmanagerConnectionParamsValkeyClusterHostsValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsValkeyClusterHosts(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyClusterHostsState types.List, diags *diag.Diagnostics) []*connectionmanager.ValkeyCluster_Host {
	if yandexConnectionmanagerConnectionParamsValkeyClusterHostsState.IsNull() || yandexConnectionmanagerConnectionParamsValkeyClusterHostsState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsValkeyClusterHostsState.Elements()) == 0 {
		return []*connectionmanager.ValkeyCluster_Host{}
	}
	yandexConnectionmanagerConnectionParamsValkeyClusterHostsRes := make([]*connectionmanager.ValkeyCluster_Host, 0, len(yandexConnectionmanagerConnectionParamsValkeyClusterHostsState.Elements()))
	yandexConnectionmanagerConnectionParamsValkeyClusterHostsType := make([]yandexConnectionmanagerConnectionParamsValkeyClusterHostStructModel, 0, len(yandexConnectionmanagerConnectionParamsValkeyClusterHostsState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsValkeyClusterHostsState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsValkeyClusterHostsType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsValkeyClusterHostsType {
		yandexConnectionmanagerConnectionParamsValkeyClusterHostsRes = append(yandexConnectionmanagerConnectionParamsValkeyClusterHostsRes, expandYandexConnectionmanagerConnectionParamsValkeyClusterHostStructModel(ctx, elem, diags))
	}
	return yandexConnectionmanagerConnectionParamsValkeyClusterHostsRes
}

type yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsModel struct {
	Disabled types.Object `tfsdk:"disabled"`
	Tls      types.Object `tfsdk:"tls"`
}

var yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"disabled": yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledModelType,
		"tls":      yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsModelType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsValkeyClusterTlsParams(ctx context.Context,
	yandexConnectionmanagerConnectionParamsValkeyClusterTlsParams *connectionmanager.TLSParams,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsValkeyClusterTlsParams == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsModel{
		Disabled: flattenYandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParams.GetDisabled(), diags),
		Tls:      flattenYandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParams.GetTls(), diags),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsValkeyClusterTlsParams(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	if yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState.IsNull() || yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsValkeyClusterTlsParams yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsModel
	diags.Append(yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyClusterTlsParams, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsModel(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParams, diags)
}

func expandYandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsModel, diags *diag.Diagnostics) *connectionmanager.TLSParams {
	value := &connectionmanager.TLSParams{}
	if !(yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState.Disabled.IsNull() || yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState.Disabled.IsUnknown() || yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState.Disabled.Equal(types.Object{})) {
		value.SetDisabled(expandYandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabled(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState.Disabled, diags))
	}
	if !(yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState.Tls.IsNull() || yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState.Tls.IsUnknown() || yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState.Tls.Equal(types.Object{})) {
		value.SetTls(expandYandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTls(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsState.Tls, diags))
	}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledModel struct {
}

var yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{},
}

func flattenYandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabled(ctx context.Context,
	yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabled *emptypb.Empty,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabled == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledModelType.AttrTypes, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledModel{})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabled(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledState types.Object, diags *diag.Diagnostics) *emptypb.Empty {
	if yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledState.IsNull() || yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabled yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledModel
	diags.Append(yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledState.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabled, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledModel(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabled, diags)
}

func expandYandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledModel(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledState yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsDisabledModel, diags *diag.Diagnostics) *emptypb.Empty {
	value := &emptypb.Empty{}
	if diags.HasError() {
		return nil
	}
	return value
}

type yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsModel struct {
	CaCertificate types.String `tfsdk:"ca_certificate"`
}

var yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"ca_certificate": types.StringType,
	},
}

func flattenYandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTls(ctx context.Context,
	yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTls *connectionmanager.TLSConfig,
	diags *diag.Diagnostics) types.Object {
	if yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTls == nil {
		return types.ObjectNull(yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsModelType.AttrTypes, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsModel{
		CaCertificate: types.StringValue(yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTls.GetCaCertificate()),
	})
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTls(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsState types.Object, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	if yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsState.IsNull() || yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsState.IsUnknown() {
		return nil
	}
	var yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTls yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsModel
	diags.Append(yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsState.As(ctx, &yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTls, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsModel(ctx, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTls, diags)
}

func expandYandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsModel(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsState yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsModel, diags *diag.Diagnostics) *connectionmanager.TLSConfig {
	value := &connectionmanager.TLSConfig{}
	value.SetCaCertificate(yandexConnectionmanagerConnectionParamsValkeyClusterTlsParamsTlsState.CaCertificate.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexConnectionmanagerConnectionParamsValkeyDatabases(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyDatabases []int64, listState types.List, diags *diag.Diagnostics) types.List {
	if yandexConnectionmanagerConnectionParamsValkeyDatabases == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.ListNull(types.Int64Type)
	}
	var yandexConnectionmanagerConnectionParamsValkeyDatabasesValues []attr.Value
	for _, elem := range yandexConnectionmanagerConnectionParamsValkeyDatabases {
		val := types.Int64Value(int64(elem))
		yandexConnectionmanagerConnectionParamsValkeyDatabasesValues = append(yandexConnectionmanagerConnectionParamsValkeyDatabasesValues, val)
	}

	value, diag := types.ListValue(types.Int64Type, yandexConnectionmanagerConnectionParamsValkeyDatabasesValues)
	diags.Append(diag...)
	return value
}

func expandYandexConnectionmanagerConnectionParamsValkeyDatabases(ctx context.Context, yandexConnectionmanagerConnectionParamsValkeyDatabasesState types.List, diags *diag.Diagnostics) []int64 {
	if yandexConnectionmanagerConnectionParamsValkeyDatabasesState.IsNull() || yandexConnectionmanagerConnectionParamsValkeyDatabasesState.IsUnknown() {
		return nil
	}
	if len(yandexConnectionmanagerConnectionParamsValkeyDatabasesState.Elements()) == 0 {
		return []int64{}
	}
	yandexConnectionmanagerConnectionParamsValkeyDatabasesRes := make([]int64, 0, len(yandexConnectionmanagerConnectionParamsValkeyDatabasesState.Elements()))
	yandexConnectionmanagerConnectionParamsValkeyDatabasesType := make([]types.Int64, 0, len(yandexConnectionmanagerConnectionParamsValkeyDatabasesState.Elements()))
	diags.Append(yandexConnectionmanagerConnectionParamsValkeyDatabasesState.ElementsAs(ctx, &yandexConnectionmanagerConnectionParamsValkeyDatabasesType, false)...)
	if diags.HasError() {
		return nil
	}
	for _, elem := range yandexConnectionmanagerConnectionParamsValkeyDatabasesType {
		yandexConnectionmanagerConnectionParamsValkeyDatabasesRes = append(yandexConnectionmanagerConnectionParamsValkeyDatabasesRes, int64(elem.ValueInt64()))
	}
	return yandexConnectionmanagerConnectionParamsValkeyDatabasesRes
}
