// Code generated by tfgen. DO NOT EDIT.

package yandex_kms_asymmetric_signature_key

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	asymmetricsignature "github.com/yandex-cloud/go-genproto/yandex/cloud/kms/v1/asymmetricsignature"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/planmodifiers"
)

func YandexKmsAsymmetricSignatureKeyResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "An asymmetric KMS key that may contain several versions of the cryptographic material.",
		MarkdownDescription: "An asymmetric KMS key that may contain several versions of the cryptographic material.",
		Version:             1,
		Attributes: map[string]schema.Attribute{

			"asymmetric_signature_key_id": schema.StringAttribute{
				MarkdownDescription: "ID of the asymmetric KMS key to return.\n To get the ID of an asymmetric KMS key use a [AsymmetricSignatureKeyService.List] request.",
				Description: "ID of the asymmetric KMS key to return.\n To get the ID of an asymmetric KMS key use a [AsymmetricSignatureKeyService.List] request." +
					// proto paths: +
					// -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.id
					// -> yandex.cloud.kms.v1.asymmetricsignature.DeleteAsymmetricSignatureKeyRequest.key_id
					// -> yandex.cloud.kms.v1.asymmetricsignature.GetAsymmetricSignatureKeyRequest.key_id
					// -> yandex.cloud.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyRequest.key_id
					"package: yandex.cloud.kms.v1.asymmetricsignature\n" +
					"filename: yandex/cloud/kms/v1/asymmetricsignature/asymmetric_signature_key_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the asymmetric KMS key to return.\n To get the ID of an asymmetric KMS key use a [AsymmetricSignatureKeyService.List] request.",
				Description: "ID of the asymmetric KMS key to return.\n To get the ID of an asymmetric KMS key use a [AsymmetricSignatureKeyService.List] request." +
					// proto paths: +
					// -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.id
					// -> yandex.cloud.kms.v1.asymmetricsignature.DeleteAsymmetricSignatureKeyRequest.key_id
					// -> yandex.cloud.kms.v1.asymmetricsignature.GetAsymmetricSignatureKeyRequest.key_id
					// -> yandex.cloud.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyRequest.key_id
					"package: yandex.cloud.kms.v1.asymmetricsignature\n" +
					"filename: yandex/cloud/kms/v1/asymmetricsignature/asymmetric_signature_key_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"created_at": schema.StringAttribute{
				MarkdownDescription: "Time when the key was created.",
				Description: "Time when the key was created." +
					// proto paths: +
					// -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.created_at
					"package: yandex.cloud.kms.v1.asymmetricsignature\n" +
					"filename: yandex/cloud/kms/v1/asymmetricsignature/asymmetric_signature_key.proto\n",
				Computed: true,
			},

			"deletion_protection": schema.BoolAttribute{
				MarkdownDescription: "Flag that inhibits deletion of the key",
				Description: "Flag that inhibits deletion of the key" +
					// proto paths: +
					// -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.deletion_protection
					// -> yandex.cloud.kms.v1.asymmetricsignature.CreateAsymmetricSignatureKeyRequest.deletion_protection
					// -> yandex.cloud.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyRequest.deletion_protection
					"package: yandex.cloud.kms.v1.asymmetricsignature\n" +
					"filename: yandex/cloud/kms/v1/asymmetricsignature/asymmetric_signature_key.proto\n",
				Optional: true,
				Computed: true,
				Default:  booldefault.StaticBool(false),

				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.UseStateForUnknown(),
				},
			},

			"description": schema.StringAttribute{
				MarkdownDescription: "Description of the key.",
				Description: "Description of the key." +
					// proto paths: +
					// -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.description
					// -> yandex.cloud.kms.v1.asymmetricsignature.CreateAsymmetricSignatureKeyRequest.description
					// -> yandex.cloud.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyRequest.description
					"package: yandex.cloud.kms.v1.asymmetricsignature\n" +
					"filename: yandex/cloud/kms/v1/asymmetricsignature/asymmetric_signature_key.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 1024),
				},
			},

			"folder_id": schema.StringAttribute{
				MarkdownDescription: "ID of the folder that the key belongs to.",
				Description: "ID of the folder that the key belongs to." +
					// proto paths: +
					// -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.folder_id
					// -> yandex.cloud.kms.v1.asymmetricsignature.CreateAsymmetricSignatureKeyRequest.folder_id
					"package: yandex.cloud.kms.v1.asymmetricsignature\n" +
					"filename: yandex/cloud/kms/v1/asymmetricsignature/asymmetric_signature_key.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Custom labels for the key as `key:value` pairs. Maximum 64 per key.",
				Description: "Custom labels for the key as `key:value` pairs. Maximum 64 per key." +
					// proto paths: +
					// -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.labels
					// -> yandex.cloud.kms.v1.asymmetricsignature.CreateAsymmetricSignatureKeyRequest.labels
					// -> yandex.cloud.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyRequest.labels
					"package: yandex.cloud.kms.v1.asymmetricsignature\n" +
					"filename: yandex/cloud/kms/v1/asymmetricsignature/asymmetric_signature_key.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedMap(),
				},
				Validators: []validator.Map{
					mapvalidator.KeysAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([a-z][-_0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(0, 63),
					),
					mapvalidator.ValueStringsAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([-_0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(0, 63),
					),
				},
			},

			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the key.",
				Description: "Name of the key." +
					// proto paths: +
					// -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.name
					// -> yandex.cloud.kms.v1.asymmetricsignature.CreateAsymmetricSignatureKeyRequest.name
					// -> yandex.cloud.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyRequest.name
					"package: yandex.cloud.kms.v1.asymmetricsignature\n" +
					"filename: yandex/cloud/kms/v1/asymmetricsignature/asymmetric_signature_key.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 100),
				},
			},

			"signature_algorithm": schema.StringAttribute{
				MarkdownDescription: "Signature Algorithm ID.",
				Description: "Signature Algorithm ID." +
					// proto paths: +
					// -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.signature_algorithm
					// -> yandex.cloud.kms.v1.asymmetricsignature.CreateAsymmetricSignatureKeyRequest.signature_algorithm
					"package: yandex.cloud.kms.v1.asymmetricsignature\n" +
					"filename: yandex/cloud/kms/v1/asymmetricsignature/asymmetric_signature_key.proto\n",
				Optional: true,
				Computed: true,
				Default:  stringdefault.StaticString("RSA_2048_SIGN_PSS_SHA_256"),

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(converter.MapKeys(asymmetricsignature.AsymmetricSignatureAlgorithm_value)...),
				},
			},

			"status": schema.StringAttribute{
				MarkdownDescription: "Current status of the key.",
				Description: "Current status of the key." +
					// proto paths: +
					// -> yandex.cloud.kms.v1.asymmetricsignature.AsymmetricSignatureKey.status
					// -> yandex.cloud.kms.v1.asymmetricsignature.UpdateAsymmetricSignatureKeyRequest.status
					"package: yandex.cloud.kms.v1.asymmetricsignature\n" +
					"filename: yandex/cloud/kms/v1/asymmetricsignature/asymmetric_signature_key.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(converter.MapKeys(asymmetricsignature.AsymmetricSignatureKey_Status_value)...),
				},
			},
		},

		Blocks: map[string]schema.Block{
			"timeouts": timeouts.BlockAll(ctx),
		},
	}
}
