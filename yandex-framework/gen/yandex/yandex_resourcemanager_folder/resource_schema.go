// Code generated by tfgen. DO NOT EDIT.

package yandex_resourcemanager_folder

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/planmodifiers"
)

func YandexResourcemanagerFolderResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "A Folder resource. For more information, see [Folder](/docs/resource-manager/concepts/resources-hierarchy#folder).",
		MarkdownDescription: "A Folder resource. For more information, see [Folder](/docs/resource-manager/concepts/resources-hierarchy#folder).",
		Version:             1,
		Attributes: map[string]schema.Attribute{

			"cloud_id": schema.StringAttribute{
				MarkdownDescription: "ID of the cloud that the folder belongs to.",
				Description: "ID of the cloud that the folder belongs to." +
					// proto paths: +
					// -> yandex.cloud.resourcemanager.v1.CreateFolderRequest.cloud_id
					// -> yandex.cloud.resourcemanager.v1.Folder.cloud_id
					"package: yandex.cloud.resourcemanager.v1\n" +
					"filename: yandex/cloud/resourcemanager/v1/folder.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"created_at": schema.StringAttribute{
				MarkdownDescription: "Creation timestamp.",
				Description: "Creation timestamp." +
					// proto paths: +
					// -> yandex.cloud.resourcemanager.v1.Folder.created_at
					"package: yandex.cloud.resourcemanager.v1\n" +
					"filename: yandex/cloud/resourcemanager/v1/folder.proto\n",
				Computed: true,
			},

			"description": schema.StringAttribute{
				MarkdownDescription: "Description of the folder. 0-256 characters long.",
				Description: "Description of the folder. 0-256 characters long." +
					// proto paths: +
					// -> yandex.cloud.resourcemanager.v1.CreateFolderRequest.description
					// -> yandex.cloud.resourcemanager.v1.Folder.description
					// -> yandex.cloud.resourcemanager.v1.UpdateFolderRequest.description
					"package: yandex.cloud.resourcemanager.v1\n" +
					"filename: yandex/cloud/resourcemanager/v1/folder.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 256),
				},
			},

			"folder_id": schema.StringAttribute{
				MarkdownDescription: "ID of the Folder resource to return.\n To get the folder ID, use a [FolderService.List] request.",
				Description: "ID of the Folder resource to return.\n To get the folder ID, use a [FolderService.List] request." +
					// proto paths: +
					// -> yandex.cloud.resourcemanager.v1.DeleteFolderRequest.folder_id
					// -> yandex.cloud.resourcemanager.v1.Folder.id
					// -> yandex.cloud.resourcemanager.v1.GetFolderRequest.folder_id
					// -> yandex.cloud.resourcemanager.v1.UpdateFolderRequest.folder_id
					"package: yandex.cloud.resourcemanager.v1\n" +
					"filename: yandex/cloud/resourcemanager/v1/folder_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the Folder resource to return.\n To get the folder ID, use a [FolderService.List] request.",
				Description: "ID of the Folder resource to return.\n To get the folder ID, use a [FolderService.List] request." +
					// proto paths: +
					// -> yandex.cloud.resourcemanager.v1.DeleteFolderRequest.folder_id
					// -> yandex.cloud.resourcemanager.v1.Folder.id
					// -> yandex.cloud.resourcemanager.v1.GetFolderRequest.folder_id
					// -> yandex.cloud.resourcemanager.v1.UpdateFolderRequest.folder_id
					"package: yandex.cloud.resourcemanager.v1\n" +
					"filename: yandex/cloud/resourcemanager/v1/folder_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Resource labels as `` key:value `` pairs. Maximum of 64 per resource.",
				Description: "Resource labels as `` key:value `` pairs. Maximum of 64 per resource." +
					// proto paths: +
					// -> yandex.cloud.resourcemanager.v1.CreateFolderRequest.labels
					// -> yandex.cloud.resourcemanager.v1.Folder.labels
					// -> yandex.cloud.resourcemanager.v1.UpdateFolderRequest.labels
					"package: yandex.cloud.resourcemanager.v1\n" +
					"filename: yandex/cloud/resourcemanager/v1/folder.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedMap(),
				},
				Validators: []validator.Map{
					mapvalidator.KeysAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([a-z][-_0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(1, 63),
					),
					mapvalidator.ValueStringsAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([-_0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(0, 63),
					),
				},
			},

			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the folder.\n The name is unique within the cloud. 3-63 characters long.",
				Description: "Name of the folder.\n The name is unique within the cloud. 3-63 characters long." +
					// proto paths: +
					// -> yandex.cloud.resourcemanager.v1.CreateFolderRequest.name
					// -> yandex.cloud.resourcemanager.v1.Folder.name
					// -> yandex.cloud.resourcemanager.v1.UpdateFolderRequest.name
					"package: yandex.cloud.resourcemanager.v1\n" +
					"filename: yandex/cloud/resourcemanager/v1/folder.proto\n",
				Required: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^(|[a-z][-a-z0-9]{1,61}[a-z0-9])$"), "error validating regexp"),
				},
			},

			"status": schema.StringAttribute{
				MarkdownDescription: "Status of the folder.",
				Description: "Status of the folder." +
					// proto paths: +
					// -> yandex.cloud.resourcemanager.v1.Folder.status
					"package: yandex.cloud.resourcemanager.v1\n" +
					"filename: yandex/cloud/resourcemanager/v1/folder.proto\n",
				Computed: true,
			},
			"timeouts": timeouts.AttributesAll(ctx),
		},

		Blocks: map[string]schema.Block{},
	}
}

func (r *yandexResourcemanagerFolderResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
	schema0 := YandexResourcemanagerFolderResourceSchema(ctx)
	return map[int64]resource.StateUpgrader{
		0: resource.StateUpgrader{
			PriorSchema:   &schema0,
			StateUpgrader: moveStateFromV0,
		},
	}
}
