// Code generated by tfgen. DO NOT EDIT.

package yandex_compute_filesystem

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/float64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/planmodifiers"
)

func YandexComputeFilesystemResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "A filesystem resource.\n For details about the concept, see [documentation](/docs/compute/concepts/filesystem).",
		MarkdownDescription: "A filesystem resource.\n For details about the concept, see [documentation](/docs/compute/concepts/filesystem).",
		Version:             1,
		Attributes: map[string]schema.Attribute{

			"block_size": schema.Int64Attribute{
				MarkdownDescription: "Block size used for the filesystem, specified in bytes.",
				Description: "Block size used for the filesystem, specified in bytes." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateFilesystemRequest.block_size
					// -> yandex.cloud.compute.v1.Filesystem.block_size
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/filesystem.proto\n",
				Optional: true,
				Computed: true,
				Default:  int64default.StaticInt64(4096),

				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.RequiresReplaceIfConfigured(),
					int64planmodifier.UseStateForUnknown(),
				},
			},

			"created_at": schema.StringAttribute{
				MarkdownDescription: "Creation timestamp.",
				Description: "Creation timestamp." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.Filesystem.created_at
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/filesystem.proto\n",
				Computed: true,
			},

			"description": schema.StringAttribute{
				MarkdownDescription: "Description of the filesystem.",
				Description: "Description of the filesystem." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateFilesystemRequest.description
					// -> yandex.cloud.compute.v1.Filesystem.description
					// -> yandex.cloud.compute.v1.UpdateFilesystemRequest.description
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/filesystem.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 256),
				},
			},

			"filesystem_id": schema.StringAttribute{
				MarkdownDescription: "ID of the filesystem to return.\n\n To get the filesystem ID, make a [FilesystemService.List] request.",
				Description: "ID of the filesystem to return.\n\n To get the filesystem ID, make a [FilesystemService.List] request." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.DeleteFilesystemRequest.filesystem_id
					// -> yandex.cloud.compute.v1.Filesystem.id
					// -> yandex.cloud.compute.v1.GetFilesystemRequest.filesystem_id
					// -> yandex.cloud.compute.v1.UpdateFilesystemRequest.filesystem_id
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/filesystem_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the filesystem to return.\n\n To get the filesystem ID, make a [FilesystemService.List] request.",
				Description: "ID of the filesystem to return.\n\n To get the filesystem ID, make a [FilesystemService.List] request." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.DeleteFilesystemRequest.filesystem_id
					// -> yandex.cloud.compute.v1.Filesystem.id
					// -> yandex.cloud.compute.v1.GetFilesystemRequest.filesystem_id
					// -> yandex.cloud.compute.v1.UpdateFilesystemRequest.filesystem_id
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/filesystem_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"folder_id": schema.StringAttribute{
				MarkdownDescription: "ID of the folder that the filesystem belongs to.",
				Description: "ID of the folder that the filesystem belongs to." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateFilesystemRequest.folder_id
					// -> yandex.cloud.compute.v1.Filesystem.folder_id
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/filesystem.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Filesystem labels as `key:value` pairs.\n For details about the concept, see [documentation](/docs/overview/concepts/services#labels).",
				Description: "Filesystem labels as `key:value` pairs.\n For details about the concept, see [documentation](/docs/overview/concepts/services#labels)." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateFilesystemRequest.labels
					// -> yandex.cloud.compute.v1.Filesystem.labels
					// -> yandex.cloud.compute.v1.UpdateFilesystemRequest.labels
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/filesystem.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedMap(),
				},
				Validators: []validator.Map{
					mapvalidator.KeysAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([a-z][-_./\\@0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(1, 63),
					),
					mapvalidator.ValueStringsAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([-_./\\@0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(0, 63),
					),
				},
			},

			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the filesystem. The name is unique within the folder.",
				Description: "Name of the filesystem. The name is unique within the folder." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateFilesystemRequest.name
					// -> yandex.cloud.compute.v1.Filesystem.name
					// -> yandex.cloud.compute.v1.UpdateFilesystemRequest.name
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/filesystem.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^(|[a-z]([-_a-z0-9]{0,61}[a-z0-9])?)$"), "error validating regexp"),
				},
			},

			"size": schema.Float64Attribute{
				MarkdownDescription: "Size of the filesystem, specified in bytes.",
				Description: "Size of the filesystem, specified in bytes." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateFilesystemRequest.size
					// -> yandex.cloud.compute.v1.Filesystem.size
					// -> yandex.cloud.compute.v1.UpdateFilesystemRequest.size
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/filesystem.proto\n",
				Optional: true,
				Computed: true,
				Default:  float64default.StaticFloat64(150),

				PlanModifiers: []planmodifier.Float64{
					float64planmodifier.RequiresReplaceIfConfigured(),
					float64planmodifier.UseStateForUnknown(),
				},
			},

			"status": schema.StringAttribute{
				MarkdownDescription: "Current status of the filesystem.",
				Description: "Current status of the filesystem." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.Filesystem.status
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/filesystem.proto\n",
				Computed: true,
			},

			"type": schema.StringAttribute{
				MarkdownDescription: "ID of the filesystem type.\n\n To get a list of available filesystem types, make a [yandex.cloud.compute.v1.DiskTypeService.List] request.",
				Description: "ID of the filesystem type.\n\n To get a list of available filesystem types, make a [yandex.cloud.compute.v1.DiskTypeService.List] request." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateFilesystemRequest.type_id
					// -> yandex.cloud.compute.v1.Filesystem.type_id
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/filesystem.proto\n",
				Optional: true,
				Computed: true,
				Default:  stringdefault.StaticString("network-hdd"),

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"zone": schema.StringAttribute{
				MarkdownDescription: "ID of the availability zone where the filesystem resides.\n\n A filesystem can be attached only to instances residing in the same availability zone.",
				Description: "ID of the availability zone where the filesystem resides.\n\n A filesystem can be attached only to instances residing in the same availability zone." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateFilesystemRequest.zone_id
					// -> yandex.cloud.compute.v1.Filesystem.zone_id
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/filesystem.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},
		},

		Blocks: map[string]schema.Block{
			"timeouts": timeouts.BlockAll(ctx),
		},
	}
}

func (r *yandexComputeFilesystemResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
	schema0 := YandexComputeFilesystemResourceSchema(ctx)
	return map[int64]resource.StateUpgrader{
		0: resource.StateUpgrader{
			PriorSchema:   &schema0,
			StateUpgrader: moveStateFromV0,
		},
	}
}
