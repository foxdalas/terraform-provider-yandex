// Code generated by tfgen. DO NOT EDIT.

package yandex_container_repository

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
)

func YandexContainerRepositoryResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "A Repository resource. For more information, see [Repository](/docs/container-registry/concepts/repository).",
		MarkdownDescription: "A Repository resource. For more information, see [Repository](/docs/container-registry/concepts/repository).",
		Version:             1,
		Attributes: map[string]schema.Attribute{

			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the repository.\n The name is unique within the registry.",
				Description: "Name of the repository.\n The name is unique within the registry." +
					// proto paths: +
					// -> yandex.cloud.containerregistry.v1.Repository.name
					// -> yandex.cloud.containerregistry.v1.UpsertRepositoryRequest.name
					"package: yandex.cloud.containerregistry.v1\n" +
					"filename: yandex/cloud/containerregistry/v1/repository.proto\n",
				Required: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^([a-z0-9]+(?:[._-][a-z0-9]+)*(/([a-z0-9]+(?:[._-][a-z0-9]+)*))*)$"), "error validating regexp"),
				},
			},

			"repository_id": schema.StringAttribute{
				MarkdownDescription: "ID of the Repository resource to return.\n\n To get the repository ID use a [RepositoryService.List] request.",
				Description: "ID of the Repository resource to return.\n\n To get the repository ID use a [RepositoryService.List] request." +
					// proto paths: +
					// -> yandex.cloud.containerregistry.v1.DeleteRepositoryRequest.repository_id
					// -> yandex.cloud.containerregistry.v1.GetRepositoryRequest.repository_id
					// -> yandex.cloud.containerregistry.v1.Repository.id
					"package: yandex.cloud.containerregistry.v1\n" +
					"filename: yandex/cloud/containerregistry/v1/repository_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the Repository resource to return.\n\n To get the repository ID use a [RepositoryService.List] request.",
				Description: "ID of the Repository resource to return.\n\n To get the repository ID use a [RepositoryService.List] request." +
					// proto paths: +
					// -> yandex.cloud.containerregistry.v1.DeleteRepositoryRequest.repository_id
					// -> yandex.cloud.containerregistry.v1.GetRepositoryRequest.repository_id
					// -> yandex.cloud.containerregistry.v1.Repository.id
					"package: yandex.cloud.containerregistry.v1\n" +
					"filename: yandex/cloud/containerregistry/v1/repository_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},
		},

		Blocks: map[string]schema.Block{
			"timeouts": timeouts.BlockAll(ctx),
		},
	}
}

func (r *yandexContainerRepositoryResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
	schema0 := YandexContainerRepositoryResourceSchema(ctx)
	return map[int64]resource.StateUpgrader{
		0: resource.StateUpgrader{
			PriorSchema:   &schema0,
			StateUpgrader: moveStateFromV0,
		},
	}
}
