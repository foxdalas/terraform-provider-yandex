// Code generated by tfgen. DO NOT EDIT.

package yandex_lb_target_group

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/setplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/planmodifiers"
)

func YandexLbTargetGroupResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "A TargetGroup resource. For more information, see [Target groups and resources](/docs/network-load-balancer/concepts/target-resources).",
		MarkdownDescription: "A TargetGroup resource. For more information, see [Target groups and resources](/docs/network-load-balancer/concepts/target-resources).",
		Version:             1,
		Attributes: map[string]schema.Attribute{

			"created_at": schema.StringAttribute{
				MarkdownDescription: "Output only. Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.",
				Description: "Output only. Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format." +
					// proto paths: +
					// -> yandex.cloud.loadbalancer.v1.TargetGroup.created_at
					"package: yandex.cloud.loadbalancer.v1\n" +
					"filename: yandex/cloud/loadbalancer/v1/target_group.proto\n",
				Computed: true,
			},

			"description": schema.StringAttribute{
				MarkdownDescription: "Description of the target group. 0-256 characters long.",
				Description: "Description of the target group. 0-256 characters long." +
					// proto paths: +
					// -> yandex.cloud.loadbalancer.v1.CreateTargetGroupRequest.description
					// -> yandex.cloud.loadbalancer.v1.TargetGroup.description
					// -> yandex.cloud.loadbalancer.v1.UpdateTargetGroupRequest.description
					"package: yandex.cloud.loadbalancer.v1\n" +
					"filename: yandex/cloud/loadbalancer/v1/target_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 256),
				},
			},

			"folder_id": schema.StringAttribute{
				MarkdownDescription: "ID of the folder that the target group belongs to.",
				Description: "ID of the folder that the target group belongs to." +
					// proto paths: +
					// -> yandex.cloud.loadbalancer.v1.CreateTargetGroupRequest.folder_id
					// -> yandex.cloud.loadbalancer.v1.TargetGroup.folder_id
					"package: yandex.cloud.loadbalancer.v1\n" +
					"filename: yandex/cloud/loadbalancer/v1/target_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Resource labels as `` key:value `` pairs. Maximum of 64 per resource.",
				Description: "Resource labels as `` key:value `` pairs. Maximum of 64 per resource." +
					// proto paths: +
					// -> yandex.cloud.loadbalancer.v1.CreateTargetGroupRequest.labels
					// -> yandex.cloud.loadbalancer.v1.TargetGroup.labels
					// -> yandex.cloud.loadbalancer.v1.UpdateTargetGroupRequest.labels
					"package: yandex.cloud.loadbalancer.v1\n" +
					"filename: yandex/cloud/loadbalancer/v1/target_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedMap(),
				},
				Validators: []validator.Map{
					mapvalidator.KeysAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([a-z][-_0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(1, 63),
					),
					mapvalidator.ValueStringsAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([-_0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(0, 63),
					),
				},
			},

			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the target group.\n The name is unique within the folder. 3-63 characters long.",
				Description: "Name of the target group.\n The name is unique within the folder. 3-63 characters long." +
					// proto paths: +
					// -> yandex.cloud.loadbalancer.v1.CreateTargetGroupRequest.name
					// -> yandex.cloud.loadbalancer.v1.TargetGroup.name
					// -> yandex.cloud.loadbalancer.v1.UpdateTargetGroupRequest.name
					"package: yandex.cloud.loadbalancer.v1\n" +
					"filename: yandex/cloud/loadbalancer/v1/target_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^(|[a-z][-a-z0-9]{1,61}[a-z0-9])$"), "error validating regexp"),
				},
			},

			"region_id": schema.StringAttribute{
				MarkdownDescription: "ID of the region where the target group resides.",
				Description: "ID of the region where the target group resides." +
					// proto paths: +
					// -> yandex.cloud.loadbalancer.v1.CreateTargetGroupRequest.region_id
					// -> yandex.cloud.loadbalancer.v1.TargetGroup.region_id
					"package: yandex.cloud.loadbalancer.v1\n" +
					"filename: yandex/cloud/loadbalancer/v1/target_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"target_group_id": schema.StringAttribute{
				MarkdownDescription: "ID of the TargetGroup resource to return.\n To get the target group ID, use a [TargetGroupService.List] request.",
				Description: "ID of the TargetGroup resource to return.\n To get the target group ID, use a [TargetGroupService.List] request." +
					// proto paths: +
					// -> yandex.cloud.loadbalancer.v1.DeleteTargetGroupRequest.target_group_id
					// -> yandex.cloud.loadbalancer.v1.GetTargetGroupRequest.target_group_id
					// -> yandex.cloud.loadbalancer.v1.TargetGroup.id
					// -> yandex.cloud.loadbalancer.v1.UpdateTargetGroupRequest.target_group_id
					"package: yandex.cloud.loadbalancer.v1\n" +
					"filename: yandex/cloud/loadbalancer/v1/target_group_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the TargetGroup resource to return.\n To get the target group ID, use a [TargetGroupService.List] request.",
				Description: "ID of the TargetGroup resource to return.\n To get the target group ID, use a [TargetGroupService.List] request." +
					// proto paths: +
					// -> yandex.cloud.loadbalancer.v1.DeleteTargetGroupRequest.target_group_id
					// -> yandex.cloud.loadbalancer.v1.GetTargetGroupRequest.target_group_id
					// -> yandex.cloud.loadbalancer.v1.TargetGroup.id
					// -> yandex.cloud.loadbalancer.v1.UpdateTargetGroupRequest.target_group_id
					"package: yandex.cloud.loadbalancer.v1\n" +
					"filename: yandex/cloud/loadbalancer/v1/target_group_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},
		},

		Blocks: map[string]schema.Block{

			"target": schema.SetNestedBlock{
				NestedObject: schema.NestedBlockObject{

					Attributes: map[string]schema.Attribute{

						"address": schema.StringAttribute{
							MarkdownDescription: "IP address of the target.",
							Description: "IP address of the target." +
								// proto paths: +
								// -> yandex.cloud.loadbalancer.v1.CreateTargetGroupRequest.targetsyandex.cloud.loadbalancer.v1.Target.address
								// -> yandex.cloud.loadbalancer.v1.TargetGroup.targetsyandex.cloud.loadbalancer.v1.Target.address
								// -> yandex.cloud.loadbalancer.v1.UpdateTargetGroupRequest.targetsyandex.cloud.loadbalancer.v1.Target.address
								"package: yandex.cloud.loadbalancer.v1\n" +
								"filename: yandex/cloud/loadbalancer/v1/target_group.proto\n",
							Optional: true,
							Computed: true,

							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
						},

						"subnet_id": schema.StringAttribute{
							MarkdownDescription: "ID of the subnet that targets are connected to.\n All targets in the target group must be connected to the same subnet within a single availability zone.",
							Description: "ID of the subnet that targets are connected to.\n All targets in the target group must be connected to the same subnet within a single availability zone." +
								// proto paths: +
								// -> yandex.cloud.loadbalancer.v1.CreateTargetGroupRequest.targetsyandex.cloud.loadbalancer.v1.Target.subnet_id
								// -> yandex.cloud.loadbalancer.v1.TargetGroup.targetsyandex.cloud.loadbalancer.v1.Target.subnet_id
								// -> yandex.cloud.loadbalancer.v1.UpdateTargetGroupRequest.targetsyandex.cloud.loadbalancer.v1.Target.subnet_id
								"package: yandex.cloud.loadbalancer.v1\n" +
								"filename: yandex/cloud/loadbalancer/v1/target_group.proto\n",
							Optional: true,
							Computed: true,

							PlanModifiers: []planmodifier.String{
								stringplanmodifier.UseStateForUnknown(),
							},
							Validators: []validator.String{
								stringvalidator.LengthBetween(0, 50),
							},
						},
					},
				},
				MarkdownDescription: "A list of targets in the target group.",
				Description: "A list of targets in the target group." +
					// proto paths: +
					// -> yandex.cloud.loadbalancer.v1.CreateTargetGroupRequest.targets
					// -> yandex.cloud.loadbalancer.v1.TargetGroup.targets
					// -> yandex.cloud.loadbalancer.v1.UpdateTargetGroupRequest.targets
					"package: yandex.cloud.loadbalancer.v1\n" +
					"filename: yandex/cloud/loadbalancer/v1/target_group.proto\n",

				PlanModifiers: []planmodifier.Set{
					setplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedSet(),
				},
			},
			"timeouts": timeouts.BlockAll(ctx),
		},
	}
}

func (r *yandexLbTargetGroupResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
	schema0 := YandexLbTargetGroupResourceSchema(ctx)
	return map[int64]resource.StateUpgrader{
		0: resource.StateUpgrader{
			PriorSchema:   &schema0,
			StateUpgrader: moveStateFromV0,
		},
	}
}
