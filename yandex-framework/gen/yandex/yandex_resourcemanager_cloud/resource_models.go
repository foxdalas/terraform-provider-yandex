// Code generated by tfgen. DO NOT EDIT.

package yandex_resourcemanager_cloud

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	resourcemanager "github.com/yandex-cloud/go-genproto/yandex/cloud/resourcemanager/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexResourcemanagerCloudModel struct {
	CloudId        types.String   `tfsdk:"cloud_id"`
	ID             types.String   `tfsdk:"id"`
	CreatedAt      types.String   `tfsdk:"created_at"`
	Description    types.String   `tfsdk:"description"`
	Labels         types.Map      `tfsdk:"labels"`
	Name           types.String   `tfsdk:"name"`
	OrganizationId types.String   `tfsdk:"organization_id"`
	Timeouts       timeouts.Value `tfsdk:"timeouts"`
}

func NewYandexResourcemanagerCloudModel() yandexResourcemanagerCloudModel {
	return yandexResourcemanagerCloudModel{
		CloudId:        types.StringNull(),
		ID:             types.StringNull(),
		CreatedAt:      types.StringNull(),
		Description:    types.StringNull(),
		Labels:         types.MapNull(types.StringType),
		Name:           types.StringNull(),
		OrganizationId: types.StringNull(),
	}
}

var yandexResourcemanagerCloudModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cloud_id":        types.StringType,
		"id":              types.StringType,
		"created_at":      types.StringType,
		"description":     types.StringType,
		"labels":          types.MapType{ElemType: types.StringType},
		"name":            types.StringType,
		"organization_id": types.StringType,
		"timeouts":        timeouts.AttributesAll(context.Background()).GetType(),
	},
}

func flattenYandexResourcemanagerCloud(ctx context.Context,
	yandexResourcemanagerCloud *resourcemanager.Cloud,
	state yandexResourcemanagerCloudModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexResourcemanagerCloud == nil {
		return types.ObjectNull(yandexResourcemanagerCloudModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexResourcemanagerCloudModelType.AttrTypes, yandexResourcemanagerCloudModel{
		CloudId:        types.StringValue(yandexResourcemanagerCloud.GetId()),
		ID:             types.StringValue(yandexResourcemanagerCloud.GetId()),
		CreatedAt:      types.StringValue(yandexResourcemanagerCloud.GetCreatedAt().AsTime().Format(time.RFC3339)),
		Description:    types.StringValue(yandexResourcemanagerCloud.GetDescription()),
		Labels:         flattenYandexResourcemanagerCloudLabels(ctx, yandexResourcemanagerCloud.GetLabels(), state.Labels, diags),
		Name:           types.StringValue(yandexResourcemanagerCloud.GetName()),
		OrganizationId: types.StringValue(yandexResourcemanagerCloud.GetOrganizationId()),
		Timeouts:       to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexResourcemanagerCloud(ctx context.Context, yandexResourcemanagerCloudState types.Object, diags *diag.Diagnostics) *resourcemanager.Cloud {
	if yandexResourcemanagerCloudState.IsNull() || yandexResourcemanagerCloudState.IsUnknown() {
		return nil
	}
	var yandexResourcemanagerCloud yandexResourcemanagerCloudModel
	diags.Append(yandexResourcemanagerCloudState.As(ctx, &yandexResourcemanagerCloud, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexResourcemanagerCloudModel(ctx, yandexResourcemanagerCloud, diags)
}

func expandYandexResourcemanagerCloudModel(ctx context.Context, yandexResourcemanagerCloudState yandexResourcemanagerCloudModel, diags *diag.Diagnostics) *resourcemanager.Cloud {
	value := &resourcemanager.Cloud{}
	value.SetId(yandexResourcemanagerCloudState.CloudId.ValueString())
	value.SetId(yandexResourcemanagerCloudState.CloudId.ValueString())
	value.SetCreatedAt(converter.ParseTimestamp(yandexResourcemanagerCloudState.CreatedAt.ValueString(), diags))
	value.SetDescription(yandexResourcemanagerCloudState.Description.ValueString())
	value.SetLabels(expandYandexResourcemanagerCloudLabels(ctx, yandexResourcemanagerCloudState.Labels, diags))
	value.SetName(yandexResourcemanagerCloudState.Name.ValueString())
	value.SetOrganizationId(yandexResourcemanagerCloudState.OrganizationId.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexResourcemanagerCloudLabels(ctx context.Context, yandexResourcemanagerCloudLabels map[string]string, listState types.Map, diags *diag.Diagnostics) types.Map {
	if yandexResourcemanagerCloudLabels == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.MapNull(types.StringType)
	}
	yandexResourcemanagerCloudLabelsValues := make(map[string]attr.Value)
	for k, elem := range yandexResourcemanagerCloudLabels {
		val := types.StringValue(elem)
		yandexResourcemanagerCloudLabelsValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexResourcemanagerCloudLabelsValues)
	diags.Append(diag...)
	return value
}

func expandYandexResourcemanagerCloudLabels(ctx context.Context, yandexResourcemanagerCloudLabelsState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexResourcemanagerCloudLabelsState.IsNull() || yandexResourcemanagerCloudLabelsState.IsUnknown() {
		return nil
	}
	if len(yandexResourcemanagerCloudLabelsState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexResourcemanagerCloudLabelsRes := make(map[string]string)
	yandexResourcemanagerCloudLabelsType := make(map[string]types.String)
	diags.Append(yandexResourcemanagerCloudLabelsState.ElementsAs(ctx, &yandexResourcemanagerCloudLabelsType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexResourcemanagerCloudLabelsType {
		yandexResourcemanagerCloudLabelsRes[k] = elem.ValueString()
	}
	return yandexResourcemanagerCloudLabelsRes
}
