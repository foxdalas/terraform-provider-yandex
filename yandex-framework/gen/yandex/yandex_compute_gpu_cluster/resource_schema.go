// Code generated by tfgen. DO NOT EDIT.

package yandex_compute_gpu_cluster

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/planmodifiers"
)

func YandexComputeGpuClusterResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "A GPU cluster. For details about the concept, see [documentation](/docs/compute/concepts/gpus#gpu-clusters).",
		MarkdownDescription: "A GPU cluster. For details about the concept, see [documentation](/docs/compute/concepts/gpus#gpu-clusters).",
		Version:             1,
		Attributes: map[string]schema.Attribute{

			"created_at": schema.StringAttribute{
				MarkdownDescription: "Creation timestamp.",
				Description: "Creation timestamp." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.GpuCluster.created_at
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/gpu_cluster.proto\n",
				Computed: true,
			},

			"description": schema.StringAttribute{
				MarkdownDescription: "Description of the GPU cluster.",
				Description: "Description of the GPU cluster." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateGpuClusterRequest.description
					// -> yandex.cloud.compute.v1.GpuCluster.description
					// -> yandex.cloud.compute.v1.UpdateGpuClusterRequest.description
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/gpu_cluster.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			"folder_id": schema.StringAttribute{
				MarkdownDescription: "ID of the folder that the GPU cluster belongs to.",
				Description: "ID of the folder that the GPU cluster belongs to." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateGpuClusterRequest.folder_id
					// -> yandex.cloud.compute.v1.GpuCluster.folder_id
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/gpu_cluster.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			"gpu_cluster_id": schema.StringAttribute{
				MarkdownDescription: "ID of the GPU cluster to return.\n\n To get a GPU cluster ID, make a [GpuClusterService.List] request.",
				Description: "ID of the GPU cluster to return.\n\n To get a GPU cluster ID, make a [GpuClusterService.List] request." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.DeleteGpuClusterRequest.gpu_cluster_id
					// -> yandex.cloud.compute.v1.GetGpuClusterRequest.gpu_cluster_id
					// -> yandex.cloud.compute.v1.GpuCluster.id
					// -> yandex.cloud.compute.v1.UpdateGpuClusterRequest.gpu_cluster_id
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/gpu_cluster_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the GPU cluster to return.\n\n To get a GPU cluster ID, make a [GpuClusterService.List] request.",
				Description: "ID of the GPU cluster to return.\n\n To get a GPU cluster ID, make a [GpuClusterService.List] request." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.DeleteGpuClusterRequest.gpu_cluster_id
					// -> yandex.cloud.compute.v1.GetGpuClusterRequest.gpu_cluster_id
					// -> yandex.cloud.compute.v1.GpuCluster.id
					// -> yandex.cloud.compute.v1.UpdateGpuClusterRequest.gpu_cluster_id
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/gpu_cluster_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			"interconnect_type": schema.StringAttribute{
				MarkdownDescription: "Type of interconnect used for this GPU cluster.",
				Description: "Type of interconnect used for this GPU cluster." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateGpuClusterRequest.interconnect_type
					// -> yandex.cloud.compute.v1.GpuCluster.interconnect_type
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/gpu_cluster.proto\n",
				Optional: true,
				Computed: true,
				Default:  stringdefault.StaticString("INFINIBAND"),

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(converter.MapKeys(compute.GpuInterconnectType_value)...),
				},
			},

			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "GPU cluster labels as `key:value` pairs.",
				Description: "GPU cluster labels as `key:value` pairs." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateGpuClusterRequest.labels
					// -> yandex.cloud.compute.v1.GpuCluster.labels
					// -> yandex.cloud.compute.v1.UpdateGpuClusterRequest.labels
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/gpu_cluster.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedMap(),
				},
				Validators: []validator.Map{
					mapvalidator.ValueStringsAre(),
				},
			},

			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the GPU cluster.\n\n The name is unique within the folder.",
				Description: "Name of the GPU cluster.\n\n The name is unique within the folder." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateGpuClusterRequest.name
					// -> yandex.cloud.compute.v1.GpuCluster.name
					// -> yandex.cloud.compute.v1.UpdateGpuClusterRequest.name
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/gpu_cluster.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			"status": schema.StringAttribute{
				MarkdownDescription: "Status of the GPU cluster.",
				Description: "Status of the GPU cluster." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.GpuCluster.status
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/gpu_cluster.proto\n",
				Computed: true,
			},

			"zone": schema.StringAttribute{
				MarkdownDescription: "ID of the availability zone where the GPU cluster resides.",
				Description: "ID of the availability zone where the GPU cluster resides." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateGpuClusterRequest.zone_id
					// -> yandex.cloud.compute.v1.GpuCluster.zone_id
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/gpu_cluster.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					stringplanmodifier.UseStateForUnknown(),
				},
			},
		},

		Blocks: map[string]schema.Block{
			"timeouts": timeouts.BlockAll(ctx),
		},
	}
}

func (r *yandexComputeGpuClusterResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
	schema0 := YandexComputeGpuClusterResourceSchema(ctx)
	return map[int64]resource.StateUpgrader{
		0: resource.StateUpgrader{
			PriorSchema:   &schema0,
			StateUpgrader: moveStateFromV0,
		},
	}
}
