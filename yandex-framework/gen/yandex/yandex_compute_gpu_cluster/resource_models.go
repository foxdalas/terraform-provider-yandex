// Code generated by tfgen. DO NOT EDIT.

package yandex_compute_gpu_cluster

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexComputeGpuClusterModel struct {
	CreatedAt        types.String   `tfsdk:"created_at"`
	Description      types.String   `tfsdk:"description"`
	FolderId         types.String   `tfsdk:"folder_id"`
	GpuClusterId     types.String   `tfsdk:"gpu_cluster_id"`
	ID               types.String   `tfsdk:"id"`
	InterconnectType types.String   `tfsdk:"interconnect_type"`
	Labels           types.Map      `tfsdk:"labels"`
	Name             types.String   `tfsdk:"name"`
	Status           types.String   `tfsdk:"status"`
	Zone             types.String   `tfsdk:"zone"`
	Timeouts         timeouts.Value `tfsdk:"timeouts"`
}

func NewYandexComputeGpuClusterModel() yandexComputeGpuClusterModel {
	return yandexComputeGpuClusterModel{
		CreatedAt:        types.StringNull(),
		Description:      types.StringNull(),
		FolderId:         types.StringNull(),
		GpuClusterId:     types.StringNull(),
		ID:               types.StringNull(),
		InterconnectType: types.StringNull(),
		Labels:           types.MapNull(types.StringType),
		Name:             types.StringNull(),
		Status:           types.StringNull(),
		Zone:             types.StringNull(),
	}
}

var yandexComputeGpuClusterModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"created_at":        types.StringType,
		"description":       types.StringType,
		"folder_id":         types.StringType,
		"gpu_cluster_id":    types.StringType,
		"id":                types.StringType,
		"interconnect_type": types.StringType,
		"labels":            types.MapType{ElemType: types.StringType},
		"name":              types.StringType,
		"status":            types.StringType,
		"zone":              types.StringType,
		"timeouts":          timeouts.BlockAll(context.Background()).Type(),
	},
}

func flattenYandexComputeGpuCluster(ctx context.Context,
	yandexComputeGpuCluster *compute.GpuCluster,
	state yandexComputeGpuClusterModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexComputeGpuCluster == nil {
		return types.ObjectNull(yandexComputeGpuClusterModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexComputeGpuClusterModelType.AttrTypes, yandexComputeGpuClusterModel{
		CreatedAt:        types.StringValue(yandexComputeGpuCluster.GetCreatedAt().AsTime().Format(time.RFC3339)),
		Description:      types.StringValue(yandexComputeGpuCluster.GetDescription()),
		FolderId:         types.StringValue(yandexComputeGpuCluster.GetFolderId()),
		GpuClusterId:     types.StringValue(yandexComputeGpuCluster.GetId()),
		ID:               types.StringValue(yandexComputeGpuCluster.GetId()),
		InterconnectType: types.StringValue(yandexComputeGpuCluster.GetInterconnectType().String()),
		Labels:           flattenYandexComputeGpuClusterLabels(ctx, yandexComputeGpuCluster.GetLabels(), state.Labels, diags),
		Name:             types.StringValue(yandexComputeGpuCluster.GetName()),
		Status:           types.StringValue(yandexComputeGpuCluster.GetStatus().String()),
		Zone:             types.StringValue(yandexComputeGpuCluster.GetZoneId()),
		Timeouts:         to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexComputeGpuCluster(ctx context.Context, yandexComputeGpuClusterState types.Object, diags *diag.Diagnostics) *compute.GpuCluster {
	if yandexComputeGpuClusterState.IsNull() || yandexComputeGpuClusterState.IsUnknown() {
		return nil
	}
	var yandexComputeGpuCluster yandexComputeGpuClusterModel
	diags.Append(yandexComputeGpuClusterState.As(ctx, &yandexComputeGpuCluster, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexComputeGpuClusterModel(ctx, yandexComputeGpuCluster, diags)
}

func expandYandexComputeGpuClusterModel(ctx context.Context, yandexComputeGpuClusterState yandexComputeGpuClusterModel, diags *diag.Diagnostics) *compute.GpuCluster {
	value := &compute.GpuCluster{}
	value.SetCreatedAt(converter.ParseTimestamp(yandexComputeGpuClusterState.CreatedAt.ValueString(), diags))
	value.SetDescription(yandexComputeGpuClusterState.Description.ValueString())
	value.SetFolderId(yandexComputeGpuClusterState.FolderId.ValueString())
	value.SetId(yandexComputeGpuClusterState.GpuClusterId.ValueString())
	value.SetId(yandexComputeGpuClusterState.GpuClusterId.ValueString())
	value.SetInterconnectType(compute.GpuInterconnectType(compute.GpuInterconnectType_value[yandexComputeGpuClusterState.InterconnectType.ValueString()]))
	value.SetLabels(expandYandexComputeGpuClusterLabels(ctx, yandexComputeGpuClusterState.Labels, diags))
	value.SetName(yandexComputeGpuClusterState.Name.ValueString())
	value.SetStatus(compute.GpuCluster_Status(compute.GpuCluster_Status_value[yandexComputeGpuClusterState.Status.ValueString()]))
	value.SetZoneId(yandexComputeGpuClusterState.Zone.ValueString())
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexComputeGpuClusterLabels(ctx context.Context, yandexComputeGpuClusterLabels map[string]string, listState types.Map, diags *diag.Diagnostics) types.Map {
	if yandexComputeGpuClusterLabels == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.MapNull(types.StringType)
	}
	yandexComputeGpuClusterLabelsValues := make(map[string]attr.Value)
	for k, elem := range yandexComputeGpuClusterLabels {
		val := types.StringValue(elem)
		yandexComputeGpuClusterLabelsValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexComputeGpuClusterLabelsValues)
	diags.Append(diag...)
	return value
}

func expandYandexComputeGpuClusterLabels(ctx context.Context, yandexComputeGpuClusterLabelsState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexComputeGpuClusterLabelsState.IsNull() || yandexComputeGpuClusterLabelsState.IsUnknown() {
		return nil
	}
	if len(yandexComputeGpuClusterLabelsState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexComputeGpuClusterLabelsRes := make(map[string]string)
	yandexComputeGpuClusterLabelsType := make(map[string]types.String)
	diags.Append(yandexComputeGpuClusterLabelsState.ElementsAs(ctx, &yandexComputeGpuClusterLabelsType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexComputeGpuClusterLabelsType {
		yandexComputeGpuClusterLabelsRes[k] = elem.ValueString()
	}
	return yandexComputeGpuClusterLabelsRes
}
