// Code generated by tfgen. DO NOT EDIT.

package yandex_logging_group

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/planmodifiers"
)

func YandexLoggingGroupResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "",
		MarkdownDescription: "",
		Version:             1,
		Attributes: map[string]schema.Attribute{

			"cloud_id": schema.StringAttribute{
				MarkdownDescription: "Log group cloud ID.",
				Description: "Log group cloud ID." +
					// proto paths: +
					// -> yandex.cloud.logging.v1.LogGroup.cloud_id
					"package: yandex.cloud.logging.v1\n" +
					"filename: yandex/cloud/logging/v1/log_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			"created_at": schema.StringAttribute{
				MarkdownDescription: "Log group creation time.",
				Description: "Log group creation time." +
					// proto paths: +
					// -> yandex.cloud.logging.v1.LogGroup.created_at
					"package: yandex.cloud.logging.v1\n" +
					"filename: yandex/cloud/logging/v1/log_group.proto\n",
				Computed: true,
			},

			"data_stream": schema.StringAttribute{
				MarkdownDescription: "Data stream name",
				Description: "Data stream name" +
					// proto paths: +
					// -> yandex.cloud.logging.v1.CreateLogGroupRequest.data_stream
					// -> yandex.cloud.logging.v1.LogGroup.data_stream
					// -> yandex.cloud.logging.v1.UpdateLogGroupRequest.data_stream
					"package: yandex.cloud.logging.v1\n" +
					"filename: yandex/cloud/logging/v1/log_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 512),
				},
			},

			"description": schema.StringAttribute{
				MarkdownDescription: "Log group description.",
				Description: "Log group description." +
					// proto paths: +
					// -> yandex.cloud.logging.v1.CreateLogGroupRequest.description
					// -> yandex.cloud.logging.v1.LogGroup.description
					// -> yandex.cloud.logging.v1.UpdateLogGroupRequest.description
					"package: yandex.cloud.logging.v1\n" +
					"filename: yandex/cloud/logging/v1/log_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 256),
				},
			},

			"folder_id": schema.StringAttribute{
				MarkdownDescription: "Log group folder ID.",
				Description: "Log group folder ID." +
					// proto paths: +
					// -> yandex.cloud.logging.v1.CreateLogGroupRequest.folder_id
					// -> yandex.cloud.logging.v1.LogGroup.folder_id
					"package: yandex.cloud.logging.v1\n" +
					"filename: yandex/cloud/logging/v1/log_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplaceIfConfigured(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 64),
				},
			},

			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Log group labels.",
				Description: "Log group labels." +
					// proto paths: +
					// -> yandex.cloud.logging.v1.CreateLogGroupRequest.labels
					// -> yandex.cloud.logging.v1.LogGroup.labels
					// -> yandex.cloud.logging.v1.UpdateLogGroupRequest.labels
					"package: yandex.cloud.logging.v1\n" +
					"filename: yandex/cloud/logging/v1/log_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedMap(),
				},
				Validators: []validator.Map{
					mapvalidator.KeysAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([a-z][-_0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(1, 63),
					),
					mapvalidator.ValueStringsAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([-_0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(0, 63),
					),
				},
			},

			"log_group_id": schema.StringAttribute{
				MarkdownDescription: "ID of the log group to return.\n\n To get a log group ID make a [LogGroupService.List] request.",
				Description: "ID of the log group to return.\n\n To get a log group ID make a [LogGroupService.List] request." +
					// proto paths: +
					// -> yandex.cloud.logging.v1.DeleteLogGroupRequest.log_group_id
					// -> yandex.cloud.logging.v1.GetLogGroupRequest.log_group_id
					// -> yandex.cloud.logging.v1.LogGroup.id
					// -> yandex.cloud.logging.v1.UpdateLogGroupRequest.log_group_id
					"package: yandex.cloud.logging.v1\n" +
					"filename: yandex/cloud/logging/v1/log_group_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 64),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the log group to return.\n\n To get a log group ID make a [LogGroupService.List] request.",
				Description: "ID of the log group to return.\n\n To get a log group ID make a [LogGroupService.List] request." +
					// proto paths: +
					// -> yandex.cloud.logging.v1.DeleteLogGroupRequest.log_group_id
					// -> yandex.cloud.logging.v1.GetLogGroupRequest.log_group_id
					// -> yandex.cloud.logging.v1.LogGroup.id
					// -> yandex.cloud.logging.v1.UpdateLogGroupRequest.log_group_id
					"package: yandex.cloud.logging.v1\n" +
					"filename: yandex/cloud/logging/v1/log_group_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 64),
				},
			},

			"name": schema.StringAttribute{
				MarkdownDescription: "Log group name.",
				Description: "Log group name." +
					// proto paths: +
					// -> yandex.cloud.logging.v1.CreateLogGroupRequest.name
					// -> yandex.cloud.logging.v1.LogGroup.name
					// -> yandex.cloud.logging.v1.UpdateLogGroupRequest.name
					"package: yandex.cloud.logging.v1\n" +
					"filename: yandex/cloud/logging/v1/log_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^(([a-z]([-a-z0-9]{1,61}[a-z0-9])?)?)$"), "error validating regexp"),
				},
			},

			"retention_period": schema.StringAttribute{
				MarkdownDescription: "Log group entry retention period.\n\n Entries will be present in group during this period.",
				Description: "Log group entry retention period.\n\n Entries will be present in group during this period." +
					// proto paths: +
					// -> yandex.cloud.logging.v1.CreateLogGroupRequest.retention_period
					// -> yandex.cloud.logging.v1.LogGroup.retention_period
					// -> yandex.cloud.logging.v1.UpdateLogGroupRequest.retention_period
					"package: yandex.cloud.logging.v1\n" +
					"filename: yandex/cloud/logging/v1/log_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					planmodifiers.DurationPlanModifier(),
				},
			},

			"status": schema.StringAttribute{
				MarkdownDescription: "Status of the log group.",
				Description: "Status of the log group." +
					// proto paths: +
					// -> yandex.cloud.logging.v1.LogGroup.status
					"package: yandex.cloud.logging.v1\n" +
					"filename: yandex/cloud/logging/v1/log_group.proto\n",
				Computed: true,
			},
		},

		Blocks: map[string]schema.Block{
			"timeouts": timeouts.BlockAll(ctx),
		},
	}
}

func (r *yandexLoggingGroupResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
	schema0 := YandexLoggingGroupResourceSchema(ctx)
	return map[int64]resource.StateUpgrader{
		0: resource.StateUpgrader{
			PriorSchema:   &schema0,
			StateUpgrader: moveStateFromV0,
		},
	}
}
