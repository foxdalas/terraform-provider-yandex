// Code generated by tfgen. DO NOT EDIT.

package yandex_iam_workload_identity_federated_credential

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
)

func YandexIamWorkloadIdentityFederatedCredentialDatasourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "A federated credential.",
		MarkdownDescription: "A federated credential.",
		Attributes: map[string]schema.Attribute{

			"created_at": schema.StringAttribute{
				MarkdownDescription: "Creation timestamp.",
				Description: "Creation timestamp." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.FederatedCredential.created_at
					"package: yandex.cloud.iam.v1.workload\n" +
					"filename: yandex/cloud/iam/v1/workload/federated_credential.proto\n",
				Computed: true,
			},

			"external_subject_id": schema.StringAttribute{
				MarkdownDescription: "Id of the external subject.",
				Description: "Id of the external subject." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.FederatedCredential.external_subject_id
					"package: yandex.cloud.iam.v1.workload\n" +
					"filename: yandex/cloud/iam/v1/workload/federated_credential.proto\n",
				Computed: true,
			},

			"federated_credential_id": schema.StringAttribute{
				MarkdownDescription: "ID of the federated credential to return.\n To get the federated credential ID, make a [FederatedCredentialService.List] request.",
				Description: "ID of the federated credential to return.\n To get the federated credential ID, make a [FederatedCredentialService.List] request." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.FederatedCredential.id
					// -> yandex.cloud.iam.v1.workload.GetFederatedCredentialRequest.federated_credential_id
					"package: yandex.cloud.iam.v1.workload\n" +
					"filename: yandex/cloud/iam/v1/workload/federated_credential_service.proto\n",
				Optional: true,
				Computed: true,

				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the federated credential to return.\n To get the federated credential ID, make a [FederatedCredentialService.List] request.",
				Description: "ID of the federated credential to return.\n To get the federated credential ID, make a [FederatedCredentialService.List] request." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.FederatedCredential.id
					// -> yandex.cloud.iam.v1.workload.GetFederatedCredentialRequest.federated_credential_id
					"package: yandex.cloud.iam.v1.workload\n" +
					"filename: yandex/cloud/iam/v1/workload/federated_credential_service.proto\n",
				Optional: true,
				Computed: true,

				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"federation_id": schema.StringAttribute{
				MarkdownDescription: "ID of the workload identity federation which is used for authentication.",
				Description: "ID of the workload identity federation which is used for authentication." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.FederatedCredential.federation_id
					"package: yandex.cloud.iam.v1.workload\n" +
					"filename: yandex/cloud/iam/v1/workload/federated_credential.proto\n",
				Computed: true,
			},

			"service_account_id": schema.StringAttribute{
				MarkdownDescription: "Id of the service account that the federated credential belongs to.",
				Description: "Id of the service account that the federated credential belongs to." +
					// proto paths: +
					// -> yandex.cloud.iam.v1.workload.FederatedCredential.service_account_id
					"package: yandex.cloud.iam.v1.workload\n" +
					"filename: yandex/cloud/iam/v1/workload/federated_credential.proto\n",
				Optional: true,
				Computed: true,
			},
		},

		Blocks: map[string]schema.Block{
			"timeouts": timeouts.BlockAll(ctx),
		},
	}
}
