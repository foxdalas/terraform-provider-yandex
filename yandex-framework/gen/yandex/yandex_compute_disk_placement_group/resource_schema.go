// Code generated by tfgen. DO NOT EDIT.

package yandex_compute_disk_placement_group

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/planmodifiers"
)

func YandexComputeDiskPlacementGroupResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "",
		MarkdownDescription: "",
		Version:             1,
		Attributes: map[string]schema.Attribute{

			"created_at": schema.StringAttribute{
				MarkdownDescription: "Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.",
				Description: "Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.DiskPlacementGroup.created_at
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/disk_placement_group.proto\n",
				Computed: true,
			},

			"description": schema.StringAttribute{
				MarkdownDescription: "Description of the placement group.",
				Description: "Description of the placement group." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateDiskPlacementGroupRequest.description
					// -> yandex.cloud.compute.v1.DiskPlacementGroup.description
					// -> yandex.cloud.compute.v1.UpdateDiskPlacementGroupRequest.description
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/disk_placement_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 256),
				},
			},

			"disk_placement_group_id": schema.StringAttribute{
				MarkdownDescription: "ID of the placement group to return.\n To get the placement group ID, use [DiskPlacementGroupService.List] request.",
				Description: "ID of the placement group to return.\n To get the placement group ID, use [DiskPlacementGroupService.List] request." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.DeleteDiskPlacementGroupRequest.disk_placement_group_id
					// -> yandex.cloud.compute.v1.DiskPlacementGroup.id
					// -> yandex.cloud.compute.v1.GetDiskPlacementGroupRequest.disk_placement_group_id
					// -> yandex.cloud.compute.v1.UpdateDiskPlacementGroupRequest.disk_placement_group_id
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/disk_placement_group_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the placement group to return.\n To get the placement group ID, use [DiskPlacementGroupService.List] request.",
				Description: "ID of the placement group to return.\n To get the placement group ID, use [DiskPlacementGroupService.List] request." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.DeleteDiskPlacementGroupRequest.disk_placement_group_id
					// -> yandex.cloud.compute.v1.DiskPlacementGroup.id
					// -> yandex.cloud.compute.v1.GetDiskPlacementGroupRequest.disk_placement_group_id
					// -> yandex.cloud.compute.v1.UpdateDiskPlacementGroupRequest.disk_placement_group_id
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/disk_placement_group_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"folder_id": schema.StringAttribute{
				MarkdownDescription: "ID of the folder that the placement group belongs to.",
				Description: "ID of the folder that the placement group belongs to." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateDiskPlacementGroupRequest.folder_id
					// -> yandex.cloud.compute.v1.DiskPlacementGroup.folder_id
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/disk_placement_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Resource labels as `key:value` pairs.",
				Description: "Resource labels as `key:value` pairs." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateDiskPlacementGroupRequest.labels
					// -> yandex.cloud.compute.v1.DiskPlacementGroup.labels
					// -> yandex.cloud.compute.v1.UpdateDiskPlacementGroupRequest.labels
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/disk_placement_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedMap(),
				},
				Validators: []validator.Map{
					mapvalidator.KeysAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([a-z][-_./\\@0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(1, 63),
					),
					mapvalidator.ValueStringsAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([-_./\\@0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(0, 63),
					),
				},
			},

			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the placement group.\n The name is unique within the folder.",
				Description: "Name of the placement group.\n The name is unique within the folder." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateDiskPlacementGroupRequest.name
					// -> yandex.cloud.compute.v1.DiskPlacementGroup.name
					// -> yandex.cloud.compute.v1.UpdateDiskPlacementGroupRequest.name
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/disk_placement_group.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^(|[a-z]([-_a-z0-9]{0,61}[a-z0-9])?)$"), "error validating regexp"),
				},
			},

			"status": schema.StringAttribute{
				MarkdownDescription: "Current status of the placement group",
				Description: "Current status of the placement group" +
					// proto paths: +
					// -> yandex.cloud.compute.v1.DiskPlacementGroup.status
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/disk_placement_group.proto\n",
				Computed: true,
			},

			"zone": schema.StringAttribute{
				MarkdownDescription: "ID of the availability zone where the placement group resides.",
				Description: "ID of the availability zone where the placement group resides." +
					// proto paths: +
					// -> yandex.cloud.compute.v1.CreateDiskPlacementGroupRequest.zone_id
					// -> yandex.cloud.compute.v1.DiskPlacementGroup.zone_id
					"package: yandex.cloud.compute.v1\n" +
					"filename: yandex/cloud/compute/v1/disk_placement_group.proto\n",
				Optional: true,
				Computed: true,
				Default:  stringdefault.StaticString("ru-central1-b"),

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},
		},

		Blocks: map[string]schema.Block{
			"timeouts": timeouts.BlockAll(ctx),
		},
	}
}

func (r *yandexComputeDiskPlacementGroupResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
	schema0 := YandexComputeDiskPlacementGroupResourceSchema(ctx)
	return map[int64]resource.StateUpgrader{
		0: resource.StateUpgrader{
			PriorSchema:   &schema0,
			StateUpgrader: moveStateFromV0,
		},
	}
}
