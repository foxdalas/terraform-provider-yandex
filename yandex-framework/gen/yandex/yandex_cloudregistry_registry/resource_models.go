// Code generated by tfgen. DO NOT EDIT.

package yandex_cloudregistry_registry

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	cloudregistry "github.com/yandex-cloud/go-genproto/yandex/cloud/cloudregistry/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexCloudregistryRegistryModel struct {
	CreatedAt   types.String   `tfsdk:"created_at"`
	Description types.String   `tfsdk:"description"`
	FolderId    types.String   `tfsdk:"folder_id"`
	Kind        types.String   `tfsdk:"kind"`
	Labels      types.Map      `tfsdk:"labels"`
	ModifiedAt  types.String   `tfsdk:"modified_at"`
	Name        types.String   `tfsdk:"name"`
	Properties  types.Map      `tfsdk:"properties"`
	RegistryId  types.String   `tfsdk:"registry_id"`
	ID          types.String   `tfsdk:"id"`
	Status      types.String   `tfsdk:"status"`
	Type        types.String   `tfsdk:"type"`
	Timeouts    timeouts.Value `tfsdk:"timeouts"`
}

func NewYandexCloudregistryRegistryModel() yandexCloudregistryRegistryModel {
	return yandexCloudregistryRegistryModel{
		CreatedAt:   types.StringNull(),
		Description: types.StringNull(),
		FolderId:    types.StringNull(),
		Kind:        types.StringNull(),
		Labels:      types.MapNull(types.StringType),
		ModifiedAt:  types.StringNull(),
		Name:        types.StringNull(),
		Properties:  types.MapNull(types.StringType),
		RegistryId:  types.StringNull(),
		ID:          types.StringNull(),
		Status:      types.StringNull(),
		Type:        types.StringNull(),
	}
}

var yandexCloudregistryRegistryModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"created_at":  types.StringType,
		"description": types.StringType,
		"folder_id":   types.StringType,
		"kind":        types.StringType,
		"labels":      types.MapType{ElemType: types.StringType},
		"modified_at": types.StringType,
		"name":        types.StringType,
		"properties":  types.MapType{ElemType: types.StringType},
		"registry_id": types.StringType,
		"id":          types.StringType,
		"status":      types.StringType,
		"type":        types.StringType,
		"timeouts":    timeouts.AttributesAll(context.Background()).GetType(),
	},
}

func flattenYandexCloudregistryRegistry(ctx context.Context,
	yandexCloudregistryRegistry *cloudregistry.Registry,
	state yandexCloudregistryRegistryModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexCloudregistryRegistry == nil {
		return types.ObjectNull(yandexCloudregistryRegistryModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexCloudregistryRegistryModelType.AttrTypes, yandexCloudregistryRegistryModel{
		CreatedAt:   types.StringValue(yandexCloudregistryRegistry.GetCreatedAt().AsTime().Format(time.RFC3339)),
		Description: types.StringValue(yandexCloudregistryRegistry.GetDescription()),
		FolderId:    types.StringValue(yandexCloudregistryRegistry.GetFolderId()),
		Kind:        types.StringValue(yandexCloudregistryRegistry.GetKind().String()),
		Labels:      flattenYandexCloudregistryRegistryLabels(ctx, yandexCloudregistryRegistry.GetLabels(), state.Labels, diags),
		ModifiedAt:  types.StringValue(yandexCloudregistryRegistry.GetModifiedAt().AsTime().Format(time.RFC3339)),
		Name:        types.StringValue(yandexCloudregistryRegistry.GetName()),
		Properties:  flattenYandexCloudregistryRegistryProperties(ctx, yandexCloudregistryRegistry.GetProperties(), state.Properties, diags),
		RegistryId:  types.StringValue(yandexCloudregistryRegistry.GetId()),
		ID:          types.StringValue(yandexCloudregistryRegistry.GetId()),
		Status:      types.StringValue(yandexCloudregistryRegistry.GetStatus().String()),
		Type:        types.StringValue(yandexCloudregistryRegistry.GetType().String()),
		Timeouts:    to,
	})
	diags.Append(diag...)
	return value
}

func expandYandexCloudregistryRegistry(ctx context.Context, yandexCloudregistryRegistryState types.Object, diags *diag.Diagnostics) *cloudregistry.Registry {
	if yandexCloudregistryRegistryState.IsNull() || yandexCloudregistryRegistryState.IsUnknown() {
		return nil
	}
	var yandexCloudregistryRegistry yandexCloudregistryRegistryModel
	diags.Append(yandexCloudregistryRegistryState.As(ctx, &yandexCloudregistryRegistry, basetypes.ObjectAsOptions{UnhandledNullAsEmpty: true, UnhandledUnknownAsEmpty: true})...)
	if diags.HasError() {
		return nil
	}
	return expandYandexCloudregistryRegistryModel(ctx, yandexCloudregistryRegistry, diags)
}

func expandYandexCloudregistryRegistryModel(ctx context.Context, yandexCloudregistryRegistryState yandexCloudregistryRegistryModel, diags *diag.Diagnostics) *cloudregistry.Registry {
	value := &cloudregistry.Registry{}
	value.SetCreatedAt(converter.ParseTimestamp(yandexCloudregistryRegistryState.CreatedAt.ValueString(), diags))
	value.SetDescription(yandexCloudregistryRegistryState.Description.ValueString())
	value.SetFolderId(yandexCloudregistryRegistryState.FolderId.ValueString())
	value.SetKind(cloudregistry.Registry_Kind(cloudregistry.Registry_Kind_value[yandexCloudregistryRegistryState.Kind.ValueString()]))
	value.SetLabels(expandYandexCloudregistryRegistryLabels(ctx, yandexCloudregistryRegistryState.Labels, diags))
	value.SetModifiedAt(converter.ParseTimestamp(yandexCloudregistryRegistryState.ModifiedAt.ValueString(), diags))
	value.SetName(yandexCloudregistryRegistryState.Name.ValueString())
	value.SetProperties(expandYandexCloudregistryRegistryProperties(ctx, yandexCloudregistryRegistryState.Properties, diags))
	value.SetId(yandexCloudregistryRegistryState.RegistryId.ValueString())
	value.SetId(yandexCloudregistryRegistryState.RegistryId.ValueString())
	value.SetStatus(cloudregistry.Registry_Status(cloudregistry.Registry_Status_value[yandexCloudregistryRegistryState.Status.ValueString()]))
	value.SetType(cloudregistry.Registry_Type(cloudregistry.Registry_Type_value[yandexCloudregistryRegistryState.Type.ValueString()]))
	if diags.HasError() {
		return nil
	}
	return value
}

func flattenYandexCloudregistryRegistryLabels(ctx context.Context, yandexCloudregistryRegistryLabels map[string]string, listState types.Map, diags *diag.Diagnostics) types.Map {
	if yandexCloudregistryRegistryLabels == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.MapNull(types.StringType)
	}
	yandexCloudregistryRegistryLabelsValues := make(map[string]attr.Value)
	for k, elem := range yandexCloudregistryRegistryLabels {
		val := types.StringValue(elem)
		yandexCloudregistryRegistryLabelsValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexCloudregistryRegistryLabelsValues)
	diags.Append(diag...)
	return value
}

func expandYandexCloudregistryRegistryLabels(ctx context.Context, yandexCloudregistryRegistryLabelsState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexCloudregistryRegistryLabelsState.IsNull() || yandexCloudregistryRegistryLabelsState.IsUnknown() {
		return nil
	}
	if len(yandexCloudregistryRegistryLabelsState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexCloudregistryRegistryLabelsRes := make(map[string]string)
	yandexCloudregistryRegistryLabelsType := make(map[string]types.String)
	diags.Append(yandexCloudregistryRegistryLabelsState.ElementsAs(ctx, &yandexCloudregistryRegistryLabelsType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexCloudregistryRegistryLabelsType {
		yandexCloudregistryRegistryLabelsRes[k] = elem.ValueString()
	}
	return yandexCloudregistryRegistryLabelsRes
}

func flattenYandexCloudregistryRegistryProperties(ctx context.Context, yandexCloudregistryRegistryProperties map[string]string, listState types.Map, diags *diag.Diagnostics) types.Map {
	if yandexCloudregistryRegistryProperties == nil {
		if !listState.IsNull() && !listState.IsUnknown() && len(listState.Elements()) == 0 {
			return listState
		}
		return types.MapNull(types.StringType)
	}
	yandexCloudregistryRegistryPropertiesValues := make(map[string]attr.Value)
	for k, elem := range yandexCloudregistryRegistryProperties {
		val := types.StringValue(elem)
		yandexCloudregistryRegistryPropertiesValues[k] = val
	}

	value, diag := types.MapValue(types.StringType, yandexCloudregistryRegistryPropertiesValues)
	diags.Append(diag...)
	return value
}

func expandYandexCloudregistryRegistryProperties(ctx context.Context, yandexCloudregistryRegistryPropertiesState types.Map, diags *diag.Diagnostics) map[string]string {
	if yandexCloudregistryRegistryPropertiesState.IsNull() || yandexCloudregistryRegistryPropertiesState.IsUnknown() {
		return nil
	}
	if len(yandexCloudregistryRegistryPropertiesState.Elements()) == 0 {
		return map[string]string{}
	}
	yandexCloudregistryRegistryPropertiesRes := make(map[string]string)
	yandexCloudregistryRegistryPropertiesType := make(map[string]types.String)
	diags.Append(yandexCloudregistryRegistryPropertiesState.ElementsAs(ctx, &yandexCloudregistryRegistryPropertiesType, false)...)
	if diags.HasError() {
		return nil
	}
	for k, elem := range yandexCloudregistryRegistryPropertiesType {
		yandexCloudregistryRegistryPropertiesRes[k] = elem.ValueString()
	}
	return yandexCloudregistryRegistryPropertiesRes
}
