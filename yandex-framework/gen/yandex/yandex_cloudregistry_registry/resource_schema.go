// Code generated by tfgen. DO NOT EDIT.

package yandex_cloudregistry_registry

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	cloudregistry "github.com/yandex-cloud/go-genproto/yandex/cloud/cloudregistry/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/planmodifiers"
)

func YandexCloudregistryRegistryResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "A Registry resource. For more information, see the [Registry](/docs/cloud-registry/concepts/registry) section of the documentation.",
		MarkdownDescription: "A Registry resource. For more information, see the [Registry](/docs/cloud-registry/concepts/registry) section of the documentation.",
		Version:             1,
		Attributes: map[string]schema.Attribute{

			"created_at": schema.StringAttribute{
				MarkdownDescription: "Output only. Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.",
				Description: "Output only. Creation timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format." +
					// proto paths: +
					// -> yandex.cloud.cloudregistry.v1.Registry.created_at
					"package: yandex.cloud.cloudregistry.v1\n" +
					"filename: yandex/cloud/cloudregistry/v1/registry.proto\n",
				Computed: true,
			},

			"description": schema.StringAttribute{
				MarkdownDescription: "Description of the registry.",
				Description: "Description of the registry." +
					// proto paths: +
					// -> yandex.cloud.cloudregistry.v1.CreateRegistryRequest.description
					// -> yandex.cloud.cloudregistry.v1.Registry.description
					// -> yandex.cloud.cloudregistry.v1.UpdateRegistryRequest.description
					"package: yandex.cloud.cloudregistry.v1\n" +
					"filename: yandex/cloud/cloudregistry/v1/registry.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 1024),
				},
			},

			"folder_id": schema.StringAttribute{
				MarkdownDescription: "ID of the folder that the registry belongs to.",
				Description: "ID of the folder that the registry belongs to." +
					// proto paths: +
					// -> yandex.cloud.cloudregistry.v1.CreateRegistryRequest.folder_id
					// -> yandex.cloud.cloudregistry.v1.Registry.folder_id
					"package: yandex.cloud.cloudregistry.v1\n" +
					"filename: yandex/cloud/cloudregistry/v1/registry.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"kind": schema.StringAttribute{
				MarkdownDescription: "Kind of the registry.",
				Description: "Kind of the registry." +
					// proto paths: +
					// -> yandex.cloud.cloudregistry.v1.CreateRegistryRequest.kind
					// -> yandex.cloud.cloudregistry.v1.Registry.kind
					"package: yandex.cloud.cloudregistry.v1\n" +
					"filename: yandex/cloud/cloudregistry/v1/registry.proto\n",
				Required: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(converter.MapKeys(cloudregistry.Registry_Kind_value)...),
				},
			},

			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Resource labels as `key:value` pairs. Maximum of 64 per resource.",
				Description: "Resource labels as `key:value` pairs. Maximum of 64 per resource." +
					// proto paths: +
					// -> yandex.cloud.cloudregistry.v1.CreateRegistryRequest.labels
					// -> yandex.cloud.cloudregistry.v1.Registry.labels
					// -> yandex.cloud.cloudregistry.v1.UpdateRegistryRequest.labels
					"package: yandex.cloud.cloudregistry.v1\n" +
					"filename: yandex/cloud/cloudregistry/v1/registry.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedMap(),
				},
				Validators: []validator.Map{
					mapvalidator.KeysAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([a-z][-_0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(1, 63),
					),
					mapvalidator.ValueStringsAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([-_0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(0, 63),
					),
				},
			},

			"modified_at": schema.StringAttribute{
				MarkdownDescription: "Output only. Modification timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.",
				Description: "Output only. Modification timestamp in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format." +
					// proto paths: +
					// -> yandex.cloud.cloudregistry.v1.Registry.modified_at
					"package: yandex.cloud.cloudregistry.v1\n" +
					"filename: yandex/cloud/cloudregistry/v1/registry.proto\n",
				Computed: true,
			},

			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the registry.",
				Description: "Name of the registry." +
					// proto paths: +
					// -> yandex.cloud.cloudregistry.v1.CreateRegistryRequest.name
					// -> yandex.cloud.cloudregistry.v1.Registry.name
					// -> yandex.cloud.cloudregistry.v1.UpdateRegistryRequest.name
					"package: yandex.cloud.cloudregistry.v1\n" +
					"filename: yandex/cloud/cloudregistry/v1/registry.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^(|[a-z][-a-z0-9]{1,61}[a-z0-9])$"), "error validating regexp"),
				},
			},

			"properties": schema.MapAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Resource properties as `key:value` pairs. Maximum of 64 per resource.",
				Description: "Resource properties as `key:value` pairs. Maximum of 64 per resource." +
					// proto paths: +
					// -> yandex.cloud.cloudregistry.v1.CreateRegistryRequest.properties
					// -> yandex.cloud.cloudregistry.v1.Registry.properties
					// -> yandex.cloud.cloudregistry.v1.UpdateRegistryRequest.properties
					"package: yandex.cloud.cloudregistry.v1\n" +
					"filename: yandex/cloud/cloudregistry/v1/registry.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedMap(),
				},
				Validators: []validator.Map{
					mapvalidator.KeysAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([a-zA-Z]+)$"), "error validating regexp"),
						stringvalidator.LengthBetween(1, 63),
					),
					mapvalidator.ValueStringsAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([-_.~!*'();/?:@&=+$,%#0-9a-zA-Z]+)$"), "error validating regexp"),
						stringvalidator.LengthBetween(0, 63),
					),
				},
			},

			"registry_id": schema.StringAttribute{
				MarkdownDescription: "ID of the Registry resource to return.\n\n To get the registry ID use a [RegistryService.List] request.",
				Description: "ID of the Registry resource to return.\n\n To get the registry ID use a [RegistryService.List] request." +
					// proto paths: +
					// -> yandex.cloud.cloudregistry.v1.DeleteRegistryRequest.registry_id
					// -> yandex.cloud.cloudregistry.v1.GetRegistryRequest.registry_id
					// -> yandex.cloud.cloudregistry.v1.Registry.id
					// -> yandex.cloud.cloudregistry.v1.UpdateRegistryRequest.registry_id
					"package: yandex.cloud.cloudregistry.v1\n" +
					"filename: yandex/cloud/cloudregistry/v1/registry_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the Registry resource to return.\n\n To get the registry ID use a [RegistryService.List] request.",
				Description: "ID of the Registry resource to return.\n\n To get the registry ID use a [RegistryService.List] request." +
					// proto paths: +
					// -> yandex.cloud.cloudregistry.v1.DeleteRegistryRequest.registry_id
					// -> yandex.cloud.cloudregistry.v1.GetRegistryRequest.registry_id
					// -> yandex.cloud.cloudregistry.v1.Registry.id
					// -> yandex.cloud.cloudregistry.v1.UpdateRegistryRequest.registry_id
					"package: yandex.cloud.cloudregistry.v1\n" +
					"filename: yandex/cloud/cloudregistry/v1/registry_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"status": schema.StringAttribute{
				MarkdownDescription: "Output only. Status of the registry.",
				Description: "Output only. Status of the registry." +
					// proto paths: +
					// -> yandex.cloud.cloudregistry.v1.Registry.status
					"package: yandex.cloud.cloudregistry.v1\n" +
					"filename: yandex/cloud/cloudregistry/v1/registry.proto\n",
				Computed: true,
			},

			"type": schema.StringAttribute{
				MarkdownDescription: "Type of the registry.",
				Description: "Type of the registry." +
					// proto paths: +
					// -> yandex.cloud.cloudregistry.v1.CreateRegistryRequest.type
					// -> yandex.cloud.cloudregistry.v1.Registry.type
					"package: yandex.cloud.cloudregistry.v1\n" +
					"filename: yandex/cloud/cloudregistry/v1/registry.proto\n",
				Required: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf(converter.MapKeys(cloudregistry.Registry_Type_value)...),
				},
			},
			"timeouts": timeouts.AttributesAll(ctx),
		},

		Blocks: map[string]schema.Block{},
	}
}
