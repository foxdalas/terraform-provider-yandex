// Code generated by tfgen. DO NOT EDIT.

package yandex_cloudregistry_registry

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	cloudregistry "github.com/yandex-cloud/go-genproto/yandex/cloud/cloudregistry/v1"
	cloudregistryv1sdk "github.com/yandex-cloud/go-sdk/services/cloudregistry/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/validate"
	provider_config "github.com/yandex-cloud/terraform-provider-yandex/yandex-framework/provider/config"
	"google.golang.org/genproto/protobuf/field_mask"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
)

var _ resource.ResourceWithConfigure = (*yandexCloudregistryRegistryResource)(nil)
var _ resource.ResourceWithImportState = (*yandexCloudregistryRegistryResource)(nil)

type yandexCloudregistryRegistryResource struct {
	providerConfig *provider_config.Config
}

func NewResource() resource.Resource {
	return &yandexCloudregistryRegistryResource{}
}

func (r *yandexCloudregistryRegistryResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = "yandex_cloudregistry_registry"
}

func (r *yandexCloudregistryRegistryResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerConfig, ok := req.ProviderData.(*provider_config.Config)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Resource Configure Type",
			fmt.Sprintf("Expected *provider_config.Config, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}

	r.providerConfig = providerConfig
}

func (r *yandexCloudregistryRegistryResource) Schema(ctx context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = YandexCloudregistryRegistryResourceSchema(ctx)
}

func (r *yandexCloudregistryRegistryResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("registry_id"), req, resp)
}

func (r *yandexCloudregistryRegistryResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state yandexCloudregistryRegistryModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	readTimeout, timeoutInitError := state.Timeouts.Read(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, readTimeout)
	defer cancel()

	reqApi := &cloudregistry.GetRegistryRequest{}
	id := state.ID.ValueString()
	if !state.RegistryId.IsUnknown() && !state.RegistryId.IsNull() {
		id = state.RegistryId.ValueString()
	}
	reqApi.SetRegistryId(id)
	tflog.Debug(ctx, fmt.Sprintf("Read registry request: %s", validate.ProtoDump(reqApi)))

	md := new(metadata.MD)
	res, err := cloudregistryv1sdk.NewRegistryClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read registry x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read registry x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"registry not found",
			)
			resp.State.RemoveResource(ctx)
			return
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get registry:"+err.Error(),
			)
		}
	}
	tflog.Debug(ctx, fmt.Sprintf("Read registry response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	newState := flattenYandexCloudregistryRegistry(ctx, res, state, state.Timeouts, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *yandexCloudregistryRegistryResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan yandexCloudregistryRegistryModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	createTimeout, timeoutInitError := plan.Timeouts.Create(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, createTimeout)
	defer cancel()

	createReq := &cloudregistry.CreateRegistryRequest{}
	createReq.SetFolderId(converter.GetFolderID(plan.FolderId.ValueString(), r.providerConfig, &diags))
	createReq.SetName(plan.Name.ValueString())
	createReq.SetLabels(expandYandexCloudregistryRegistryLabels(ctx, plan.Labels, &diags))
	createReq.SetKind(cloudregistry.Registry_Kind(cloudregistry.Registry_Kind_value[plan.Kind.ValueString()]))
	createReq.SetType(cloudregistry.Registry_Type(cloudregistry.Registry_Type_value[plan.Type.ValueString()]))
	createReq.SetDescription(plan.Description.ValueString())
	createReq.SetProperties(expandYandexCloudregistryRegistryProperties(ctx, plan.Properties, &diags))
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("Create registry request: %s", validate.ProtoDump(createReq)))

	md := new(metadata.MD)
	op, err := cloudregistryv1sdk.NewRegistryClient(r.providerConfig.SDKv2).Create(ctx, createReq, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("[DEBUG] Create registry x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Create registry x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		resp.Diagnostics.AddError(
			"Failed to Create resource",
			"Error while requesting API to create registry:"+err.Error(),
		)
		return
	}
	createRes, err := op.Wait(ctx)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Create Resource",
			fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
				"Please retry the operation or report this issue to the provider developers.\n\n"+
				"Error: %s", err),
		)
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("Create registry response: %s", validate.ProtoDump(createRes)))

	plan.RegistryId = types.StringValue(createRes.Id)

	reqApi := &cloudregistry.GetRegistryRequest{}
	reqApi.SetRegistryId(plan.RegistryId.ValueString())
	tflog.Debug(ctx, fmt.Sprintf("Read registry request: %s", validate.ProtoDump(reqApi)))

	md = new(metadata.MD)
	res, err := cloudregistryv1sdk.NewRegistryClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read registry x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read registry x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"registry not found",
			)
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get registry:"+err.Error(),
			)
		}
	}
	tflog.Debug(ctx, fmt.Sprintf("Read registry response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	newState := flattenYandexCloudregistryRegistry(ctx, res, plan, plan.Timeouts, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *yandexCloudregistryRegistryResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state yandexCloudregistryRegistryModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	deleteTimeout, timeoutInitError := state.Timeouts.Delete(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, deleteTimeout)
	defer cancel()

	reqApi := &cloudregistry.DeleteRegistryRequest{}
	id := state.ID.ValueString()
	if !state.RegistryId.IsUnknown() && !state.RegistryId.IsNull() {
		id = state.RegistryId.ValueString()
	}
	reqApi.SetRegistryId(id)
	tflog.Debug(ctx, fmt.Sprintf("Delete registry request: %s", validate.ProtoDump(reqApi)))

	md := new(metadata.MD)

	op, err := cloudregistryv1sdk.NewRegistryClient(r.providerConfig.SDKv2).Delete(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Delete registry x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Delete registry x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		resp.Diagnostics.AddError(
			"Failed to Delete resource",
			"Error while requesting API to delete registry:"+err.Error(),
		)
		return
	}
	deleteRes, err := op.Wait(ctx)
	if err != nil {
		resp.Diagnostics.AddError(
			"Unable to Delete Resource",
			fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
				"Please retry the operation or report this issue to the provider developers.\n\n"+
				"Error: %s", err),
		)
		return
	}
	tflog.Debug(ctx, fmt.Sprintf("[DEBUG] Delete registry response: %s", validate.ProtoDump(deleteRes)))
}

func (r *yandexCloudregistryRegistryResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state yandexCloudregistryRegistryModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	updateTimeout, timeoutInitError := plan.Timeouts.Update(ctx, provider_config.DefaultTimeout)
	if timeoutInitError != nil {
		resp.Diagnostics.Append(timeoutInitError...)
		return
	}

	ctx, cancel := context.WithTimeout(ctx, updateTimeout)
	defer cancel()
	var updatePaths []string

	if !plan.Description.Equal(state.Description) {
		updatePaths = append(updatePaths, "description")
	}
	if plan.Labels.IsNull() {
		plan.Labels = types.MapNull(types.StringType)
	}
	if state.Labels.IsNull() {
		state.Labels = types.MapNull(types.StringType)
	}
	if !plan.Labels.Equal(state.Labels) {
		updatePaths = append(updatePaths, "labels")
	}
	if !plan.Name.Equal(state.Name) {
		updatePaths = append(updatePaths, "name")
	}
	if plan.Properties.IsNull() {
		plan.Properties = types.MapNull(types.StringType)
	}
	if state.Properties.IsNull() {
		state.Properties = types.MapNull(types.StringType)
	}
	if !plan.Properties.Equal(state.Properties) {
		updatePaths = append(updatePaths, "properties")
	}
	if !plan.RegistryId.Equal(state.RegistryId) {
		updatePaths = append(updatePaths, "registry_id")
	}
	if len(updatePaths) != 0 {

		updateReq := &cloudregistry.UpdateRegistryRequest{}
		id := plan.ID.ValueString()
		if !plan.RegistryId.IsUnknown() && !plan.RegistryId.IsNull() {
			id = plan.RegistryId.ValueString()
		}
		updateReq.SetRegistryId(id)
		updateReq.SetName(plan.Name.ValueString())
		updateReq.SetLabels(expandYandexCloudregistryRegistryLabels(ctx, plan.Labels, &diags))
		updateReq.SetDescription(plan.Description.ValueString())
		updateReq.SetProperties(expandYandexCloudregistryRegistryProperties(ctx, plan.Properties, &diags))
		updateReq.SetUpdateMask(&field_mask.FieldMask{Paths: updatePaths})

		resp.Diagnostics.Append(diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		tflog.Debug(ctx, fmt.Sprintf("Update registry request: %s", validate.ProtoDump(updateReq)))

		md := new(metadata.MD)
		op, err := cloudregistryv1sdk.NewRegistryClient(r.providerConfig.SDKv2).Update(ctx, updateReq, grpc.Header(md))
		if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
			tflog.Debug(ctx, fmt.Sprintf("Update registry x-server-trace-id: %s", traceHeader[0]))
		}
		if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
			tflog.Debug(ctx, fmt.Sprintf("Update registry x-server-request-id: %s", traceHeader[0]))
		}
		if err != nil {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to update registry:"+err.Error(),
			)
			return
		}
		updateRes, err := op.Wait(ctx)
		if err != nil {
			resp.Diagnostics.AddError(
				"Unable to Update Resource",
				fmt.Sprintf("An unexpected error occurred while waiting longrunning response. "+
					"Please retry the operation or report this issue to the provider developers.\n\n"+
					"Error: %s", err),
			)
			return
		}
		tflog.Debug(ctx, fmt.Sprintf("Update registry response: %s", validate.ProtoDump(updateRes)))

		plan.RegistryId = types.StringValue(updateRes.Id)
	}
	reqApi := &cloudregistry.GetRegistryRequest{}
	reqApi.SetRegistryId(plan.RegistryId.ValueString())
	tflog.Debug(ctx, fmt.Sprintf("Read registry request: %s", validate.ProtoDump(reqApi)))
	md := new(metadata.MD)
	res, err := cloudregistryv1sdk.NewRegistryClient(r.providerConfig.SDKv2).Get(ctx, reqApi, grpc.Header(md))
	if traceHeader := md.Get("x-server-trace-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read registry x-server-trace-id: %s", traceHeader[0]))
	}
	if traceHeader := md.Get("x-server-request-id"); len(traceHeader) > 0 {
		tflog.Debug(ctx, fmt.Sprintf("Read registry x-server-request-id: %s", traceHeader[0]))
	}
	if err != nil {
		if validate.IsStatusWithCode(err, codes.NotFound) {
			resp.Diagnostics.AddWarning(
				"Failed to Read resource",
				"registry not found",
			)
		} else {
			resp.Diagnostics.AddError(
				"Failed to Read resource",
				"Error while requesting API to get registry:"+err.Error(),
			)
		}
	}
	tflog.Debug(ctx, fmt.Sprintf("Read registry response: %s", validate.ProtoDump(res)))

	if resp.Diagnostics.HasError() {
		return
	}

	// diagnostics don't have errors and resource is nil => resource not found
	if res == nil {
		resp.Diagnostics.AddError("Failed to read", "Resource not found")
		return
	}

	to := state.Timeouts
	if !plan.Timeouts.Equal(state.Timeouts) {
		to = plan.Timeouts
	}

	newState := flattenYandexCloudregistryRegistry(ctx, res, plan, to, &resp.Diagnostics)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &newState)...)
	if resp.Diagnostics.HasError() {
		return
	}
}
