// Code generated by tfgen. DO NOT EDIT.

package yandex_organizationmanager_user_ssh_key

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
)

func YandexOrganizationmanagerUserSshKeyDatasourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "",
		MarkdownDescription: "",
		Attributes: map[string]schema.Attribute{

			"created_at": schema.StringAttribute{
				MarkdownDescription: "",
				Description: "" +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.UserSshKey.created_at
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/user_ssh_key.proto\n",
				Computed: true,
			},

			"data": schema.StringAttribute{
				MarkdownDescription: "",
				Description: "" +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.UserSshKey.data
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/user_ssh_key.proto\n",
				Computed: true,
			},

			"expires_at": schema.StringAttribute{
				MarkdownDescription: "Used for temporary keys, if empty the key doesn't expire",
				Description: "Used for temporary keys, if empty the key doesn't expire" +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.UserSshKey.expires_at
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/user_ssh_key.proto\n",
				Computed: true,
			},

			"fingerprint": schema.StringAttribute{
				MarkdownDescription: "",
				Description: "" +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.UserSshKey.fingerprint
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/user_ssh_key.proto\n",
				Computed: true,
			},

			"name": schema.StringAttribute{
				MarkdownDescription: "",
				Description: "" +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.UserSshKey.name
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/user_ssh_key.proto\n",
				Computed: true,
			},

			"organization_id": schema.StringAttribute{
				MarkdownDescription: "",
				Description: "" +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.UserSshKey.organization_id
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/user_ssh_key.proto\n",
				Computed: true,
			},

			"subject_id": schema.StringAttribute{
				MarkdownDescription: "",
				Description: "" +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.UserSshKey.subject_id
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/user_ssh_key.proto\n",
				Computed: true,
			},

			"user_ssh_key_id": schema.StringAttribute{
				MarkdownDescription: "",
				Description: "" +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.GetUserSshKeyRequest.user_ssh_key_id
					// -> yandex.cloud.organizationmanager.v1.UserSshKey.id
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/user_ssh_key_service.proto\n",
				Optional: true,
				Computed: true,

				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "",
				Description: "" +
					// proto paths: +
					// -> yandex.cloud.organizationmanager.v1.GetUserSshKeyRequest.user_ssh_key_id
					// -> yandex.cloud.organizationmanager.v1.UserSshKey.id
					"package: yandex.cloud.organizationmanager.v1\n" +
					"filename: yandex/cloud/organizationmanager/v1/user_ssh_key_service.proto\n",
				Optional: true,
				Computed: true,

				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 50),
				},
			},
		},

		Blocks: map[string]schema.Block{
			"timeouts": timeouts.BlockAll(ctx),
		},
	}
}
