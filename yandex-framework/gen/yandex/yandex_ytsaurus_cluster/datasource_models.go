// Code generated by tfgen. DO NOT EDIT.

package yandex_ytsaurus_cluster

import (
	"context"
	"time"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	ytsaurus "github.com/yandex-cloud/go-genproto/yandex/cloud/ytsaurus/v1"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/converter"
)

type yandexYtsaurusClusterDatasourceModel struct {
	ClusterId        types.String   `tfsdk:"cluster_id"`
	ID               types.String   `tfsdk:"id"`
	CreatedAt        types.String   `tfsdk:"created_at"`
	CreatedBy        types.String   `tfsdk:"created_by"`
	Description      types.String   `tfsdk:"description"`
	Endpoints        types.Object   `tfsdk:"endpoints"`
	FolderId         types.String   `tfsdk:"folder_id"`
	Health           types.String   `tfsdk:"health"`
	Labels           types.Map      `tfsdk:"labels"`
	Name             types.String   `tfsdk:"name"`
	SecurityGroupIds types.List     `tfsdk:"security_group_ids"`
	Spec             types.Object   `tfsdk:"spec"`
	Status           types.String   `tfsdk:"status"`
	SubnetId         types.String   `tfsdk:"subnet_id"`
	UpdatedAt        types.String   `tfsdk:"updated_at"`
	UpdatedBy        types.String   `tfsdk:"updated_by"`
	ZoneId           types.String   `tfsdk:"zone_id"`
	Timeouts         timeouts.Value `tfsdk:"timeouts"`
}

func NewYandexYtsaurusClusterDatasourceModel() yandexYtsaurusClusterDatasourceModel {
	return yandexYtsaurusClusterDatasourceModel{
		ClusterId:        types.StringNull(),
		ID:               types.StringNull(),
		CreatedAt:        types.StringNull(),
		CreatedBy:        types.StringNull(),
		Description:      types.StringNull(),
		Endpoints:        types.ObjectNull(yandexYtsaurusClusterEndpointsModelType.AttrTypes),
		FolderId:         types.StringNull(),
		Health:           types.StringNull(),
		Labels:           types.MapNull(types.StringType),
		Name:             types.StringNull(),
		SecurityGroupIds: types.ListNull(types.StringType),
		Spec:             types.ObjectNull(yandexYtsaurusClusterSpecModelType.AttrTypes),
		Status:           types.StringNull(),
		SubnetId:         types.StringNull(),
		UpdatedAt:        types.StringNull(),
		UpdatedBy:        types.StringNull(),
		ZoneId:           types.StringNull(),
	}
}

func yandexYtsaurusClusterDatasourceModelFillUnknown(target yandexYtsaurusClusterDatasourceModel) yandexYtsaurusClusterDatasourceModel {
	if target.ClusterId.IsUnknown() || target.ClusterId.IsNull() {
		target.ClusterId = types.StringNull()
	}
	if target.ID.IsUnknown() || target.ID.IsNull() {
		target.ID = types.StringNull()
	}
	if target.CreatedAt.IsUnknown() || target.CreatedAt.IsNull() {
		target.CreatedAt = types.StringNull()
	}
	if target.CreatedBy.IsUnknown() || target.CreatedBy.IsNull() {
		target.CreatedBy = types.StringNull()
	}
	if target.Description.IsUnknown() || target.Description.IsNull() {
		target.Description = types.StringNull()
	}
	if target.Endpoints.IsUnknown() || target.Endpoints.IsNull() {
		target.Endpoints = types.ObjectNull(yandexYtsaurusClusterEndpointsModelType.AttrTypes)
	}
	if target.FolderId.IsUnknown() || target.FolderId.IsNull() {
		target.FolderId = types.StringNull()
	}
	if target.Health.IsUnknown() || target.Health.IsNull() {
		target.Health = types.StringNull()
	}
	if target.Labels.IsUnknown() || target.Labels.IsNull() {
		target.Labels = types.MapNull(types.StringType)
	}
	if target.Name.IsUnknown() || target.Name.IsNull() {
		target.Name = types.StringNull()
	}
	if target.SecurityGroupIds.IsUnknown() || target.SecurityGroupIds.IsNull() {
		target.SecurityGroupIds = types.ListNull(types.StringType)
	}
	if target.Spec.IsUnknown() || target.Spec.IsNull() {
		target.Spec = types.ObjectNull(yandexYtsaurusClusterSpecModelType.AttrTypes)
	}
	if target.Status.IsUnknown() || target.Status.IsNull() {
		target.Status = types.StringNull()
	}
	if target.SubnetId.IsUnknown() || target.SubnetId.IsNull() {
		target.SubnetId = types.StringNull()
	}
	if target.UpdatedAt.IsUnknown() || target.UpdatedAt.IsNull() {
		target.UpdatedAt = types.StringNull()
	}
	if target.UpdatedBy.IsUnknown() || target.UpdatedBy.IsNull() {
		target.UpdatedBy = types.StringNull()
	}
	if target.ZoneId.IsUnknown() || target.ZoneId.IsNull() {
		target.ZoneId = types.StringNull()
	}
	return target
}

var yandexYtsaurusClusterDatasourceModelType = types.ObjectType{
	AttrTypes: map[string]attr.Type{
		"cluster_id":         types.StringType,
		"id":                 types.StringType,
		"created_at":         types.StringType,
		"created_by":         types.StringType,
		"description":        types.StringType,
		"endpoints":          yandexYtsaurusClusterEndpointsModelType,
		"folder_id":          types.StringType,
		"health":             types.StringType,
		"labels":             types.MapType{ElemType: types.StringType},
		"name":               types.StringType,
		"security_group_ids": types.ListType{ElemType: types.StringType},
		"spec":               yandexYtsaurusClusterSpecModelType,
		"status":             types.StringType,
		"subnet_id":          types.StringType,
		"updated_at":         types.StringType,
		"updated_by":         types.StringType,
		"zone_id":            types.StringType,
		"timeouts":           timeouts.AttributesAll(context.Background()).GetType(),
	},
}

func flattenYandexYtsaurusClusterDatasource(ctx context.Context,
	yandexYtsaurusClusterDatasource *ytsaurus.Cluster,
	state yandexYtsaurusClusterDatasourceModel,
	to timeouts.Value,
	diags *diag.Diagnostics) types.Object {
	if yandexYtsaurusClusterDatasource == nil {
		return types.ObjectNull(yandexYtsaurusClusterDatasourceModelType.AttrTypes)
	}
	value, diag := types.ObjectValueFrom(ctx, yandexYtsaurusClusterDatasourceModelType.AttrTypes, yandexYtsaurusClusterDatasourceModel{
		ClusterId:        types.StringValue(yandexYtsaurusClusterDatasource.GetId()),
		ID:               types.StringValue(yandexYtsaurusClusterDatasource.GetId()),
		CreatedAt:        types.StringValue(yandexYtsaurusClusterDatasource.GetCreatedAt().AsTime().Format(time.RFC3339)),
		CreatedBy:        types.StringValue(yandexYtsaurusClusterDatasource.GetCreatedBy()),
		Description:      types.StringValue(yandexYtsaurusClusterDatasource.GetDescription()),
		Endpoints:        flattenYandexYtsaurusClusterEndpoints(ctx, yandexYtsaurusClusterDatasource.GetEndpoints(), diags),
		FolderId:         types.StringValue(yandexYtsaurusClusterDatasource.GetFolderId()),
		Health:           types.StringValue(yandexYtsaurusClusterDatasource.GetHealth().String()),
		Labels:           flattenYandexYtsaurusClusterLabels(ctx, yandexYtsaurusClusterDatasource.GetLabels(), state.Labels, diags),
		Name:             types.StringValue(yandexYtsaurusClusterDatasource.GetName()),
		SecurityGroupIds: flattenYandexYtsaurusClusterSecurityGroupIds(ctx, yandexYtsaurusClusterDatasource.GetSecurityGroupIds(), state.SecurityGroupIds, diags),
		Spec:             flattenYandexYtsaurusClusterSpec(ctx, yandexYtsaurusClusterDatasource.GetSpec(), converter.ExpandObject(ctx, state.Spec, yandexYtsaurusClusterSpecModel{}, diags).(yandexYtsaurusClusterSpecModel), diags),
		Status:           types.StringValue(yandexYtsaurusClusterDatasource.GetStatus().String()),
		SubnetId:         types.StringValue(yandexYtsaurusClusterDatasource.GetSubnetId()),
		UpdatedAt:        types.StringValue(yandexYtsaurusClusterDatasource.GetUpdatedAt().AsTime().Format(time.RFC3339)),
		UpdatedBy:        types.StringValue(yandexYtsaurusClusterDatasource.GetUpdatedBy()),
		ZoneId:           types.StringValue(yandexYtsaurusClusterDatasource.GetZoneId()),
		Timeouts:         to,
	})
	diags.Append(diag...)
	return value
}
