// Code generated by tfgen. DO NOT EDIT.

package yandex_serverless_eventrouter_bus

import (
	"context"
	"regexp"

	"github.com/hashicorp/terraform-plugin-framework-timeouts/resource/timeouts"
	"github.com/hashicorp/terraform-plugin-framework-validators/mapvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/yandex-cloud/terraform-provider-yandex/pkg/planmodifiers"
)

func YandexServerlessEventrouterBusResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Description:         "",
		MarkdownDescription: "",
		Version:             1,
		Attributes: map[string]schema.Attribute{

			"bus_id": schema.StringAttribute{
				MarkdownDescription: "ID of the bus to get.",
				Description: "ID of the bus to get." +
					// proto paths: +
					// -> yandex.cloud.serverless.eventrouter.v1.Bus.id
					// -> yandex.cloud.serverless.eventrouter.v1.DeleteBusRequest.bus_id
					// -> yandex.cloud.serverless.eventrouter.v1.GetBusRequest.bus_id
					// -> yandex.cloud.serverless.eventrouter.v1.UpdateBusRequest.bus_id
					"package: yandex.cloud.serverless.eventrouter.v1\n" +
					"filename: yandex/cloud/serverless/eventrouter/v1/bus_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			"id": schema.StringAttribute{
				MarkdownDescription: "ID of the bus to get.",
				Description: "ID of the bus to get." +
					// proto paths: +
					// -> yandex.cloud.serverless.eventrouter.v1.Bus.id
					// -> yandex.cloud.serverless.eventrouter.v1.DeleteBusRequest.bus_id
					// -> yandex.cloud.serverless.eventrouter.v1.GetBusRequest.bus_id
					// -> yandex.cloud.serverless.eventrouter.v1.UpdateBusRequest.bus_id
					"package: yandex.cloud.serverless.eventrouter.v1\n" +
					"filename: yandex/cloud/serverless/eventrouter/v1/bus_service.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			"cloud_id": schema.StringAttribute{
				MarkdownDescription: "ID of the cloud that the bus resides in.",
				Description: "ID of the cloud that the bus resides in." +
					// proto paths: +
					// -> yandex.cloud.serverless.eventrouter.v1.Bus.cloud_id
					"package: yandex.cloud.serverless.eventrouter.v1\n" +
					"filename: yandex/cloud/serverless/eventrouter/v1/bus.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			"created_at": schema.StringAttribute{
				MarkdownDescription: "Creation timestamp.",
				Description: "Creation timestamp." +
					// proto paths: +
					// -> yandex.cloud.serverless.eventrouter.v1.Bus.created_at
					"package: yandex.cloud.serverless.eventrouter.v1\n" +
					"filename: yandex/cloud/serverless/eventrouter/v1/bus.proto\n",
				Computed: true,
			},

			"deletion_protection": schema.BoolAttribute{
				MarkdownDescription: "Deletion protection.",
				Description: "Deletion protection." +
					// proto paths: +
					// -> yandex.cloud.serverless.eventrouter.v1.Bus.deletion_protection
					// -> yandex.cloud.serverless.eventrouter.v1.CreateBusRequest.deletion_protection
					// -> yandex.cloud.serverless.eventrouter.v1.UpdateBusRequest.deletion_protection
					"package: yandex.cloud.serverless.eventrouter.v1\n" +
					"filename: yandex/cloud/serverless/eventrouter/v1/bus.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.UseStateForUnknown(),
				},
			},

			"description": schema.StringAttribute{
				MarkdownDescription: "Description of the bus.",
				Description: "Description of the bus." +
					// proto paths: +
					// -> yandex.cloud.serverless.eventrouter.v1.Bus.description
					// -> yandex.cloud.serverless.eventrouter.v1.CreateBusRequest.description
					// -> yandex.cloud.serverless.eventrouter.v1.UpdateBusRequest.description
					"package: yandex.cloud.serverless.eventrouter.v1\n" +
					"filename: yandex/cloud/serverless/eventrouter/v1/bus.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.LengthBetween(0, 256),
				},
			},

			"folder_id": schema.StringAttribute{
				MarkdownDescription: "ID of the folder that the bus belongs to.",
				Description: "ID of the folder that the bus belongs to." +
					// proto paths: +
					// -> yandex.cloud.serverless.eventrouter.v1.Bus.folder_id
					// -> yandex.cloud.serverless.eventrouter.v1.CreateBusRequest.folder_id
					"package: yandex.cloud.serverless.eventrouter.v1\n" +
					"filename: yandex/cloud/serverless/eventrouter/v1/bus.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
			},

			"labels": schema.MapAttribute{
				ElementType:         types.StringType,
				MarkdownDescription: "Resource labels as `key:value` pairs.",
				Description: "Resource labels as `key:value` pairs." +
					// proto paths: +
					// -> yandex.cloud.serverless.eventrouter.v1.Bus.labels
					// -> yandex.cloud.serverless.eventrouter.v1.CreateBusRequest.labels
					// -> yandex.cloud.serverless.eventrouter.v1.UpdateBusRequest.labels
					"package: yandex.cloud.serverless.eventrouter.v1\n" +
					"filename: yandex/cloud/serverless/eventrouter/v1/bus.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.UseStateForUnknown(),
					planmodifiers.NilRelaxedMap(),
				},
				Validators: []validator.Map{
					mapvalidator.KeysAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([a-z][-_0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(1, 63),
					),
					mapvalidator.ValueStringsAre(
						stringvalidator.RegexMatches(regexp.MustCompile("^([-_0-9a-z]*)$"), "error validating regexp"),
						stringvalidator.LengthBetween(0, 63),
					),
				},
			},

			"name": schema.StringAttribute{
				MarkdownDescription: "Name of the bus.",
				Description: "Name of the bus." +
					// proto paths: +
					// -> yandex.cloud.serverless.eventrouter.v1.Bus.name
					// -> yandex.cloud.serverless.eventrouter.v1.CreateBusRequest.name
					// -> yandex.cloud.serverless.eventrouter.v1.UpdateBusRequest.name
					"package: yandex.cloud.serverless.eventrouter.v1\n" +
					"filename: yandex/cloud/serverless/eventrouter/v1/bus.proto\n",
				Optional: true,
				Computed: true,

				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(regexp.MustCompile("^(|[a-z][-a-z0-9]{1,61}[a-z0-9])$"), "error validating regexp"),
				},
			},

			"status": schema.StringAttribute{
				MarkdownDescription: "Status of the bus.",
				Description: "Status of the bus." +
					// proto paths: +
					// -> yandex.cloud.serverless.eventrouter.v1.Bus.status
					"package: yandex.cloud.serverless.eventrouter.v1\n" +
					"filename: yandex/cloud/serverless/eventrouter/v1/bus.proto\n",
				Computed: true,
			},
		},

		Blocks: map[string]schema.Block{
			"timeouts": timeouts.BlockAll(ctx),
		},
	}
}

func (r *yandexServerlessEventrouterBusResource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
	schema0 := YandexServerlessEventrouterBusResourceSchema(ctx)
	return map[int64]resource.StateUpgrader{
		0: resource.StateUpgrader{
			PriorSchema:   &schema0,
			StateUpgrader: moveStateFromV0,
		},
	}
}
